
WiFi_HTTP_Server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009170  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce4  08009300  08009300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fe4  08009fe4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009fe4  08009fe4  00019fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fec  08009fec  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fec  08009fec  00019fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ff0  08009ff0  00019ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020088  2**0
                  CONTENTS
 10 .bss          000013d0  20000088  20000088  00020088  2**2
                  ALLOC
 11 ._user_heap_stack 00016800  20001458  20001458  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 14 .debug_line   00017f8c  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 0000009a  00000000  00000000  00038087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00014271  00000000  00000000  00038121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00002ced  00000000  00000000  0004c392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001300  00000000  00000000  0004f080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104fdb  00000000  00000000  00050380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00000ebb  00000000  00000000  0015535b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002a9fe  00000000  00000000  00156216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005c10  00000000  00000000  00180c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092e8 	.word	0x080092e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080092e8 	.word	0x080092e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800057c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000580:	f002 fd00 	bl	8002f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000586:	490d      	ldr	r1, [pc, #52]	; (80005bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <LoopForever+0xe>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800059c:	4c0a      	ldr	r4, [pc, #40]	; (80005c8 <LoopForever+0x16>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005aa:	f007 ff2f 	bl	800840c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ae:	f000 f80f 	bl	80005d0 <main>

080005b2 <LoopForever>:

LoopForever:
    b LoopForever
 80005b2:	e7fe      	b.n	80005b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005bc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80005c0:	08009ff4 	.word	0x08009ff4
  ldr r2, =_sbss
 80005c4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80005c8:	20001458 	.word	0x20001458

080005cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005cc:	e7fe      	b.n	80005cc <ADC1_2_IRQHandler>
	...

080005d0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f002 ff4e 	bl	8003474 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 fc30 	bl	8000e3c <SystemClock_Config>

  /* Configure LED2 */
  BSP_LED_Init(LED2);
 80005dc:	2000      	movs	r0, #0
 80005de:	f002 fd07 	bl	8002ff0 <BSP_LED_Init>
  //HAL_ADC_Start(&AdcHandle) ;

  /* WIFI Web Server demonstration */
#if defined (TERMINAL_USE)
  /* Initialize all configured peripherals */
  hDiscoUart.Instance = DISCOVERY_COM1;
 80005e2:	4b16      	ldr	r3, [pc, #88]	; (800063c <main+0x6c>)
 80005e4:	4a16      	ldr	r2, [pc, #88]	; (8000640 <main+0x70>)
 80005e6:	601a      	str	r2, [r3, #0]
  hDiscoUart.Init.BaudRate = 115200;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <main+0x6c>)
 80005ea:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005ee:	605a      	str	r2, [r3, #4]
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <main+0x6c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <main+0x6c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	60da      	str	r2, [r3, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <main+0x6c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <main+0x6c>)
 8000604:	220c      	movs	r2, #12
 8000606:	615a      	str	r2, [r3, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <main+0x6c>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <main+0x6c>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <main+0x6c>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <main+0x6c>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24


  BSP_COM_Init(COM1, &hDiscoUart);
 8000620:	4906      	ldr	r1, [pc, #24]	; (800063c <main+0x6c>)
 8000622:	2000      	movs	r0, #0
 8000624:	f002 fd40 	bl	80030a8 <BSP_COM_Init>
  BSP_TSENSOR_Init();
 8000628:	f002 fefa 	bl	8003420 <BSP_TSENSOR_Init>

  printf("****** WIFI Web Server demonstration****** \n\n");
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <main+0x74>)
 800062e:	f007 fce3 	bl	8007ff8 <puts>

#endif /* TERMINAL_USE */

  wifi_server();
 8000632:	f000 f88b 	bl	800074c <wifi_server>
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000127c 	.word	0x2000127c
 8000640:	40013800 	.word	0x40013800
 8000644:	08009300 	.word	0x08009300

08000648 <wifi_start>:
  * @retval None
  */


static int wifi_start(void)
{
 8000648:	b5b0      	push	{r4, r5, r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 800064e:	f002 fa65 	bl	8002b1c <WIFI_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d124      	bne.n	80006a2 <wifi_start+0x5a>
  {
    LOG(("ES-WIFI Initialized.\n"));
 8000658:	4815      	ldr	r0, [pc, #84]	; (80006b0 <wifi_start+0x68>)
 800065a:	f007 fccd 	bl	8007ff8 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 800065e:	463b      	mov	r3, r7
 8000660:	2106      	movs	r1, #6
 8000662:	4618      	mov	r0, r3
 8000664:	f002 faa8 	bl	8002bb8 <WIFI_GetMAC_Address>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d113      	bne.n	8000696 <wifi_start+0x4e>
    {
      LOG(("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n",
 800066e:	783b      	ldrb	r3, [r7, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	787b      	ldrb	r3, [r7, #1]
 8000674:	461c      	mov	r4, r3
 8000676:	78bb      	ldrb	r3, [r7, #2]
 8000678:	461d      	mov	r5, r3
 800067a:	78fb      	ldrb	r3, [r7, #3]
 800067c:	793a      	ldrb	r2, [r7, #4]
 800067e:	7979      	ldrb	r1, [r7, #5]
 8000680:	9102      	str	r1, [sp, #8]
 8000682:	9201      	str	r2, [sp, #4]
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	462b      	mov	r3, r5
 8000688:	4622      	mov	r2, r4
 800068a:	4601      	mov	r1, r0
 800068c:	4809      	ldr	r0, [pc, #36]	; (80006b4 <wifi_start+0x6c>)
 800068e:	f007 fc4d 	bl	8007f2c <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 8000692:	2300      	movs	r3, #0
 8000694:	e007      	b.n	80006a6 <wifi_start+0x5e>
      LOG(("> ERROR : CANNOT get MAC address\n"));
 8000696:	4808      	ldr	r0, [pc, #32]	; (80006b8 <wifi_start+0x70>)
 8000698:	f007 fcae 	bl	8007ff8 <puts>
      return -1;
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	e001      	b.n	80006a6 <wifi_start+0x5e>
    return -1;
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bdb0      	pop	{r4, r5, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	08009330 	.word	0x08009330
 80006b4:	08009348 	.word	0x08009348
 80006b8:	08009388 	.word	0x08009388

080006bc <wifi_connect>:



int wifi_connect(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af02      	add	r7, sp, #8

  wifi_start();
 80006c2:	f7ff ffc1 	bl	8000648 <wifi_start>

  LOG(("\nConnecting to %s , %s\n",SSID,PASSWORD));
 80006c6:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <wifi_connect+0x74>)
 80006c8:	491a      	ldr	r1, [pc, #104]	; (8000734 <wifi_connect+0x78>)
 80006ca:	481b      	ldr	r0, [pc, #108]	; (8000738 <wifi_connect+0x7c>)
 80006cc:	f007 fc2e 	bl	8007f2c <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 80006d0:	2203      	movs	r2, #3
 80006d2:	4917      	ldr	r1, [pc, #92]	; (8000730 <wifi_connect+0x74>)
 80006d4:	4817      	ldr	r0, [pc, #92]	; (8000734 <wifi_connect+0x78>)
 80006d6:	f002 fa4d 	bl	8002b74 <WIFI_Connect>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d11e      	bne.n	800071e <wifi_connect+0x62>
  {
    if(WIFI_GetIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 80006e0:	2104      	movs	r1, #4
 80006e2:	4816      	ldr	r0, [pc, #88]	; (800073c <wifi_connect+0x80>)
 80006e4:	f002 fa88 	bl	8002bf8 <WIFI_GetIP_Address>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d111      	bne.n	8000712 <wifi_connect+0x56>
    {
      LOG(("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <wifi_connect+0x80>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <wifi_connect+0x80>)
 80006f6:	785b      	ldrb	r3, [r3, #1]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <wifi_connect+0x80>)
 80006fc:	789b      	ldrb	r3, [r3, #2]
 80006fe:	4618      	mov	r0, r3
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <wifi_connect+0x80>)
 8000702:	78db      	ldrb	r3, [r3, #3]
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	4603      	mov	r3, r0
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <wifi_connect+0x84>)
 800070a:	f007 fc0f 	bl	8007f2c <iprintf>
  else
  {
		 LOG(("ERROR : es-wifi module NOT connected\n"));
     return -1;
  }
  return 0;
 800070e:	2300      	movs	r3, #0
 8000710:	e00a      	b.n	8000728 <wifi_connect+0x6c>
		  LOG((" ERROR : es-wifi module CANNOT get IP address\n"));
 8000712:	480c      	ldr	r0, [pc, #48]	; (8000744 <wifi_connect+0x88>)
 8000714:	f007 fc70 	bl	8007ff8 <puts>
      return -1;
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	e004      	b.n	8000728 <wifi_connect+0x6c>
		 LOG(("ERROR : es-wifi module NOT connected\n"));
 800071e:	480a      	ldr	r0, [pc, #40]	; (8000748 <wifi_connect+0x8c>)
 8000720:	f007 fc6a 	bl	8007ff8 <puts>
     return -1;
 8000724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	080093ac 	.word	0x080093ac
 8000734:	080093b8 	.word	0x080093b8
 8000738:	080093c0 	.word	0x080093c0
 800073c:	200004a4 	.word	0x200004a4
 8000740:	080093d8 	.word	0x080093d8
 8000744:	08009414 	.word	0x08009414
 8000748:	08009444 	.word	0x08009444

0800074c <wifi_server>:

int wifi_server(void)
{
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b087      	sub	sp, #28
 8000750:	af02      	add	r7, sp, #8
  bool StopServer = false;
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]

  LOG(("\nRunning HTML Server test\n"));
 8000756:	483e      	ldr	r0, [pc, #248]	; (8000850 <wifi_server+0x104>)
 8000758:	f007 fc4e 	bl	8007ff8 <puts>
  if (wifi_connect()!=0) return -1;
 800075c:	f7ff ffae 	bl	80006bc <wifi_connect>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d002      	beq.n	800076c <wifi_server+0x20>
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	e06d      	b.n	8000848 <wifi_server+0xfc>


  if (WIFI_STATUS_OK!=WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT))
 800076c:	2350      	movs	r3, #80	; 0x50
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	4b38      	ldr	r3, [pc, #224]	; (8000854 <wifi_server+0x108>)
 8000772:	2201      	movs	r2, #1
 8000774:	2100      	movs	r1, #0
 8000776:	2000      	movs	r0, #0
 8000778:	f002 fa62 	bl	8002c40 <WIFI_StartServer>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d002      	beq.n	8000788 <wifi_server+0x3c>
  {
    LOG(("ERROR: Cannot start server.\n"));
 8000782:	4835      	ldr	r0, [pc, #212]	; (8000858 <wifi_server+0x10c>)
 8000784:	f007 fc38 	bl	8007ff8 <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8000788:	4b34      	ldr	r3, [pc, #208]	; (800085c <wifi_server+0x110>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	4b33      	ldr	r3, [pc, #204]	; (800085c <wifi_server+0x110>)
 8000790:	785b      	ldrb	r3, [r3, #1]
 8000792:	461a      	mov	r2, r3
 8000794:	4b31      	ldr	r3, [pc, #196]	; (800085c <wifi_server+0x110>)
 8000796:	789b      	ldrb	r3, [r3, #2]
 8000798:	4618      	mov	r0, r3
 800079a:	4b30      	ldr	r3, [pc, #192]	; (800085c <wifi_server+0x110>)
 800079c:	78db      	ldrb	r3, [r3, #3]
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	4603      	mov	r3, r0
 80007a2:	482f      	ldr	r0, [pc, #188]	; (8000860 <wifi_server+0x114>)
 80007a4:	f007 fbc2 	bl	8007f2c <iprintf>
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;


    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,sizeof(RemoteIP), &RemotePort))
 80007a8:	e00f      	b.n	80007ca <wifi_server+0x7e>
    {
        LOG(("Waiting connection to  %d.%d.%d.%d\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 80007aa:	4b2c      	ldr	r3, [pc, #176]	; (800085c <wifi_server+0x110>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	4619      	mov	r1, r3
 80007b0:	4b2a      	ldr	r3, [pc, #168]	; (800085c <wifi_server+0x110>)
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b29      	ldr	r3, [pc, #164]	; (800085c <wifi_server+0x110>)
 80007b8:	789b      	ldrb	r3, [r3, #2]
 80007ba:	4618      	mov	r0, r3
 80007bc:	4b27      	ldr	r3, [pc, #156]	; (800085c <wifi_server+0x110>)
 80007be:	78db      	ldrb	r3, [r3, #3]
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	4603      	mov	r3, r0
 80007c4:	4827      	ldr	r0, [pc, #156]	; (8000864 <wifi_server+0x118>)
 80007c6:	f007 fbb1 	bl	8007f2c <iprintf>
    while (WIFI_STATUS_OK != WIFI_WaitServerConnection(SOCKET,1000,RemoteIP,sizeof(RemoteIP), &RemotePort))
 80007ca:	f107 0208 	add.w	r2, r7, #8
 80007ce:	1dbb      	adds	r3, r7, #6
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	2304      	movs	r3, #4
 80007d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007d8:	2000      	movs	r0, #0
 80007da:	f002 fa61 	bl	8002ca0 <WIFI_WaitServerConnection>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1e2      	bne.n	80007aa <wifi_server+0x5e>

    }

    LOG(("Client connected %d.%d.%d.%d:%d\n",RemoteIP[0],RemoteIP[1],RemoteIP[2],RemoteIP[3],RemotePort));
 80007e4:	7a3b      	ldrb	r3, [r7, #8]
 80007e6:	4619      	mov	r1, r3
 80007e8:	7a7b      	ldrb	r3, [r7, #9]
 80007ea:	4618      	mov	r0, r3
 80007ec:	7abb      	ldrb	r3, [r7, #10]
 80007ee:	461c      	mov	r4, r3
 80007f0:	7afb      	ldrb	r3, [r7, #11]
 80007f2:	88fa      	ldrh	r2, [r7, #6]
 80007f4:	9201      	str	r2, [sp, #4]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	4623      	mov	r3, r4
 80007fa:	4602      	mov	r2, r0
 80007fc:	481a      	ldr	r0, [pc, #104]	; (8000868 <wifi_server+0x11c>)
 80007fe:	f007 fb95 	bl	8007f2c <iprintf>

    StopServer=WebServerProcess();
 8000802:	f000 f839 	bl	8000878 <WebServerProcess>
 8000806:	4603      	mov	r3, r0
 8000808:	73fb      	strb	r3, [r7, #15]

    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 800080a:	2000      	movs	r0, #0
 800080c:	f002 fa92 	bl	8002d34 <WIFI_CloseServerConnection>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d005      	beq.n	8000822 <wifi_server+0xd6>
    {
      LOG(("ERROR: failed to close current Server connection\n"));
 8000816:	4815      	ldr	r0, [pc, #84]	; (800086c <wifi_server+0x120>)
 8000818:	f007 fbee 	bl	8007ff8 <puts>
      return -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
 8000820:	e012      	b.n	8000848 <wifi_server+0xfc>
    }
  }
  while(StopServer == false);
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	f083 0301 	eor.w	r3, r3, #1
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d1cd      	bne.n	80007ca <wifi_server+0x7e>

  if (WIFI_STATUS_OK!=WIFI_StopServer(SOCKET))
 800082e:	2000      	movs	r0, #0
 8000830:	f002 fa98 	bl	8002d64 <WIFI_StopServer>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d002      	beq.n	8000840 <wifi_server+0xf4>
  {
    LOG(("ERROR: Cannot stop server.\n"));
 800083a:	480d      	ldr	r0, [pc, #52]	; (8000870 <wifi_server+0x124>)
 800083c:	f007 fbdc 	bl	8007ff8 <puts>
  }

  LOG(("Server is stop\n"));
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <wifi_server+0x128>)
 8000842:	f007 fbd9 	bl	8007ff8 <puts>
  return 0;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	bd90      	pop	{r4, r7, pc}
 8000850:	0800946c 	.word	0x0800946c
 8000854:	08009488 	.word	0x08009488
 8000858:	0800948c 	.word	0x0800948c
 800085c:	200004a4 	.word	0x200004a4
 8000860:	080094a8 	.word	0x080094a8
 8000864:	080094f8 	.word	0x080094f8
 8000868:	0800951c 	.word	0x0800951c
 800086c:	08009540 	.word	0x08009540
 8000870:	08009574 	.word	0x08009574
 8000874:	08009590 	.word	0x08009590

08000878 <WebServerProcess>:


static bool WebServerProcess(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af02      	add	r7, sp, #8
  uint8_t temp;
  uint16_t  respLen;
  static   uint8_t resp[1024];
  bool    stopserver=false;
 800087e:	2300      	movs	r3, #0
 8000880:	73fb      	strb	r3, [r7, #15]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	f242 7210 	movw	r2, #10000	; 0x2710
 800088a:	9200      	str	r2, [sp, #0]
 800088c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000890:	4954      	ldr	r1, [pc, #336]	; (80009e4 <WebServerProcess+0x16c>)
 8000892:	2000      	movs	r0, #0
 8000894:	f002 faa0 	bl	8002dd8 <WIFI_ReceiveData>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	f040 809a 	bne.w	80009d4 <WebServerProcess+0x15c>
  {
   LOG(("get %d byte from server\n",respLen));
 80008a0:	89bb      	ldrh	r3, [r7, #12]
 80008a2:	4619      	mov	r1, r3
 80008a4:	4850      	ldr	r0, [pc, #320]	; (80009e8 <WebServerProcess+0x170>)
 80008a6:	f007 fb41 	bl	8007f2c <iprintf>

   if( respLen > 0)
 80008aa:	89bb      	ldrh	r3, [r7, #12]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f000 8094 	beq.w	80009da <WebServerProcess+0x162>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 80008b2:	494e      	ldr	r1, [pc, #312]	; (80009ec <WebServerProcess+0x174>)
 80008b4:	484b      	ldr	r0, [pc, #300]	; (80009e4 <WebServerProcess+0x16c>)
 80008b6:	f007 fd47 	bl	8008348 <strstr>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d01c      	beq.n	80008fa <WebServerProcess+0x82>
      {
        temp = (int) BSP_TSENSOR_ReadTemp();
 80008c0:	f002 fdca 	bl	8003458 <BSP_TSENSOR_ReadTemp>
 80008c4:	eef0 7a40 	vmov.f32	s15, s0
 80008c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80008d0:	793b      	ldrb	r3, [r7, #4]
 80008d2:	73bb      	strb	r3, [r7, #14]
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 80008d4:	4b46      	ldr	r3, [pc, #280]	; (80009f0 <WebServerProcess+0x178>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	7bba      	ldrb	r2, [r7, #14]
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f8a0 	bl	8000a24 <SendWebPage>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d003      	beq.n	80008f2 <WebServerProcess+0x7a>
        {
          LOG(("> ERROR : Cannot send web page\n"));
 80008ea:	4842      	ldr	r0, [pc, #264]	; (80009f4 <WebServerProcess+0x17c>)
 80008ec:	f007 fb84 	bl	8007ff8 <puts>
 80008f0:	e073      	b.n	80009da <WebServerProcess+0x162>
        }
        else
        {
          LOG(("Send page after  GET command\n"));
 80008f2:	4841      	ldr	r0, [pc, #260]	; (80009f8 <WebServerProcess+0x180>)
 80008f4:	f007 fb80 	bl	8007ff8 <puts>
 80008f8:	e06f      	b.n	80009da <WebServerProcess+0x162>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 80008fa:	4940      	ldr	r1, [pc, #256]	; (80009fc <WebServerProcess+0x184>)
 80008fc:	4839      	ldr	r0, [pc, #228]	; (80009e4 <WebServerProcess+0x16c>)
 80008fe:	f007 fd23 	bl	8008348 <strstr>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d068      	beq.n	80009da <WebServerProcess+0x162>
       {
         LOG(("Post request\n"));
 8000908:	483d      	ldr	r0, [pc, #244]	; (8000a00 <WebServerProcess+0x188>)
 800090a:	f007 fb75 	bl	8007ff8 <puts>

         if(strstr((char *)resp, "radio"))
 800090e:	493d      	ldr	r1, [pc, #244]	; (8000a04 <WebServerProcess+0x18c>)
 8000910:	4834      	ldr	r0, [pc, #208]	; (80009e4 <WebServerProcess+0x16c>)
 8000912:	f007 fd19 	bl	8008348 <strstr>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d024      	beq.n	8000966 <WebServerProcess+0xee>
         {
           if(strstr((char *)resp, "radio=0"))
 800091c:	493a      	ldr	r1, [pc, #232]	; (8000a08 <WebServerProcess+0x190>)
 800091e:	4831      	ldr	r0, [pc, #196]	; (80009e4 <WebServerProcess+0x16c>)
 8000920:	f007 fd12 	bl	8008348 <strstr>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d006      	beq.n	8000938 <WebServerProcess+0xc0>
           {
             LedState = 0;
 800092a:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <WebServerProcess+0x178>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
             BSP_LED_Off(LED2);
 8000930:	2000      	movs	r0, #0
 8000932:	f002 fba3 	bl	800307c <BSP_LED_Off>
 8000936:	e00c      	b.n	8000952 <WebServerProcess+0xda>
           }
           else if(strstr((char *)resp, "radio=1"))
 8000938:	4934      	ldr	r1, [pc, #208]	; (8000a0c <WebServerProcess+0x194>)
 800093a:	482a      	ldr	r0, [pc, #168]	; (80009e4 <WebServerProcess+0x16c>)
 800093c:	f007 fd04 	bl	8008348 <strstr>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d005      	beq.n	8000952 <WebServerProcess+0xda>
           {
             LedState = 1;
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <WebServerProcess+0x178>)
 8000948:	2201      	movs	r2, #1
 800094a:	601a      	str	r2, [r3, #0]
             BSP_LED_On(LED2);
 800094c:	2000      	movs	r0, #0
 800094e:	f002 fb7f 	bl	8003050 <BSP_LED_On>
           }
           temp = (int) BSP_TSENSOR_ReadTemp();
 8000952:	f002 fd81 	bl	8003458 <BSP_TSENSOR_ReadTemp>
 8000956:	eef0 7a40 	vmov.f32	s15, s0
 800095a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800095e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000962:	793b      	ldrb	r3, [r7, #4]
 8000964:	73bb      	strb	r3, [r7, #14]
         }
         if(strstr((char *)resp, "stop_server"))
 8000966:	492a      	ldr	r1, [pc, #168]	; (8000a10 <WebServerProcess+0x198>)
 8000968:	481e      	ldr	r0, [pc, #120]	; (80009e4 <WebServerProcess+0x16c>)
 800096a:	f007 fced 	bl	8008348 <strstr>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d012      	beq.n	800099a <WebServerProcess+0x122>
         {
           if(strstr((char *)resp, "stop_server=0"))
 8000974:	4927      	ldr	r1, [pc, #156]	; (8000a14 <WebServerProcess+0x19c>)
 8000976:	481b      	ldr	r0, [pc, #108]	; (80009e4 <WebServerProcess+0x16c>)
 8000978:	f007 fce6 	bl	8008348 <strstr>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d002      	beq.n	8000988 <WebServerProcess+0x110>
           {
             stopserver = false;
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	e008      	b.n	800099a <WebServerProcess+0x122>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 8000988:	4923      	ldr	r1, [pc, #140]	; (8000a18 <WebServerProcess+0x1a0>)
 800098a:	4816      	ldr	r0, [pc, #88]	; (80009e4 <WebServerProcess+0x16c>)
 800098c:	f007 fcdc 	bl	8008348 <strstr>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <WebServerProcess+0x122>
           {
             stopserver = true;
 8000996:	2301      	movs	r3, #1
 8000998:	73fb      	strb	r3, [r7, #15]
           }
         }
         temp = (int) BSP_TSENSOR_ReadTemp();
 800099a:	f002 fd5d 	bl	8003458 <BSP_TSENSOR_ReadTemp>
 800099e:	eef0 7a40 	vmov.f32	s15, s0
 80009a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009a6:	edc7 7a01 	vstr	s15, [r7, #4]
 80009aa:	793b      	ldrb	r3, [r7, #4]
 80009ac:	73bb      	strb	r3, [r7, #14]
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <WebServerProcess+0x178>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	7bba      	ldrb	r2, [r7, #14]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f833 	bl	8000a24 <SendWebPage>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d003      	beq.n	80009cc <WebServerProcess+0x154>
         {
           LOG(("> ERROR : Cannot send web page\n"));
 80009c4:	480b      	ldr	r0, [pc, #44]	; (80009f4 <WebServerProcess+0x17c>)
 80009c6:	f007 fb17 	bl	8007ff8 <puts>
 80009ca:	e006      	b.n	80009da <WebServerProcess+0x162>
         }
         else
         {
           LOG(("Send Page after POST command\n"));
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <WebServerProcess+0x1a4>)
 80009ce:	f007 fb13 	bl	8007ff8 <puts>
 80009d2:	e002      	b.n	80009da <WebServerProcess+0x162>
       }
     }
  }
  else
  {
    LOG(("Client close connection\n"));
 80009d4:	4812      	ldr	r0, [pc, #72]	; (8000a20 <WebServerProcess+0x1a8>)
 80009d6:	f007 fb0f 	bl	8007ff8 <puts>
  }
  return stopserver;
 80009da:	7bfb      	ldrb	r3, [r7, #15]

 }
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200004ac 	.word	0x200004ac
 80009e8:	080095a0 	.word	0x080095a0
 80009ec:	080095bc 	.word	0x080095bc
 80009f0:	200004a8 	.word	0x200004a8
 80009f4:	080095c0 	.word	0x080095c0
 80009f8:	080095e0 	.word	0x080095e0
 80009fc:	08009600 	.word	0x08009600
 8000a00:	08009608 	.word	0x08009608
 8000a04:	08009618 	.word	0x08009618
 8000a08:	08009620 	.word	0x08009620
 8000a0c:	08009628 	.word	0x08009628
 8000a10:	08009630 	.word	0x08009630
 8000a14:	0800963c 	.word	0x0800963c
 8000a18:	0800964c 	.word	0x0800964c
 8000a1c:	0800965c 	.word	0x0800965c
 8000a20:	0800967c 	.word	0x0800967c

08000a24 <SendWebPage>:

  return ret;
}*/

/********************************************/
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature) {
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	b093      	sub	sp, #76	; 0x4c
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	460a      	mov	r2, r1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	71bb      	strb	r3, [r7, #6]
    uint8_t temp[50];
    uint16_t SentDataLength;
    WIFI_Status_t ret;

    /* construct web page content */
    strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 8000a34:	4aa1      	ldr	r2, [pc, #644]	; (8000cbc <SendWebPage+0x298>)
 8000a36:	4ba2      	ldr	r3, [pc, #648]	; (8000cc0 <SendWebPage+0x29c>)
 8000a38:	4614      	mov	r4, r2
 8000a3a:	461d      	mov	r5, r3
 8000a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a4c:	c407      	stmia	r4!, {r0, r1, r2}
 8000a4e:	8023      	strh	r3, [r4, #0]
 8000a50:	3402      	adds	r4, #2
 8000a52:	0c1b      	lsrs	r3, r3, #16
 8000a54:	7023      	strb	r3, [r4, #0]
    strcat((char *)http, (char *)"<html>\r\n<body style=\"text-align:center\">\r\n");
 8000a56:	4899      	ldr	r0, [pc, #612]	; (8000cbc <SendWebPage+0x298>)
 8000a58:	f7ff fbba 	bl	80001d0 <strlen>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	461a      	mov	r2, r3
 8000a60:	4b96      	ldr	r3, [pc, #600]	; (8000cbc <SendWebPage+0x298>)
 8000a62:	4413      	add	r3, r2
 8000a64:	4a97      	ldr	r2, [pc, #604]	; (8000cc4 <SendWebPage+0x2a0>)
 8000a66:	4614      	mov	r4, r2
 8000a68:	469c      	mov	ip, r3
 8000a6a:	f104 0e20 	add.w	lr, r4, #32
 8000a6e:	4665      	mov	r5, ip
 8000a70:	4626      	mov	r6, r4
 8000a72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000a74:	6028      	str	r0, [r5, #0]
 8000a76:	6069      	str	r1, [r5, #4]
 8000a78:	60aa      	str	r2, [r5, #8]
 8000a7a:	60eb      	str	r3, [r5, #12]
 8000a7c:	3410      	adds	r4, #16
 8000a7e:	f10c 0c10 	add.w	ip, ip, #16
 8000a82:	4574      	cmp	r4, lr
 8000a84:	d1f3      	bne.n	8000a6e <SendWebPage+0x4a>
 8000a86:	4662      	mov	r2, ip
 8000a88:	4623      	mov	r3, r4
 8000a8a:	cb03      	ldmia	r3!, {r0, r1}
 8000a8c:	6010      	str	r0, [r2, #0]
 8000a8e:	6051      	str	r1, [r2, #4]
 8000a90:	8819      	ldrh	r1, [r3, #0]
 8000a92:	789b      	ldrb	r3, [r3, #2]
 8000a94:	8111      	strh	r1, [r2, #8]
 8000a96:	7293      	strb	r3, [r2, #10]
    strcat((char *)http, (char *)"<div style=\"margin:auto; width:50%;\">\r\n");
 8000a98:	4888      	ldr	r0, [pc, #544]	; (8000cbc <SendWebPage+0x298>)
 8000a9a:	f7ff fb99 	bl	80001d0 <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b86      	ldr	r3, [pc, #536]	; (8000cbc <SendWebPage+0x298>)
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a88      	ldr	r2, [pc, #544]	; (8000cc8 <SendWebPage+0x2a4>)
 8000aa8:	4614      	mov	r4, r2
 8000aaa:	469c      	mov	ip, r3
 8000aac:	f104 0e20 	add.w	lr, r4, #32
 8000ab0:	4665      	mov	r5, ip
 8000ab2:	4626      	mov	r6, r4
 8000ab4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ab6:	6028      	str	r0, [r5, #0]
 8000ab8:	6069      	str	r1, [r5, #4]
 8000aba:	60aa      	str	r2, [r5, #8]
 8000abc:	60eb      	str	r3, [r5, #12]
 8000abe:	3410      	adds	r4, #16
 8000ac0:	f10c 0c10 	add.w	ip, ip, #16
 8000ac4:	4574      	cmp	r4, lr
 8000ac6:	d1f3      	bne.n	8000ab0 <SendWebPage+0x8c>
 8000ac8:	4662      	mov	r2, ip
 8000aca:	4623      	mov	r3, r4
 8000acc:	cb03      	ldmia	r3!, {r0, r1}
 8000ace:	6010      	str	r0, [r2, #0]
 8000ad0:	6051      	str	r1, [r2, #4]
    strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 8000ad2:	487a      	ldr	r0, [pc, #488]	; (8000cbc <SendWebPage+0x298>)
 8000ad4:	f7ff fb7c 	bl	80001d0 <strlen>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b77      	ldr	r3, [pc, #476]	; (8000cbc <SendWebPage+0x298>)
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a7a      	ldr	r2, [pc, #488]	; (8000ccc <SendWebPage+0x2a8>)
 8000ae2:	4614      	mov	r4, r2
 8000ae4:	469c      	mov	ip, r3
 8000ae6:	f104 0e20 	add.w	lr, r4, #32
 8000aea:	4665      	mov	r5, ip
 8000aec:	4626      	mov	r6, r4
 8000aee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000af0:	6028      	str	r0, [r5, #0]
 8000af2:	6069      	str	r1, [r5, #4]
 8000af4:	60aa      	str	r2, [r5, #8]
 8000af6:	60eb      	str	r3, [r5, #12]
 8000af8:	3410      	adds	r4, #16
 8000afa:	f10c 0c10 	add.w	ip, ip, #16
 8000afe:	4574      	cmp	r4, lr
 8000b00:	d1f3      	bne.n	8000aea <SendWebPage+0xc6>
 8000b02:	4662      	mov	r2, ip
 8000b04:	4623      	mov	r3, r4
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	8013      	strh	r3, [r2, #0]
    strcat((char *)http, (char *)"<h1 style=\"text-align:center;\">IOT project</h1>\r\n");
 8000b0a:	486c      	ldr	r0, [pc, #432]	; (8000cbc <SendWebPage+0x298>)
 8000b0c:	f7ff fb60 	bl	80001d0 <strlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b69      	ldr	r3, [pc, #420]	; (8000cbc <SendWebPage+0x298>)
 8000b16:	4413      	add	r3, r2
 8000b18:	4a6d      	ldr	r2, [pc, #436]	; (8000cd0 <SendWebPage+0x2ac>)
 8000b1a:	4614      	mov	r4, r2
 8000b1c:	469c      	mov	ip, r3
 8000b1e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000b22:	4665      	mov	r5, ip
 8000b24:	4626      	mov	r6, r4
 8000b26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b28:	6028      	str	r0, [r5, #0]
 8000b2a:	6069      	str	r1, [r5, #4]
 8000b2c:	60aa      	str	r2, [r5, #8]
 8000b2e:	60eb      	str	r3, [r5, #12]
 8000b30:	3410      	adds	r4, #16
 8000b32:	f10c 0c10 	add.w	ip, ip, #16
 8000b36:	4574      	cmp	r4, lr
 8000b38:	d1f3      	bne.n	8000b22 <SendWebPage+0xfe>
 8000b3a:	4662      	mov	r2, ip
 8000b3c:	4623      	mov	r3, r4
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	8013      	strh	r3, [r2, #0]
    strcat((char *)http, (char *)"<h2 style=\"text-align:center;\">created by mohamed amine najjar and mohamed kharret</h2>\r\n");
 8000b42:	485e      	ldr	r0, [pc, #376]	; (8000cbc <SendWebPage+0x298>)
 8000b44:	f7ff fb44 	bl	80001d0 <strlen>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	4b5b      	ldr	r3, [pc, #364]	; (8000cbc <SendWebPage+0x298>)
 8000b4e:	4413      	add	r3, r2
 8000b50:	4a60      	ldr	r2, [pc, #384]	; (8000cd4 <SendWebPage+0x2b0>)
 8000b52:	4618      	mov	r0, r3
 8000b54:	4611      	mov	r1, r2
 8000b56:	235a      	movs	r3, #90	; 0x5a
 8000b58:	461a      	mov	r2, r3
 8000b5a:	f007 fc7d 	bl	8008458 <memcpy>
    strcat((char *)http, (char *)"<br /><hr>\r\n");
 8000b5e:	4857      	ldr	r0, [pc, #348]	; (8000cbc <SendWebPage+0x298>)
 8000b60:	f7ff fb36 	bl	80001d0 <strlen>
 8000b64:	4603      	mov	r3, r0
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b54      	ldr	r3, [pc, #336]	; (8000cbc <SendWebPage+0x298>)
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a5a      	ldr	r2, [pc, #360]	; (8000cd8 <SendWebPage+0x2b4>)
 8000b6e:	461c      	mov	r4, r3
 8000b70:	4613      	mov	r3, r2
 8000b72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b74:	6020      	str	r0, [r4, #0]
 8000b76:	6061      	str	r1, [r4, #4]
 8000b78:	60a2      	str	r2, [r4, #8]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	7323      	strb	r3, [r4, #12]
    strcat((char *)http, (char *)"<div style=\"text-align:center;\">\r\n");
 8000b7e:	484f      	ldr	r0, [pc, #316]	; (8000cbc <SendWebPage+0x298>)
 8000b80:	f7ff fb26 	bl	80001d0 <strlen>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b4c      	ldr	r3, [pc, #304]	; (8000cbc <SendWebPage+0x298>)
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a53      	ldr	r2, [pc, #332]	; (8000cdc <SendWebPage+0x2b8>)
 8000b8e:	4614      	mov	r4, r2
 8000b90:	469c      	mov	ip, r3
 8000b92:	f104 0e20 	add.w	lr, r4, #32
 8000b96:	4665      	mov	r5, ip
 8000b98:	4626      	mov	r6, r4
 8000b9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000b9c:	6028      	str	r0, [r5, #0]
 8000b9e:	6069      	str	r1, [r5, #4]
 8000ba0:	60aa      	str	r2, [r5, #8]
 8000ba2:	60eb      	str	r3, [r5, #12]
 8000ba4:	3410      	adds	r4, #16
 8000ba6:	f10c 0c10 	add.w	ip, ip, #16
 8000baa:	4574      	cmp	r4, lr
 8000bac:	d1f3      	bne.n	8000b96 <SendWebPage+0x172>
 8000bae:	4663      	mov	r3, ip
 8000bb0:	4622      	mov	r2, r4
 8000bb2:	8811      	ldrh	r1, [r2, #0]
 8000bb4:	7892      	ldrb	r2, [r2, #2]
 8000bb6:	8019      	strh	r1, [r3, #0]
 8000bb8:	709a      	strb	r2, [r3, #2]
    strcat((char *)http, (char *)"<form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
 8000bba:	4840      	ldr	r0, [pc, #256]	; (8000cbc <SendWebPage+0x298>)
 8000bbc:	f7ff fb08 	bl	80001d0 <strlen>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b3d      	ldr	r3, [pc, #244]	; (8000cbc <SendWebPage+0x298>)
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a45      	ldr	r2, [pc, #276]	; (8000ce0 <SendWebPage+0x2bc>)
 8000bca:	4614      	mov	r4, r2
 8000bcc:	469c      	mov	ip, r3
 8000bce:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000bd2:	4665      	mov	r5, ip
 8000bd4:	4626      	mov	r6, r4
 8000bd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bd8:	6028      	str	r0, [r5, #0]
 8000bda:	6069      	str	r1, [r5, #4]
 8000bdc:	60aa      	str	r2, [r5, #8]
 8000bde:	60eb      	str	r3, [r5, #12]
 8000be0:	3410      	adds	r4, #16
 8000be2:	f10c 0c10 	add.w	ip, ip, #16
 8000be6:	4574      	cmp	r4, lr
 8000be8:	d1f3      	bne.n	8000bd2 <SendWebPage+0x1ae>
 8000bea:	4665      	mov	r5, ip
 8000bec:	4623      	mov	r3, r4
 8000bee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000bf0:	6028      	str	r0, [r5, #0]
 8000bf2:	6069      	str	r1, [r5, #4]
 8000bf4:	60aa      	str	r2, [r5, #8]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	732b      	strb	r3, [r5, #12]
    sprintf((char *)temp, "%d", temperature);
 8000bfa:	79ba      	ldrb	r2, [r7, #6]
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4938      	ldr	r1, [pc, #224]	; (8000ce4 <SendWebPage+0x2c0>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	f007 fa00 	bl	8008008 <siprintf>
    strcat((char *)http, (char *)temp);
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	482b      	ldr	r0, [pc, #172]	; (8000cbc <SendWebPage+0x298>)
 8000c10:	f007 fb0a 	bl	8008228 <strcat>
    strcat((char *)http, (char *)"\"> <sup>O</sup>C<br><br>");
 8000c14:	4829      	ldr	r0, [pc, #164]	; (8000cbc <SendWebPage+0x298>)
 8000c16:	f7ff fadb 	bl	80001d0 <strlen>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <SendWebPage+0x298>)
 8000c20:	4413      	add	r3, r2
 8000c22:	4a31      	ldr	r2, [pc, #196]	; (8000ce8 <SendWebPage+0x2c4>)
 8000c24:	461d      	mov	r5, r3
 8000c26:	4614      	mov	r4, r2
 8000c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c2a:	6028      	str	r0, [r5, #0]
 8000c2c:	6069      	str	r1, [r5, #4]
 8000c2e:	60aa      	str	r2, [r5, #8]
 8000c30:	60eb      	str	r3, [r5, #12]
 8000c32:	cc03      	ldmia	r4!, {r0, r1}
 8000c34:	6128      	str	r0, [r5, #16]
 8000c36:	6169      	str	r1, [r5, #20]
 8000c38:	7823      	ldrb	r3, [r4, #0]
 8000c3a:	762b      	strb	r3, [r5, #24]

    if (ledIsOn) {
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d058      	beq.n	8000cf4 <SendWebPage+0x2d0>
        strcat((char *)http, (char *)"<input type=\"radio\" name=\"radio\" value=\"0\" >LED off<br>");
 8000c42:	481e      	ldr	r0, [pc, #120]	; (8000cbc <SendWebPage+0x298>)
 8000c44:	f7ff fac4 	bl	80001d0 <strlen>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <SendWebPage+0x298>)
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a26      	ldr	r2, [pc, #152]	; (8000cec <SendWebPage+0x2c8>)
 8000c52:	4614      	mov	r4, r2
 8000c54:	469c      	mov	ip, r3
 8000c56:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c5a:	4665      	mov	r5, ip
 8000c5c:	4626      	mov	r6, r4
 8000c5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c60:	6028      	str	r0, [r5, #0]
 8000c62:	6069      	str	r1, [r5, #4]
 8000c64:	60aa      	str	r2, [r5, #8]
 8000c66:	60eb      	str	r3, [r5, #12]
 8000c68:	3410      	adds	r4, #16
 8000c6a:	f10c 0c10 	add.w	ip, ip, #16
 8000c6e:	4574      	cmp	r4, lr
 8000c70:	d1f3      	bne.n	8000c5a <SendWebPage+0x236>
 8000c72:	4662      	mov	r2, ip
 8000c74:	4623      	mov	r3, r4
 8000c76:	cb03      	ldmia	r3!, {r0, r1}
 8000c78:	6010      	str	r0, [r2, #0]
 8000c7a:	6051      	str	r1, [r2, #4]
        strcat((char *)http, (char *)"<input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
 8000c7c:	480f      	ldr	r0, [pc, #60]	; (8000cbc <SendWebPage+0x298>)
 8000c7e:	f7ff faa7 	bl	80001d0 <strlen>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <SendWebPage+0x298>)
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <SendWebPage+0x2cc>)
 8000c8c:	4614      	mov	r4, r2
 8000c8e:	469c      	mov	ip, r3
 8000c90:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000c94:	4665      	mov	r5, ip
 8000c96:	4626      	mov	r6, r4
 8000c98:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000c9a:	6028      	str	r0, [r5, #0]
 8000c9c:	6069      	str	r1, [r5, #4]
 8000c9e:	60aa      	str	r2, [r5, #8]
 8000ca0:	60eb      	str	r3, [r5, #12]
 8000ca2:	3410      	adds	r4, #16
 8000ca4:	f10c 0c10 	add.w	ip, ip, #16
 8000ca8:	4574      	cmp	r4, lr
 8000caa:	d1f3      	bne.n	8000c94 <SendWebPage+0x270>
 8000cac:	4662      	mov	r2, ip
 8000cae:	4623      	mov	r3, r4
 8000cb0:	cb03      	ldmia	r3!, {r0, r1}
 8000cb2:	6010      	str	r0, [r2, #0]
 8000cb4:	6051      	str	r1, [r2, #4]
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	8113      	strh	r3, [r2, #8]
 8000cba:	e05b      	b.n	8000d74 <SendWebPage+0x350>
 8000cbc:	200000a4 	.word	0x200000a4
 8000cc0:	08009694 	.word	0x08009694
 8000cc4:	080096d4 	.word	0x080096d4
 8000cc8:	08009700 	.word	0x08009700
 8000ccc:	08009728 	.word	0x08009728
 8000cd0:	0800974c 	.word	0x0800974c
 8000cd4:	08009780 	.word	0x08009780
 8000cd8:	080097dc 	.word	0x080097dc
 8000cdc:	080097ec 	.word	0x080097ec
 8000ce0:	08009810 	.word	0x08009810
 8000ce4:	08009850 	.word	0x08009850
 8000ce8:	08009854 	.word	0x08009854
 8000cec:	08009870 	.word	0x08009870
 8000cf0:	080098a8 	.word	0x080098a8
    } else {
        strcat((char *)http, (char *)"<input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off<br>");
 8000cf4:	484b      	ldr	r0, [pc, #300]	; (8000e24 <SendWebPage+0x400>)
 8000cf6:	f7ff fa6b 	bl	80001d0 <strlen>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b49      	ldr	r3, [pc, #292]	; (8000e24 <SendWebPage+0x400>)
 8000d00:	4413      	add	r3, r2
 8000d02:	4a49      	ldr	r2, [pc, #292]	; (8000e28 <SendWebPage+0x404>)
 8000d04:	4615      	mov	r5, r2
 8000d06:	469c      	mov	ip, r3
 8000d08:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8000d0c:	4664      	mov	r4, ip
 8000d0e:	462e      	mov	r6, r5
 8000d10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d12:	6020      	str	r0, [r4, #0]
 8000d14:	6061      	str	r1, [r4, #4]
 8000d16:	60a2      	str	r2, [r4, #8]
 8000d18:	60e3      	str	r3, [r4, #12]
 8000d1a:	3510      	adds	r5, #16
 8000d1c:	f10c 0c10 	add.w	ip, ip, #16
 8000d20:	4575      	cmp	r5, lr
 8000d22:	d1f3      	bne.n	8000d0c <SendWebPage+0x2e8>
 8000d24:	4664      	mov	r4, ip
 8000d26:	462b      	mov	r3, r5
 8000d28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d2a:	6020      	str	r0, [r4, #0]
 8000d2c:	6061      	str	r1, [r4, #4]
 8000d2e:	60a2      	str	r2, [r4, #8]
 8000d30:	881a      	ldrh	r2, [r3, #0]
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	81a2      	strh	r2, [r4, #12]
 8000d36:	73a3      	strb	r3, [r4, #14]
        strcat((char *)http, (char *)"<input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 8000d38:	483a      	ldr	r0, [pc, #232]	; (8000e24 <SendWebPage+0x400>)
 8000d3a:	f7ff fa49 	bl	80001d0 <strlen>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <SendWebPage+0x400>)
 8000d44:	4413      	add	r3, r2
 8000d46:	4a39      	ldr	r2, [pc, #228]	; (8000e2c <SendWebPage+0x408>)
 8000d48:	4614      	mov	r4, r2
 8000d4a:	469c      	mov	ip, r3
 8000d4c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000d50:	4665      	mov	r5, ip
 8000d52:	4626      	mov	r6, r4
 8000d54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d56:	6028      	str	r0, [r5, #0]
 8000d58:	6069      	str	r1, [r5, #4]
 8000d5a:	60aa      	str	r2, [r5, #8]
 8000d5c:	60eb      	str	r3, [r5, #12]
 8000d5e:	3410      	adds	r4, #16
 8000d60:	f10c 0c10 	add.w	ip, ip, #16
 8000d64:	4574      	cmp	r4, lr
 8000d66:	d1f3      	bne.n	8000d50 <SendWebPage+0x32c>
 8000d68:	4663      	mov	r3, ip
 8000d6a:	4622      	mov	r2, r4
 8000d6c:	8811      	ldrh	r1, [r2, #0]
 8000d6e:	7892      	ldrb	r2, [r2, #2]
 8000d70:	8019      	strh	r1, [r3, #0]
 8000d72:	709a      	strb	r2, [r3, #2]
    }

    strcat((char *)http, (char *)"</strong><br><br><input type=\"submit\" value=\"submit\"></form></div>\r\n");
 8000d74:	482b      	ldr	r0, [pc, #172]	; (8000e24 <SendWebPage+0x400>)
 8000d76:	f7ff fa2b 	bl	80001d0 <strlen>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <SendWebPage+0x400>)
 8000d80:	4413      	add	r3, r2
 8000d82:	4a2b      	ldr	r2, [pc, #172]	; (8000e30 <SendWebPage+0x40c>)
 8000d84:	4618      	mov	r0, r3
 8000d86:	4611      	mov	r1, r2
 8000d88:	2345      	movs	r3, #69	; 0x45
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f007 fb64 	bl	8008458 <memcpy>
    strcat((char *)http, (char *)"</div>\r\n");
 8000d90:	4824      	ldr	r0, [pc, #144]	; (8000e24 <SendWebPage+0x400>)
 8000d92:	f7ff fa1d 	bl	80001d0 <strlen>
 8000d96:	4603      	mov	r3, r0
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <SendWebPage+0x400>)
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4925      	ldr	r1, [pc, #148]	; (8000e34 <SendWebPage+0x410>)
 8000da0:	461a      	mov	r2, r3
 8000da2:	460b      	mov	r3, r1
 8000da4:	cb03      	ldmia	r3!, {r0, r1}
 8000da6:	6010      	str	r0, [r2, #0]
 8000da8:	6051      	str	r1, [r2, #4]
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	7213      	strb	r3, [r2, #8]
    strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8000dae:	481d      	ldr	r0, [pc, #116]	; (8000e24 <SendWebPage+0x400>)
 8000db0:	f7ff fa0e 	bl	80001d0 <strlen>
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <SendWebPage+0x400>)
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a1e      	ldr	r2, [pc, #120]	; (8000e38 <SendWebPage+0x414>)
 8000dbe:	461d      	mov	r5, r3
 8000dc0:	4614      	mov	r4, r2
 8000dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc4:	6028      	str	r0, [r5, #0]
 8000dc6:	6069      	str	r1, [r5, #4]
 8000dc8:	60aa      	str	r2, [r5, #8]
 8000dca:	60eb      	str	r3, [r5, #12]
 8000dcc:	8823      	ldrh	r3, [r4, #0]
 8000dce:	78a2      	ldrb	r2, [r4, #2]
 8000dd0:	822b      	strh	r3, [r5, #16]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	74ab      	strb	r3, [r5, #18]

    ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 8000dd6:	4813      	ldr	r0, [pc, #76]	; (8000e24 <SendWebPage+0x400>)
 8000dd8:	f7ff f9fa 	bl	80001d0 <strlen>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	f107 030a 	add.w	r3, r7, #10
 8000de4:	f242 7110 	movw	r1, #10000	; 0x2710
 8000de8:	9100      	str	r1, [sp, #0]
 8000dea:	490e      	ldr	r1, [pc, #56]	; (8000e24 <SendWebPage+0x400>)
 8000dec:	2000      	movs	r0, #0
 8000dee:	f001 ffd1 	bl	8002d94 <WIFI_SendData>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    if ((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http))) {
 8000df8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10a      	bne.n	8000e16 <SendWebPage+0x3f2>
 8000e00:	897b      	ldrh	r3, [r7, #10]
 8000e02:	461c      	mov	r4, r3
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <SendWebPage+0x400>)
 8000e06:	f7ff f9e3 	bl	80001d0 <strlen>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	d002      	beq.n	8000e16 <SendWebPage+0x3f2>
        ret = WIFI_STATUS_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    return ret;
 8000e16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3744      	adds	r7, #68	; 0x44
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000a4 	.word	0x200000a4
 8000e28:	080098e4 	.word	0x080098e4
 8000e2c:	08009924 	.word	0x08009924
 8000e30:	08009958 	.word	0x08009958
 8000e34:	080099a0 	.word	0x080099a0
 8000e38:	080099ac 	.word	0x080099ac

08000e3c <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b096      	sub	sp, #88	; 0x58
 8000e40:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e42:	2310      	movs	r3, #16
 8000e44:	603b      	str	r3, [r7, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e46:	2301      	movs	r3, #1
 8000e48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e4a:	2360      	movs	r3, #96	; 0x60
 8000e4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e52:	2302      	movs	r3, #2
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e56:	2301      	movs	r3, #1
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000e5e:	2328      	movs	r3, #40	; 0x28
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 7;
 8000e66:	2307      	movs	r3, #7
 8000e68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6e:	463b      	mov	r3, r7
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 fd01 	bl	8004878 <HAL_RCC_OscConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d000      	beq.n	8000e7e <SystemClock_Config+0x42>
  {
    /* Initialization Error */
    while(1);
 8000e7c:	e7fe      	b.n	8000e7c <SystemClock_Config+0x40>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000e7e:	230f      	movs	r3, #15
 8000e80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e82:	2303      	movs	r3, #3
 8000e84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	657b      	str	r3, [r7, #84]	; 0x54
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e92:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e96:	2104      	movs	r1, #4
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 f8c9 	bl	8005030 <HAL_RCC_ClockConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d000      	beq.n	8000ea6 <SystemClock_Config+0x6a>
  {
    /* Initialization Error */
    while(1);
 8000ea4:	e7fe      	b.n	8000ea4 <SystemClock_Config+0x68>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	3758      	adds	r7, #88	; 0x58
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8000eb8:	1d39      	adds	r1, r7, #4
 8000eba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4803      	ldr	r0, [pc, #12]	; (8000ed0 <__io_putchar+0x20>)
 8000ec2:	f006 fa2a 	bl	800731a <HAL_UART_Transmit>

  return ch;
 8000ec6:	687b      	ldr	r3, [r7, #4]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	2000127c 	.word	0x2000127c

08000ed4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d102      	bne.n	8000eea <HAL_GPIO_EXTI_Callback+0x16>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8000ee4:	f001 fe0a 	bl	8002afc <SPI_WIFI_ISR>
      break;
 8000ee8:	e000      	b.n	8000eec <HAL_GPIO_EXTI_Callback+0x18>
    }
    default:
    {
      break;
 8000eea:	bf00      	nop
    }
  }
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <SPI3_IRQHandler+0x10>)
 8000efa:	f005 fb3f 	bl	800657c <HAL_SPI_IRQHandler>
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200008b4 	.word	0x200008b4

08000f08 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <MemManage_Handler+0x4>

08000f22 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f2e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000f5c:	f002 fae6 	bl	800352c <HAL_IncTick>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <EXTI1_IRQHandler>:
  * @brief  This function handles external lines 1interrupt request.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f002 fe4f 	bl	8003c0c <HAL_GPIO_EXTI_IRQHandler>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  return 1;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <_kill>:

int _kill(int pid, int sig)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f8c:	f007 fa38 	bl	8008400 <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2216      	movs	r2, #22
 8000f94:	601a      	str	r2, [r3, #0]
  return -1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_exit>:

void _exit (int status)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000faa:	f04f 31ff 	mov.w	r1, #4294967295
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffe7 	bl	8000f82 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fb4:	e7fe      	b.n	8000fb4 <_exit+0x12>

08000fb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	e00a      	b.n	8000fde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fc8:	f3af 8000 	nop.w
 8000fcc:	4601      	mov	r1, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	60ba      	str	r2, [r7, #8]
 8000fd4:	b2ca      	uxtb	r2, r1
 8000fd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	dbf0      	blt.n	8000fc8 <_read+0x12>
  }

  return len;
 8000fe6:	687b      	ldr	r3, [r7, #4]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e009      	b.n	8001016 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	60ba      	str	r2, [r7, #8]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff50 	bl	8000eb0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3301      	adds	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	429a      	cmp	r2, r3
 800101c:	dbf1      	blt.n	8001002 <_write+0x12>
  }
  return len;
 800101e:	687b      	ldr	r3, [r7, #4]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <_close>:

int _close(int file)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001050:	605a      	str	r2, [r3, #4]
  return 0;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_isatty>:

int _isatty(int file)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f007 f99e 	bl	8008400 <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20018000 	.word	0x20018000
 80010f0:	00006800 	.word	0x00006800
 80010f4:	200008ac 	.word	0x200008ac
 80010f8:	20001458 	.word	0x20001458

080010fc <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b2f      	cmp	r3, #47	; 0x2f
 800110a:	d906      	bls.n	800111a <Hex2Num+0x1e>
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b39      	cmp	r3, #57	; 0x39
 8001110:	d803      	bhi.n	800111a <Hex2Num+0x1e>
        return a - '0';
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	3b30      	subs	r3, #48	; 0x30
 8001116:	b2db      	uxtb	r3, r3
 8001118:	e014      	b.n	8001144 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b60      	cmp	r3, #96	; 0x60
 800111e:	d906      	bls.n	800112e <Hex2Num+0x32>
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b66      	cmp	r3, #102	; 0x66
 8001124:	d803      	bhi.n	800112e <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	3b57      	subs	r3, #87	; 0x57
 800112a:	b2db      	uxtb	r3, r3
 800112c:	e00a      	b.n	8001144 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b40      	cmp	r3, #64	; 0x40
 8001132:	d906      	bls.n	8001142 <Hex2Num+0x46>
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b46      	cmp	r3, #70	; 0x46
 8001138:	d803      	bhi.n	8001142 <Hex2Num+0x46>
        return (a - 'A') + 10;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	3b37      	subs	r3, #55	; 0x37
 800113e:	b2db      	uxtb	r3, r3
 8001140:	e000      	b.n	8001144 <Hex2Num+0x48>
    }

    return 0;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001162:	e012      	b.n	800118a <ParseHexNumber+0x3a>
        sum <<= 4;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffc4 	bl	80010fc <Hex2Num>
 8001174:	4603      	mov	r3, r0
 8001176:	461a      	mov	r2, r3
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	4413      	add	r3, r2
 800117c:	73fb      	strb	r3, [r7, #15]
        ptr++;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3301      	adds	r3, #1
 8001182:	607b      	str	r3, [r7, #4]
        done_count++;
 8001184:	7bbb      	ldrb	r3, [r7, #14]
 8001186:	3301      	adds	r3, #1
 8001188:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b2f      	cmp	r3, #47	; 0x2f
 8001190:	d903      	bls.n	800119a <ParseHexNumber+0x4a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b39      	cmp	r3, #57	; 0x39
 8001198:	d90f      	bls.n	80011ba <ParseHexNumber+0x6a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b60      	cmp	r3, #96	; 0x60
 80011a0:	d903      	bls.n	80011aa <ParseHexNumber+0x5a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b66      	cmp	r3, #102	; 0x66
 80011a8:	d907      	bls.n	80011ba <ParseHexNumber+0x6a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b40      	cmp	r3, #64	; 0x40
 80011b0:	d906      	bls.n	80011c0 <ParseHexNumber+0x70>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b46      	cmp	r3, #70	; 0x46
 80011b8:	d802      	bhi.n	80011c0 <ParseHexNumber+0x70>
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d9d1      	bls.n	8001164 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <ParseHexNumber+0x7c>
        *cnt = done_count;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	7bba      	ldrb	r2, [r7, #14]
 80011ca:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b085      	sub	sp, #20
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
 80011de:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b2d      	cmp	r3, #45	; 0x2d
 80011f2:	d119      	bne.n	8001228 <ParseNumber+0x52>
        minus = 1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
        ptr++;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3301      	adds	r3, #1
 80011fc:	607b      	str	r3, [r7, #4]
        done_count++;
 80011fe:	7bbb      	ldrb	r3, [r7, #14]
 8001200:	3301      	adds	r3, #1
 8001202:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001204:	e010      	b.n	8001228 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	461a      	mov	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	3b30      	subs	r3, #48	; 0x30
 8001218:	4413      	add	r3, r2
 800121a:	60bb      	str	r3, [r7, #8]
        ptr++;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3301      	adds	r3, #1
 8001220:	607b      	str	r3, [r7, #4]
        done_count++;
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	3301      	adds	r3, #1
 8001226:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b2f      	cmp	r3, #47	; 0x2f
 800122e:	d903      	bls.n	8001238 <ParseNumber+0x62>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b39      	cmp	r3, #57	; 0x39
 8001236:	d9e6      	bls.n	8001206 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <ParseNumber+0x6e>
        *cnt = done_count;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	7bba      	ldrb	r2, [r7, #14]
 8001242:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <ParseNumber+0x7a>
        return 0 - sum;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	425b      	negs	r3, r3
 800124e:	e000      	b.n	8001252 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8001250:	68bb      	ldr	r3, [r7, #8]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 800125e:	b590      	push	{r4, r7, lr}
 8001260:	b087      	sub	sp, #28
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d027      	beq.n	80012c4 <ParseMAC+0x66>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d024      	beq.n	80012c4 <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 800127a:	e018      	b.n	80012ae <ParseMAC+0x50>
    uint8_t done_count = 1;
 800127c:	2301      	movs	r3, #1
 800127e:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b3a      	cmp	r3, #58	; 0x3a
 8001286:	d00d      	beq.n	80012a4 <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	75fa      	strb	r2, [r7, #23]
 800128e:	461a      	mov	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	189c      	adds	r4, r3, r2
 8001294:	f107 0316 	add.w	r3, r7, #22
 8001298:	4619      	mov	r1, r3
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f7ff ff58 	bl	8001150 <ParseHexNumber>
 80012a0:	4603      	mov	r3, r0
 80012a2:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 80012a4:	7dbb      	ldrb	r3, [r7, #22]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d906      	bls.n	80012c4 <ParseMAC+0x66>
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d803      	bhi.n	80012c4 <ParseMAC+0x66>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1db      	bne.n	800127c <ParseMAC+0x1e>
   }
  }
}
 80012c4:	bf00      	nop
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}

080012cc <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d027      	beq.n	8001332 <ParseIP+0x66>
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d024      	beq.n	8001332 <ParseIP+0x66>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d921      	bls.n	8001332 <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 80012ee:	e019      	b.n	8001324 <ParseIP+0x58>
    uint8_t done_count = 1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b2e      	cmp	r3, #46	; 0x2e
 80012fa:	d00e      	beq.n	800131a <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 80012fc:	f107 0316 	add.w	r3, r7, #22
 8001300:	4619      	mov	r1, r3
 8001302:	68f8      	ldr	r0, [r7, #12]
 8001304:	f7ff ff67 	bl	80011d6 <ParseNumber>
 8001308:	4601      	mov	r1, r0
 800130a:	7dfb      	ldrb	r3, [r7, #23]
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	75fa      	strb	r2, [r7, #23]
 8001310:	461a      	mov	r2, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	4413      	add	r3, r2
 8001316:	b2ca      	uxtb	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 800131a:	7dbb      	ldrb	r3, [r7, #22]
 800131c:	461a      	mov	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d803      	bhi.n	8001332 <ParseIP+0x66>
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1de      	bne.n	80012f0 <ParseIP+0x24>
   }
  }
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3302      	adds	r3, #2
 800134e:	4940      	ldr	r1, [pc, #256]	; (8001450 <AT_ParseInfo+0x114>)
 8001350:	4618      	mov	r0, r3
 8001352:	f006 ff9d 	bl	8008290 <strtok>
 8001356:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001358:	e071      	b.n	800143e <AT_ParseInfo+0x102>
    switch (num++) {
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	72fa      	strb	r2, [r7, #11]
 8001360:	2b06      	cmp	r3, #6
 8001362:	d866      	bhi.n	8001432 <AT_ParseInfo+0xf6>
 8001364:	a201      	add	r2, pc, #4	; (adr r2, 800136c <AT_ParseInfo+0x30>)
 8001366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800136a:	bf00      	nop
 800136c:	08001389 	.word	0x08001389
 8001370:	0800139d 	.word	0x0800139d
 8001374:	080013b5 	.word	0x080013b5
 8001378:	080013cd 	.word	0x080013cd
 800137c:	080013e5 	.word	0x080013e5
 8001380:	080013fd 	.word	0x080013fd
 8001384:	08001411 	.word	0x08001411
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	221f      	movs	r2, #31
 800138c:	68f9      	ldr	r1, [r7, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f006 ff6b 	bl	800826a <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	77da      	strb	r2, [r3, #31]
      break;
 800139a:	e04b      	b.n	8001434 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3320      	adds	r3, #32
 80013a0:	2217      	movs	r2, #23
 80013a2:	68f9      	ldr	r1, [r7, #12]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f006 ff60 	bl	800826a <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 80013b2:	e03f      	b.n	8001434 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3338      	adds	r3, #56	; 0x38
 80013b8:	220f      	movs	r2, #15
 80013ba:	68f9      	ldr	r1, [r7, #12]
 80013bc:	4618      	mov	r0, r3
 80013be:	f006 ff54 	bl	800826a <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80013ca:	e033      	b.n	8001434 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3348      	adds	r3, #72	; 0x48
 80013d0:	220f      	movs	r2, #15
 80013d2:	68f9      	ldr	r1, [r7, #12]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f006 ff48 	bl	800826a <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 80013e2:	e027      	b.n	8001434 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3358      	adds	r3, #88	; 0x58
 80013e8:	220f      	movs	r2, #15
 80013ea:	68f9      	ldr	r1, [r7, #12]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f006 ff3c 	bl	800826a <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 80013fa:	e01b      	b.n	8001434 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 80013fc:	2100      	movs	r1, #0
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f7ff fee9 	bl	80011d6 <ParseNumber>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 800140e:	e011      	b.n	8001434 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8001410:	4910      	ldr	r1, [pc, #64]	; (8001454 <AT_ParseInfo+0x118>)
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f006 ff3c 	bl	8008290 <strtok>
 8001418:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3368      	adds	r3, #104	; 0x68
 800141e:	221f      	movs	r2, #31
 8001420:	68f9      	ldr	r1, [r7, #12]
 8001422:	4618      	mov	r0, r3
 8001424:	f006 ff21 	bl	800826a <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 8001430:	e000      	b.n	8001434 <AT_ParseInfo+0xf8>

    default: break;
 8001432:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8001434:	4906      	ldr	r1, [pc, #24]	; (8001450 <AT_ParseInfo+0x114>)
 8001436:	2000      	movs	r0, #0
 8001438:	f006 ff2a 	bl	8008290 <strtok>
 800143c:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d18a      	bne.n	800135a <AT_ParseInfo+0x1e>
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	080099f0 	.word	0x080099f0
 8001454:	080099f4 	.word	0x080099f4

08001458 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3302      	adds	r3, #2
 800146a:	4959      	ldr	r1, [pc, #356]	; (80015d0 <AT_ParseConnSettings+0x178>)
 800146c:	4618      	mov	r0, r3
 800146e:	f006 ff0f 	bl	8008290 <strtok>
 8001472:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8001474:	e0a2      	b.n	80015bc <AT_ParseConnSettings+0x164>
    switch (num++) {
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	73fa      	strb	r2, [r7, #15]
 800147c:	2b0b      	cmp	r3, #11
 800147e:	f200 808c 	bhi.w	800159a <AT_ParseConnSettings+0x142>
 8001482:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <AT_ParseConnSettings+0x30>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	080014b9 	.word	0x080014b9
 800148c:	080014cf 	.word	0x080014cf
 8001490:	080014e7 	.word	0x080014e7
 8001494:	080014fb 	.word	0x080014fb
 8001498:	0800150f 	.word	0x0800150f
 800149c:	08001523 	.word	0x08001523
 80014a0:	08001533 	.word	0x08001533
 80014a4:	08001543 	.word	0x08001543
 80014a8:	08001553 	.word	0x08001553
 80014ac:	08001563 	.word	0x08001563
 80014b0:	08001573 	.word	0x08001573
 80014b4:	08001587 	.word	0x08001587
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2220      	movs	r2, #32
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	4618      	mov	r0, r3
 80014c0:	f006 fed3 	bl	800826a <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80014cc:	e066      	b.n	800159c <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	3321      	adds	r3, #33	; 0x21
 80014d2:	2220      	movs	r2, #32
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f006 fec7 	bl	800826a <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 80014e4:	e05a      	b.n	800159c <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80014e6:	2100      	movs	r1, #0
 80014e8:	68b8      	ldr	r0, [r7, #8]
 80014ea:	f7ff fe74 	bl	80011d6 <ParseNumber>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80014f8:	e050      	b.n	800159c <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 80014fa:	2100      	movs	r1, #0
 80014fc:	68b8      	ldr	r0, [r7, #8]
 80014fe:	f7ff fe6a 	bl	80011d6 <ParseNumber>
 8001502:	4603      	mov	r3, r0
 8001504:	b2da      	uxtb	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 800150c:	e046      	b.n	800159c <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 800150e:	2100      	movs	r1, #0
 8001510:	68b8      	ldr	r0, [r7, #8]
 8001512:	f7ff fe60 	bl	80011d6 <ParseNumber>
 8001516:	4603      	mov	r3, r0
 8001518:	b2da      	uxtb	r2, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001520:	e03c      	b.n	800159c <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3348      	adds	r3, #72	; 0x48
 8001526:	2204      	movs	r2, #4
 8001528:	4619      	mov	r1, r3
 800152a:	68b8      	ldr	r0, [r7, #8]
 800152c:	f7ff fece 	bl	80012cc <ParseIP>
      break;
 8001530:	e034      	b.n	800159c <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	334c      	adds	r3, #76	; 0x4c
 8001536:	2204      	movs	r2, #4
 8001538:	4619      	mov	r1, r3
 800153a:	68b8      	ldr	r0, [r7, #8]
 800153c:	f7ff fec6 	bl	80012cc <ParseIP>
      break;
 8001540:	e02c      	b.n	800159c <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	3350      	adds	r3, #80	; 0x50
 8001546:	2204      	movs	r2, #4
 8001548:	4619      	mov	r1, r3
 800154a:	68b8      	ldr	r0, [r7, #8]
 800154c:	f7ff febe 	bl	80012cc <ParseIP>
      break;
 8001550:	e024      	b.n	800159c <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	3354      	adds	r3, #84	; 0x54
 8001556:	2204      	movs	r2, #4
 8001558:	4619      	mov	r1, r3
 800155a:	68b8      	ldr	r0, [r7, #8]
 800155c:	f7ff feb6 	bl	80012cc <ParseIP>
      break;
 8001560:	e01c      	b.n	800159c <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	3358      	adds	r3, #88	; 0x58
 8001566:	2204      	movs	r2, #4
 8001568:	4619      	mov	r1, r3
 800156a:	68b8      	ldr	r0, [r7, #8]
 800156c:	f7ff feae 	bl	80012cc <ParseIP>
      break;
 8001570:	e014      	b.n	800159c <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 8001572:	2100      	movs	r1, #0
 8001574:	68b8      	ldr	r0, [r7, #8]
 8001576:	f7ff fe2e 	bl	80011d6 <ParseNumber>
 800157a:	4603      	mov	r3, r0
 800157c:	b2da      	uxtb	r2, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8001584:	e00a      	b.n	800159c <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8001586:	2100      	movs	r1, #0
 8001588:	68b8      	ldr	r0, [r7, #8]
 800158a:	f7ff fe24 	bl	80011d6 <ParseNumber>
 800158e:	4603      	mov	r3, r0
 8001590:	b2da      	uxtb	r2, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8001598:	e000      	b.n	800159c <AT_ParseConnSettings+0x144>

    default:
      break;
 800159a:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <AT_ParseConnSettings+0x178>)
 800159e:	2000      	movs	r0, #0
 80015a0:	f006 fe76 	bl	8008290 <strtok>
 80015a4:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d007      	beq.n	80015bc <AT_ParseConnSettings+0x164>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b2c      	cmp	r3, #44	; 0x2c
 80015b4:	d102      	bne.n	80015bc <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	3301      	adds	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f47f af59 	bne.w	8001476 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	080099f0 	.word	0x080099f0

080015d4 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d056      	beq.n	80016a0 <AT_ExecuteCommand+0xcc>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d051      	beq.n	80016a0 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001602:	68b8      	ldr	r0, [r7, #8]
 8001604:	f7fe fde4 	bl	80001d0 <strlen>
 8001608:	4603      	mov	r3, r0
 800160a:	b299      	uxth	r1, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001612:	461a      	mov	r2, r3
 8001614:	68b8      	ldr	r0, [r7, #8]
 8001616:	47a0      	blx	r4
 8001618:	4603      	mov	r3, r0
 800161a:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	dd3e      	ble.n	80016a0 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800162e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	4798      	blx	r3
 8001636:	4603      	mov	r3, r0
 8001638:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800163a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800163e:	2b00      	cmp	r3, #0
 8001640:	dd27      	ble.n	8001692 <AT_ExecuteCommand+0xbe>
 8001642:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001646:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800164a:	dc22      	bgt.n	8001692 <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 800164c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001650:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001654:	d105      	bne.n	8001662 <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8001656:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800165a:	b29b      	uxth	r3, r3
 800165c:	3b01      	subs	r3, #1
 800165e:	b29b      	uxth	r3, r3
 8001660:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001662:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, AT_OK_STRING))
 800166e:	490f      	ldr	r1, [pc, #60]	; (80016ac <AT_ExecuteCommand+0xd8>)
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f006 fe69 	bl	8008348 <strstr>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	e010      	b.n	80016a2 <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, AT_ERROR_STRING))
 8001680:	490b      	ldr	r1, [pc, #44]	; (80016b0 <AT_ExecuteCommand+0xdc>)
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f006 fe60 	bl	8008348 <strstr>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800168e:	2305      	movs	r3, #5
 8001690:	e007      	b.n	80016a2 <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8001692:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001696:	f113 0f04 	cmn.w	r3, #4
 800169a:	d101      	bne.n	80016a0 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800169c:	2306      	movs	r3, #6
 800169e:	e000      	b.n	80016a2 <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80016a0:	2304      	movs	r3, #4
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd90      	pop	{r4, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	08009a08 	.word	0x08009a08
 80016b0:	08009a14 	.word	0x08009a14

080016b4 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 80016ce:	68b8      	ldr	r0, [r7, #8]
 80016d0:	f7fe fd7e 	bl	80001d0 <strlen>
 80016d4:	4603      	mov	r3, r0
 80016d6:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 80016d8:	8a7b      	ldrh	r3, [r7, #18]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <AT_RequestSendData+0x32>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e05d      	b.n	80017a2 <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d057      	beq.n	80017a0 <AT_RequestSendData+0xec>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d052      	beq.n	80017a0 <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001706:	8a79      	ldrh	r1, [r7, #18]
 8001708:	68b8      	ldr	r0, [r7, #8]
 800170a:	4798      	blx	r3
 800170c:	4603      	mov	r3, r0
 800170e:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 8001710:	8a3a      	ldrh	r2, [r7, #16]
 8001712:	8a7b      	ldrh	r3, [r7, #18]
 8001714:	429a      	cmp	r2, r3
 8001716:	d143      	bne.n	80017a0 <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001724:	8879      	ldrh	r1, [r7, #2]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
 800172a:	4603      	mov	r3, r0
 800172c:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 800172e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001732:	887b      	ldrh	r3, [r7, #2]
 8001734:	429a      	cmp	r2, r3
 8001736:	d131      	bne.n	800179c <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001744:	2100      	movs	r1, #0
 8001746:	6a38      	ldr	r0, [r7, #32]
 8001748:	4798      	blx	r3
 800174a:	4603      	mov	r3, r0
 800174c:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 800174e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001752:	2b00      	cmp	r3, #0
 8001754:	dd19      	ble.n	800178a <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 8001756:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800175a:	6a3a      	ldr	r2, [r7, #32]
 800175c:	4413      	add	r3, r2
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8001762:	4912      	ldr	r1, [pc, #72]	; (80017ac <AT_RequestSendData+0xf8>)
 8001764:	6a38      	ldr	r0, [r7, #32]
 8001766:	f006 fdef 	bl	8008348 <strstr>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	e016      	b.n	80017a2 <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8001774:	490e      	ldr	r1, [pc, #56]	; (80017b0 <AT_RequestSendData+0xfc>)
 8001776:	6a38      	ldr	r0, [r7, #32]
 8001778:	f006 fde6 	bl	8008348 <strstr>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8001782:	2305      	movs	r3, #5
 8001784:	e00d      	b.n	80017a2 <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8001786:	2302      	movs	r3, #2
 8001788:	e00b      	b.n	80017a2 <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 800178a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800178e:	f113 0f04 	cmn.w	r3, #4
 8001792:	d101      	bne.n	8001798 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8001794:	2306      	movs	r3, #6
 8001796:	e004      	b.n	80017a2 <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8001798:	2302      	movs	r3, #2
 800179a:	e002      	b.n	80017a2 <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 800179c:	2302      	movs	r3, #2
 800179e:	e000      	b.n	80017a2 <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 80017a0:	2304      	movs	r3, #4
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	08009a08 	.word	0x08009a08
 80017b0:	08009a14 	.word	0x08009a14

080017b4 <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017c8:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 8087 	beq.w	80018e4 <AT_RequestReceiveData+0x130>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8081 	beq.w	80018e4 <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80017e8:	68b8      	ldr	r0, [r7, #8]
 80017ea:	f7fe fcf1 	bl	80001d0 <strlen>
 80017ee:	4603      	mov	r3, r0
 80017f0:	b299      	uxth	r1, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80017f8:	461a      	mov	r2, r3
 80017fa:	68b8      	ldr	r0, [r7, #8]
 80017fc:	47a0      	blx	r4
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	dd6f      	ble.n	80018e4 <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8001810:	2100      	movs	r1, #0
 8001812:	6938      	ldr	r0, [r7, #16]
 8001814:	4798      	blx	r3
 8001816:	4603      	mov	r3, r0
 8001818:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b0d      	cmp	r3, #13
 8001820:	d104      	bne.n	800182c <AT_RequestReceiveData+0x78>
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	3301      	adds	r3, #1
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b0a      	cmp	r3, #10
 800182a:	d001      	beq.n	8001830 <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 800182c:	2304      	movs	r3, #4
 800182e:	e05a      	b.n	80018e6 <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3b02      	subs	r3, #2
 8001834:	617b      	str	r3, [r7, #20]
    p += 2;
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	3302      	adds	r3, #2
 800183a:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2b07      	cmp	r3, #7
 8001840:	d94a      	bls.n	80018d8 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 8001842:	e002      	b.n	800184a <AT_RequestReceiveData+0x96>
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3b01      	subs	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d006      	beq.n	800185e <AT_RequestReceiveData+0xaa>
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3b01      	subs	r3, #1
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b15      	cmp	r3, #21
 800185c:	d0f2      	beq.n	8001844 <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4413      	add	r3, r2
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3b08      	subs	r3, #8
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4413      	add	r3, r2
 8001870:	491f      	ldr	r1, [pc, #124]	; (80018f0 <AT_RequestReceiveData+0x13c>)
 8001872:	4618      	mov	r0, r3
 8001874:	f006 fd68 	bl	8008348 <strstr>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d016      	beq.n	80018ac <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	b29b      	uxth	r3, r3
 8001882:	3b08      	subs	r3, #8
 8001884:	b29a      	uxth	r2, r3
 8001886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001888:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 800188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188c:	881b      	ldrh	r3, [r3, #0]
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	429a      	cmp	r2, r3
 8001892:	d202      	bcs.n	800189a <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 8001894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 800189a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	6939      	ldr	r1, [r7, #16]
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f006 fdd8 	bl	8008458 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	e01c      	b.n	80018e6 <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	3b04      	subs	r3, #4
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4413      	add	r3, r2
 80018b4:	2204      	movs	r2, #4
 80018b6:	490f      	ldr	r1, [pc, #60]	; (80018f4 <AT_RequestReceiveData+0x140>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f006 fc9d 	bl	80081f8 <memcmp>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d104      	bne.n	80018ce <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 80018c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c6:	2200      	movs	r2, #0
 80018c8:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80018ca:	2305      	movs	r3, #5
 80018cc:	e00b      	b.n	80018e6 <AT_RequestReceiveData+0x132>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	2200      	movs	r2, #0
 80018d2:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80018d4:	2305      	movs	r3, #5
 80018d6:	e006      	b.n	80018e6 <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f113 0f04 	cmn.w	r3, #4
 80018de:	d101      	bne.n	80018e4 <AT_RequestReceiveData+0x130>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 80018e0:	2306      	movs	r3, #6
 80018e2:	e000      	b.n	80018e6 <AT_RequestReceiveData+0x132>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80018e4:	2304      	movs	r3, #4
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd90      	pop	{r4, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	08009a08 	.word	0x08009a08
 80018f4:	08009a1c 	.word	0x08009a1c

080018f8 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001900:	2302      	movs	r3, #2
 8001902:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f247 5230 	movw	r2, #30000	; 0x7530
 800190a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL) {
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01b      	beq.n	8001950 <ES_WIFI_Init+0x58>

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800191e:	2000      	movs	r0, #0
 8001920:	4798      	blx	r3
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d113      	bne.n	8001950 <ES_WIFI_Init+0x58>
  {
    ret = AT_ExecuteCommand(Obj,(const uint8_t*)"I?\r\n", Obj->CmdData);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800192e:	461a      	mov	r2, r3
 8001930:	490a      	ldr	r1, [pc, #40]	; (800195c <ES_WIFI_Init+0x64>)
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff fe4e 	bl	80015d4 <AT_ExecuteCommand>
 8001938:	4603      	mov	r3, r0
 800193a:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d106      	bne.n	8001950 <ES_WIFI_Init+0x58>
    {
      AT_ParseInfo(Obj, Obj->CmdData);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fcf6 	bl	800133c <AT_ParseInfo>
    }
   }
  }

  UNLOCK_WIFI();
  return ret;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	08009a24 	.word	0x08009a24

08001960 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
 800196c:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00b      	beq.n	800198c <ES_WIFI_RegisterBusIO+0x2c>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <ES_WIFI_RegisterBusIO+0x2c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <ES_WIFI_RegisterBusIO+0x2c>
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <ES_WIFI_RegisterBusIO+0x2c>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800198c:	2302      	movs	r3, #2
 800198e:	e014      	b.n	80019ba <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char *SSID,
                                 const char *Password,
                                 ES_WIFI_SecurityType_t SecType)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "C1=%s\r", SSID);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019dc:	68ba      	ldr	r2, [r7, #8]
 80019de:	4932      	ldr	r1, [pc, #200]	; (8001aa8 <ES_WIFI_Connect+0xe0>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f006 fb11 	bl	8008008 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019f2:	461a      	mov	r2, r3
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fded 	bl	80015d4 <AT_ExecuteCommand>
 80019fa:	4603      	mov	r3, r0
 80019fc:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d14b      	bne.n	8001a9c <ES_WIFI_Connect+0xd4>
  {
    sprintf((char *)Obj->CmdData, "C2=%s\r", Password);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4927      	ldr	r1, [pc, #156]	; (8001aac <ES_WIFI_Connect+0xe4>)
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f006 fafa 	bl	8008008 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a20:	461a      	mov	r2, r3
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f7ff fdd6 	bl	80015d4 <AT_ExecuteCommand>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d134      	bne.n	8001a9c <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char *)Obj->CmdData, "C3=%d\r", (uint8_t)SecType);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	491b      	ldr	r1, [pc, #108]	; (8001ab0 <ES_WIFI_Connect+0xe8>)
 8001a44:	4618      	mov	r0, r3
 8001a46:	f006 fadf 	bl	8008008 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a56:	461a      	mov	r2, r3
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7ff fdbb 	bl	80015d4 <AT_ExecuteCommand>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d119      	bne.n	8001a9c <ES_WIFI_Connect+0xd4>
      {
        sprintf((char *)Obj->CmdData, "C0\r");
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a6e:	4911      	ldr	r1, [pc, #68]	; (8001ab4 <ES_WIFI_Connect+0xec>)
 8001a70:	4618      	mov	r0, r3
 8001a72:	f006 fac9 	bl	8008008 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a82:	461a      	mov	r2, r3
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f7ff fda5 	bl	80015d4 <AT_ExecuteCommand>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d103      	bne.n	8001a9c <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	08009a3c 	.word	0x08009a3c
 8001aac:	08009a44 	.word	0x08009a44
 8001ab0:	08009a4c 	.word	0x08009a4c
 8001ab4:	08009a54 	.word	0x08009a54

08001ab8 <ES_WIFI_IsConnected>:
  * @brief  Check whether the module is connected to an access point.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "CS\r");
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ac6:	4913      	ldr	r1, [pc, #76]	; (8001b14 <ES_WIFI_IsConnected+0x5c>)
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f006 fa9d 	bl	8008008 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ada:	461a      	mov	r2, r3
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff fd79 	bl	80015d4 <AT_ExecuteCommand>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	73fb      	strb	r3, [r7, #15]
  if (ret == ES_WIFI_STATUS_OK)
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10b      	bne.n	8001b04 <ES_WIFI_IsConnected+0x4c>
  {
    Obj->NetSettings.IsConnected = (Obj->CmdData[2] == '1') ? 1 : 0;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8001af2:	2b31      	cmp	r3, #49	; 0x31
 8001af4:	bf0c      	ite	eq
 8001af6:	2301      	moveq	r3, #1
 8001af8:	2300      	movne	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
  }

  UNLOCK_WIFI();

  return Obj->NetSettings.IsConnected;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	08009a58 	.word	0x08009a58

08001b18 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b26:	4910      	ldr	r1, [pc, #64]	; (8001b68 <ES_WIFI_GetNetworkSettings+0x50>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f006 fa6d 	bl	8008008 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fd49 	bl	80015d4 <AT_ExecuteCommand>
 8001b42:	4603      	mov	r3, r0
 8001b44:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d108      	bne.n	8001b5e <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	338d      	adds	r3, #141	; 0x8d
 8001b56:	4619      	mov	r1, r3
 8001b58:	4610      	mov	r0, r2
 8001b5a:	f7ff fc7d 	bl	8001458 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	08009a60 	.word	0x08009a60

08001b6c <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	4613      	mov	r3, r2
 8001b78:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b80:	4913      	ldr	r1, [pc, #76]	; (8001bd0 <ES_WIFI_GetMACAddress+0x64>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f006 fa40 	bl	8008008 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b94:	461a      	mov	r2, r3
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7ff fd1c 	bl	80015d4 <AT_ExecuteCommand>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10e      	bne.n	8001bc4 <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001bac:	3302      	adds	r3, #2
 8001bae:	4909      	ldr	r1, [pc, #36]	; (8001bd4 <ES_WIFI_GetMACAddress+0x68>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f006 fb6d 	bl	8008290 <strtok>
 8001bb6:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	6938      	ldr	r0, [r7, #16]
 8001bc0:	f7ff fb4d 	bl	800125e <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	08009ab0 	.word	0x08009ab0
 8001bd4:	08009ab4 	.word	0x08009ab4

08001bd8 <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	785b      	ldrb	r3, [r3, #1]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4949      	ldr	r1, [pc, #292]	; (8001d18 <ES_WIFI_StartServerSingleConn+0x140>)
 8001bf4:	f006 fa08 	bl	8008008 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c04:	461a      	mov	r2, r3
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fce4 	bl	80015d4 <AT_ExecuteCommand>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	e079      	b.n	8001d0e <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d016      	beq.n	8001c50 <ES_WIFI_StartServerSingleConn+0x78>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d012      	beq.n	8001c50 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c30:	493a      	ldr	r1, [pc, #232]	; (8001d1c <ES_WIFI_StartServerSingleConn+0x144>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f006 f9e8 	bl	8008008 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c44:	461a      	mov	r2, r3
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fcc4 	bl	80015d4 <AT_ExecuteCommand>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d15a      	bne.n	8001d0c <ES_WIFI_StartServerSingleConn+0x134>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	492f      	ldr	r1, [pc, #188]	; (8001d20 <ES_WIFI_StartServerSingleConn+0x148>)
 8001c64:	f006 f9d0 	bl	8008008 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c74:	461a      	mov	r2, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fcac 	bl	80015d4 <AT_ExecuteCommand>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	73fb      	strb	r3, [r7, #15]
    if (ret == ES_WIFI_STATUS_OK)
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d142      	bne.n	8001d0c <ES_WIFI_StartServerSingleConn+0x134>
    {
      sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	7c1b      	ldrb	r3, [r3, #16]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4924      	ldr	r1, [pc, #144]	; (8001d24 <ES_WIFI_StartServerSingleConn+0x14c>)
 8001c94:	f006 f9b8 	bl	8008008 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fc94 	bl	80015d4 <AT_ExecuteCommand>
 8001cac:	4603      	mov	r3, r0
 8001cae:	73fb      	strb	r3, [r7, #15]
      if (ret == ES_WIFI_STATUS_OK)
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d12a      	bne.n	8001d0c <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	889b      	ldrh	r3, [r3, #4]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4919      	ldr	r1, [pc, #100]	; (8001d28 <ES_WIFI_StartServerSingleConn+0x150>)
 8001cc4:	f006 f9a0 	bl	8008008 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fc7c 	bl	80015d4 <AT_ExecuteCommand>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d112      	bne.n	8001d0c <ES_WIFI_StartServerSingleConn+0x134>
        {
          /* multi accept mode */
          sprintf((char*)Obj->CmdData,"P5=11\r");
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cec:	490f      	ldr	r1, [pc, #60]	; (8001d2c <ES_WIFI_StartServerSingleConn+0x154>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f006 f98a 	bl	8008008 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d00:	461a      	mov	r2, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fc66 	bl	80015d4 <AT_ExecuteCommand>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	73fb      	strb	r3, [r7, #15]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	08009b18 	.word	0x08009b18
 8001d1c:	08009b60 	.word	0x08009b60
 8001d20:	08009b20 	.word	0x08009b20
 8001d24:	08009b6c 	.word	0x08009b6c
 8001d28:	08009b28 	.word	0x08009b28
 8001d2c:	08009b74 	.word	0x08009b74

08001d30 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj, uint32_t timeout, ES_WIFI_Conn_t *conn)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart = HAL_GetTick();
 8001d42:	f001 fc07 	bl	8003554 <HAL_GetTick>
 8001d46:	6278      	str	r0, [r7, #36]	; 0x24
  tlast = tstart + timeout;
 8001d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart)
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d201      	bcs.n	8001d5c <ES_WIFI_WaitServerConnection+0x2c>
  {
    tstart=0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    /* mandatory to flush MR async messages */
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d62:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f006 fa55 	bl	8008218 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d74:	4973      	ldr	r1, [pc, #460]	; (8001f44 <ES_WIFI_WaitServerConnection+0x214>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f006 f946 	bl	8008008 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f7ff fc22 	bl	80015d4 <AT_ExecuteCommand>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 8001d96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d136      	bne.n	8001e0c <ES_WIFI_WaitServerConnection+0xdc>
    {
      if ((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001da4:	4968      	ldr	r1, [pc, #416]	; (8001f48 <ES_WIFI_WaitServerConnection+0x218>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f006 face 	bl	8008348 <strstr>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03b      	beq.n	8001e2a <ES_WIFI_WaitServerConnection+0xfa>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001db8:	4964      	ldr	r1, [pc, #400]	; (8001f4c <ES_WIFI_WaitServerConnection+0x21c>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f006 fac4 	bl	8008348 <strstr>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d031      	beq.n	8001e2a <ES_WIFI_WaitServerConnection+0xfa>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001dcc:	4960      	ldr	r1, [pc, #384]	; (8001f50 <ES_WIFI_WaitServerConnection+0x220>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f006 faba 	bl	8008348 <strstr>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d127      	bne.n	8001e2a <ES_WIFI_WaitServerConnection+0xfa>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001de0:	495c      	ldr	r1, [pc, #368]	; (8001f54 <ES_WIFI_WaitServerConnection+0x224>)
 8001de2:	4618      	mov	r0, r3
 8001de4:	f006 fab0 	bl	8008348 <strstr>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d11d      	bne.n	8001e2a <ES_WIFI_WaitServerConnection+0xfa>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 8001dee:	f240 72cb 	movw	r2, #1995	; 0x7cb
 8001df2:	4959      	ldr	r1, [pc, #356]	; (8001f58 <ES_WIFI_WaitServerConnection+0x228>)
 8001df4:	4859      	ldr	r0, [pc, #356]	; (8001f5c <ES_WIFI_WaitServerConnection+0x22c>)
 8001df6:	f006 f899 	bl	8007f2c <iprintf>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e00:	4619      	mov	r1, r3
 8001e02:	4857      	ldr	r0, [pc, #348]	; (8001f60 <ES_WIFI_WaitServerConnection+0x230>)
 8001e04:	f006 f892 	bl	8007f2c <iprintf>

          UNLOCK_WIFI();

          return ES_WIFI_STATUS_ERROR;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e096      	b.n	8001f3a <ES_WIFI_WaitServerConnection+0x20a>
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 8001e0c:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001e10:	4951      	ldr	r1, [pc, #324]	; (8001f58 <ES_WIFI_WaitServerConnection+0x228>)
 8001e12:	4852      	ldr	r0, [pc, #328]	; (8001f5c <ES_WIFI_WaitServerConnection+0x22c>)
 8001e14:	f006 f88a 	bl	8007f2c <iprintf>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4850      	ldr	r0, [pc, #320]	; (8001f64 <ES_WIFI_WaitServerConnection+0x234>)
 8001e22:	f006 f883 	bl	8007f2c <iprintf>

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8001e26:	2302      	movs	r3, #2
 8001e28:	e087      	b.n	8001f3a <ES_WIFI_WaitServerConnection+0x20a>
    }
#endif /* (ES_WIFI_USE_UART == 0) */

    memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e30:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f006 f9ee 	bl	8008218 <memset>
    sprintf((char*)Obj->CmdData, "P?\r");
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e42:	4949      	ldr	r1, [pc, #292]	; (8001f68 <ES_WIFI_WaitServerConnection+0x238>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f006 f8df 	bl	8008008 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e56:	461a      	mov	r2, r3
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7ff fbbb 	bl	80015d4 <AT_ExecuteCommand>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 8001e64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d140      	bne.n	8001eee <ES_WIFI_WaitServerConnection+0x1be>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12)!=0)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e72:	220c      	movs	r2, #12
 8001e74:	493d      	ldr	r1, [pc, #244]	; (8001f6c <ES_WIFI_WaitServerConnection+0x23c>)
 8001e76:	4618      	mov	r0, r3
 8001e78:	f006 f9e5 	bl	8008246 <strncmp>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d044      	beq.n	8001f0c <ES_WIFI_WaitServerConnection+0x1dc>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e88:	3302      	adds	r3, #2
 8001e8a:	4939      	ldr	r1, [pc, #228]	; (8001f70 <ES_WIFI_WaitServerConnection+0x240>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f006 f9ff 	bl	8008290 <strtok>
 8001e92:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* port */
 8001e94:	4936      	ldr	r1, [pc, #216]	; (8001f70 <ES_WIFI_WaitServerConnection+0x240>)
 8001e96:	2000      	movs	r0, #0
 8001e98:	f006 f9fa 	bl	8008290 <strtok>
 8001e9c:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP, sizeof(conn->RemoteIP));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3306      	adds	r3, #6
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff fa10 	bl	80012cc <ParseIP>
        ptr = strtok(0, ","); /* port */
 8001eac:	4930      	ldr	r1, [pc, #192]	; (8001f70 <ES_WIFI_WaitServerConnection+0x240>)
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f006 f9ee 	bl	8008290 <strtok>
 8001eb4:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	6978      	ldr	r0, [r7, #20]
 8001eba:	f7ff f98c 	bl	80011d6 <ParseNumber>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	809a      	strh	r2, [r3, #4]
        ptr = strtok(0, ","); /* ip */
 8001ec6:	492a      	ldr	r1, [pc, #168]	; (8001f70 <ES_WIFI_WaitServerConnection+0x240>)
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f006 f9e1 	bl	8008290 <strtok>
 8001ece:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* remote port */
 8001ed0:	4927      	ldr	r1, [pc, #156]	; (8001f70 <ES_WIFI_WaitServerConnection+0x240>)
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f006 f9dc 	bl	8008290 <strtok>
 8001ed8:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 8001eda:	2100      	movs	r1, #0
 8001edc:	6978      	ldr	r0, [r7, #20]
 8001ede:	f7ff f97a 	bl	80011d6 <ParseNumber>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	805a      	strh	r2, [r3, #2]

        UNLOCK_WIFI();

        return ES_WIFI_STATUS_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e025      	b.n	8001f3a <ES_WIFI_WaitServerConnection+0x20a>
      }
    }
    else
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);
 8001eee:	f240 72f4 	movw	r2, #2036	; 0x7f4
 8001ef2:	4919      	ldr	r1, [pc, #100]	; (8001f58 <ES_WIFI_WaitServerConnection+0x228>)
 8001ef4:	4819      	ldr	r0, [pc, #100]	; (8001f5c <ES_WIFI_WaitServerConnection+0x22c>)
 8001ef6:	f006 f819 	bl	8007f2c <iprintf>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f00:	4619      	mov	r1, r3
 8001f02:	481c      	ldr	r0, [pc, #112]	; (8001f74 <ES_WIFI_WaitServerConnection+0x244>)
 8001f04:	f006 f812 	bl	8007f2c <iprintf>

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e016      	b.n	8001f3a <ES_WIFI_WaitServerConnection+0x20a>
    }

    UNLOCK_WIFI();

    Obj->fops.IO_Delay(100);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001f12:	2064      	movs	r0, #100	; 0x64
 8001f14:	4798      	blx	r3

    LOCK_WIFI();
    t = HAL_GetTick();
 8001f16:	f001 fb1d 	bl	8003554 <HAL_GetTick>
 8001f1a:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) || ((t < tlast) || (t < tstart)));
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f43f af1c 	beq.w	8001d5c <ES_WIFI_WaitServerConnection+0x2c>
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	f4ff af17 	bcc.w	8001d5c <ES_WIFI_WaitServerConnection+0x2c>
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	429a      	cmp	r2, r3
 8001f34:	f4ff af12 	bcc.w	8001d5c <ES_WIFI_WaitServerConnection+0x2c>
  return ES_WIFI_STATUS_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3728      	adds	r7, #40	; 0x28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	08009a34 	.word	0x08009a34
 8001f48:	08009b7c 	.word	0x08009b7c
 8001f4c:	08009b84 	.word	0x08009b84
 8001f50:	08009b8c 	.word	0x08009b8c
 8001f54:	08009b98 	.word	0x08009b98
 8001f58:	08009ba8 	.word	0x08009ba8
 8001f5c:	08009c04 	.word	0x08009c04
 8001f60:	08009c0c 	.word	0x08009c0c
 8001f64:	08009c24 	.word	0x08009c24
 8001f68:	08009c3c 	.word	0x08009c3c
 8001f6c:	08009c40 	.word	0x08009c40
 8001f70:	080099f0 	.word	0x080099f0
 8001f74:	08009c50 	.word	0x08009c50

08001f78 <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, uint8_t socket)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", socket);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	4924      	ldr	r1, [pc, #144]	; (8002020 <ES_WIFI_CloseServerConnection+0xa8>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f006 f83a 	bl	8008008 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fb16 	bl	80015d4 <AT_ExecuteCommand>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00e      	beq.n	8001fd0 <ES_WIFI_CloseServerConnection+0x58>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 8001fb2:	f640 0217 	movw	r2, #2071	; 0x817
 8001fb6:	491b      	ldr	r1, [pc, #108]	; (8002024 <ES_WIFI_CloseServerConnection+0xac>)
 8001fb8:	481b      	ldr	r0, [pc, #108]	; (8002028 <ES_WIFI_CloseServerConnection+0xb0>)
 8001fba:	f005 ffb7 	bl	8007f2c <iprintf>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4819      	ldr	r0, [pc, #100]	; (800202c <ES_WIFI_CloseServerConnection+0xb4>)
 8001fc8:	f005 ffb0 	bl	8007f2c <iprintf>
    UNLOCK_WIFI();
    return ret;
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	e023      	b.n	8002018 <ES_WIFI_CloseServerConnection+0xa0>
  }

  sprintf((char*)Obj->CmdData, "P5=10\r");
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fd6:	4916      	ldr	r1, [pc, #88]	; (8002030 <ES_WIFI_CloseServerConnection+0xb8>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f006 f815 	bl	8008008 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fea:	461a      	mov	r2, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff faf1 	bl	80015d4 <AT_ExecuteCommand>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00c      	beq.n	8002016 <ES_WIFI_CloseServerConnection+0x9e>
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 8001ffc:	f44f 6202 	mov.w	r2, #2080	; 0x820
 8002000:	4908      	ldr	r1, [pc, #32]	; (8002024 <ES_WIFI_CloseServerConnection+0xac>)
 8002002:	4809      	ldr	r0, [pc, #36]	; (8002028 <ES_WIFI_CloseServerConnection+0xb0>)
 8002004:	f005 ff92 	bl	8007f2c <iprintf>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800200e:	4619      	mov	r1, r3
 8002010:	4808      	ldr	r0, [pc, #32]	; (8002034 <ES_WIFI_CloseServerConnection+0xbc>)
 8002012:	f005 ff8b 	bl	8007f2c <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	08009b18 	.word	0x08009b18
 8002024:	08009ba8 	.word	0x08009ba8
 8002028:	08009c04 	.word	0x08009c04
 800202c:	08009c68 	.word	0x08009c68
 8002030:	08009c84 	.word	0x08009c84
 8002034:	08009c8c 	.word	0x08009c8c

08002038 <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, uint8_t socket)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	4925      	ldr	r1, [pc, #148]	; (80020e4 <ES_WIFI_StopServerSingleConn+0xac>)
 800204e:	4618      	mov	r0, r3
 8002050:	f005 ffda 	bl	8008008 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002060:	461a      	mov	r2, r3
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fab6 	bl	80015d4 <AT_ExecuteCommand>
 8002068:	4603      	mov	r3, r0
 800206a:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00e      	beq.n	8002090 <ES_WIFI_StopServerSingleConn+0x58>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 8002072:	f640 0237 	movw	r2, #2103	; 0x837
 8002076:	491c      	ldr	r1, [pc, #112]	; (80020e8 <ES_WIFI_StopServerSingleConn+0xb0>)
 8002078:	481c      	ldr	r0, [pc, #112]	; (80020ec <ES_WIFI_StopServerSingleConn+0xb4>)
 800207a:	f005 ff57 	bl	8007f2c <iprintf>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002084:	4619      	mov	r1, r3
 8002086:	481a      	ldr	r0, [pc, #104]	; (80020f0 <ES_WIFI_StopServerSingleConn+0xb8>)
 8002088:	f005 ff50 	bl	8007f2c <iprintf>
    UNLOCK_WIFI();
    return ret;
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	e025      	b.n	80020dc <ES_WIFI_StopServerSingleConn+0xa4>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002096:	4917      	ldr	r1, [pc, #92]	; (80020f4 <ES_WIFI_StopServerSingleConn+0xbc>)
 8002098:	4618      	mov	r0, r3
 800209a:	f005 ffb5 	bl	8008008 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020aa:	461a      	mov	r2, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff fa91 	bl	80015d4 <AT_ExecuteCommand>
 80020b2:	4603      	mov	r3, r0
 80020b4:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00e      	beq.n	80020da <ES_WIFI_StopServerSingleConn+0xa2>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 80020bc:	f44f 6204 	mov.w	r2, #2112	; 0x840
 80020c0:	4909      	ldr	r1, [pc, #36]	; (80020e8 <ES_WIFI_StopServerSingleConn+0xb0>)
 80020c2:	480a      	ldr	r0, [pc, #40]	; (80020ec <ES_WIFI_StopServerSingleConn+0xb4>)
 80020c4:	f005 ff32 	bl	8007f2c <iprintf>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020ce:	4619      	mov	r1, r3
 80020d0:	4809      	ldr	r0, [pc, #36]	; (80020f8 <ES_WIFI_StopServerSingleConn+0xc0>)
 80020d2:	f005 ff2b 	bl	8007f2c <iprintf>
    UNLOCK_WIFI();
    return ret;
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	e000      	b.n	80020dc <ES_WIFI_StopServerSingleConn+0xa4>
  }

  UNLOCK_WIFI();
  return ret;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	08009b18 	.word	0x08009b18
 80020e8:	08009ba8 	.word	0x08009ba8
 80020ec:	08009c04 	.word	0x08009c04
 80020f0:	08009ca4 	.word	0x08009ca4
 80020f4:	08009cc4 	.word	0x08009cc4
 80020f8:	08009ccc 	.word	0x08009ccc

080020fc <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af02      	add	r7, sp, #8
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	461a      	mov	r2, r3
 8002108:	460b      	mov	r3, r1
 800210a:	72fb      	strb	r3, [r7, #11]
 800210c:	4613      	mov	r3, r2
 800210e:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002110:	2302      	movs	r3, #2
 8002112:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 800211a:	2301      	movs	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e001      	b.n	8002124 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8002124:	893b      	ldrh	r3, [r7, #8]
 8002126:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800212a:	d302      	bcc.n	8002132 <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 800212c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002130:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	893a      	ldrh	r2, [r7, #8]
 8002136:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800213e:	7afa      	ldrb	r2, [r7, #11]
 8002140:	4942      	ldr	r1, [pc, #264]	; (800224c <ES_WIFI_SendData+0x150>)
 8002142:	4618      	mov	r0, r3
 8002144:	f005 ff60 	bl	8008008 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002154:	461a      	mov	r2, r3
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f7ff fa3c 	bl	80015d4 <AT_ExecuteCommand>
 800215c:	4603      	mov	r3, r0
 800215e:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 8002160:	7cfb      	ldrb	r3, [r7, #19]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d15e      	bne.n	8002224 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	4938      	ldr	r1, [pc, #224]	; (8002250 <ES_WIFI_SendData+0x154>)
 8002170:	4618      	mov	r0, r3
 8002172:	f005 ff49 	bl	8008008 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002182:	461a      	mov	r2, r3
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f7ff fa25 	bl	80015d4 <AT_ExecuteCommand>
 800218a:	4603      	mov	r3, r0
 800218c:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 800218e:	7cfb      	ldrb	r3, [r7, #19]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d13d      	bne.n	8002210 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800219a:	893a      	ldrh	r2, [r7, #8]
 800219c:	492d      	ldr	r1, [pc, #180]	; (8002254 <ES_WIFI_SendData+0x158>)
 800219e:	4618      	mov	r0, r3
 80021a0:	f005 ff32 	bl	8008008 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021b0:	893a      	ldrh	r2, [r7, #8]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	4613      	mov	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff fa7b 	bl	80016b4 <AT_RequestSendData>
 80021be:	4603      	mov	r3, r0
 80021c0:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 80021c2:	7cfb      	ldrb	r3, [r7, #19]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d119      	bne.n	80021fc <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021ce:	4922      	ldr	r1, [pc, #136]	; (8002258 <ES_WIFI_SendData+0x15c>)
 80021d0:	4618      	mov	r0, r3
 80021d2:	f006 f8b9 	bl	8008348 <strstr>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d02c      	beq.n	8002236 <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 80021dc:	f640 1201 	movw	r2, #2305	; 0x901
 80021e0:	491e      	ldr	r1, [pc, #120]	; (800225c <ES_WIFI_SendData+0x160>)
 80021e2:	481f      	ldr	r0, [pc, #124]	; (8002260 <ES_WIFI_SendData+0x164>)
 80021e4:	f005 fea2 	bl	8007f2c <iprintf>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80021ee:	4619      	mov	r1, r3
 80021f0:	481c      	ldr	r0, [pc, #112]	; (8002264 <ES_WIFI_SendData+0x168>)
 80021f2:	f005 fe9b 	bl	8007f2c <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 80021f6:	2302      	movs	r3, #2
 80021f8:	74fb      	strb	r3, [r7, #19]
 80021fa:	e01c      	b.n	8002236 <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 80021fc:	f640 1207 	movw	r2, #2311	; 0x907
 8002200:	4916      	ldr	r1, [pc, #88]	; (800225c <ES_WIFI_SendData+0x160>)
 8002202:	4817      	ldr	r0, [pc, #92]	; (8002260 <ES_WIFI_SendData+0x164>)
 8002204:	f005 fe92 	bl	8007f2c <iprintf>
 8002208:	4817      	ldr	r0, [pc, #92]	; (8002268 <ES_WIFI_SendData+0x16c>)
 800220a:	f005 fef5 	bl	8007ff8 <puts>
 800220e:	e012      	b.n	8002236 <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8002210:	f640 120c 	movw	r2, #2316	; 0x90c
 8002214:	4911      	ldr	r1, [pc, #68]	; (800225c <ES_WIFI_SendData+0x160>)
 8002216:	4812      	ldr	r0, [pc, #72]	; (8002260 <ES_WIFI_SendData+0x164>)
 8002218:	f005 fe88 	bl	8007f2c <iprintf>
 800221c:	4813      	ldr	r0, [pc, #76]	; (800226c <ES_WIFI_SendData+0x170>)
 800221e:	f005 feeb 	bl	8007ff8 <puts>
 8002222:	e008      	b.n	8002236 <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8002224:	f640 1211 	movw	r2, #2321	; 0x911
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <ES_WIFI_SendData+0x160>)
 800222a:	480d      	ldr	r0, [pc, #52]	; (8002260 <ES_WIFI_SendData+0x164>)
 800222c:	f005 fe7e 	bl	8007f2c <iprintf>
 8002230:	480f      	ldr	r0, [pc, #60]	; (8002270 <ES_WIFI_SendData+0x174>)
 8002232:	f005 fee1 	bl	8007ff8 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d102      	bne.n	8002242 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	2200      	movs	r2, #0
 8002240:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 8002242:	7cfb      	ldrb	r3, [r7, #19]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	08009b18 	.word	0x08009b18
 8002250:	08009d10 	.word	0x08009d10
 8002254:	08009d18 	.word	0x08009d18
 8002258:	08009d24 	.word	0x08009d24
 800225c:	08009ba8 	.word	0x08009ba8
 8002260:	08009c04 	.word	0x08009c04
 8002264:	08009d2c 	.word	0x08009d2c
 8002268:	08009d48 	.word	0x08009d48
 800226c:	08009d64 	.word	0x08009d64
 8002270:	08009d78 	.word	0x08009d78

08002274 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	461a      	mov	r2, r3
 8002280:	460b      	mov	r3, r1
 8002282:	72fb      	strb	r3, [r7, #11]
 8002284:	4613      	mov	r3, r2
 8002286:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002288:	2302      	movs	r3, #2
 800228a:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8002292:	2301      	movs	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e001      	b.n	800229c <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 800229c:	893b      	ldrh	r3, [r7, #8]
 800229e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80022a2:	f200 808b 	bhi.w	80023bc <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022ac:	7afa      	ldrb	r2, [r7, #11]
 80022ae:	4946      	ldr	r1, [pc, #280]	; (80023c8 <ES_WIFI_ReceiveData+0x154>)
 80022b0:	4618      	mov	r0, r3
 80022b2:	f005 fea9 	bl	8008008 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022c2:	461a      	mov	r2, r3
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff f985 	bl	80015d4 <AT_ExecuteCommand>
 80022ca:	4603      	mov	r3, r0
 80022cc:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d165      	bne.n	80023a0 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022da:	893a      	ldrh	r2, [r7, #8]
 80022dc:	493b      	ldr	r1, [pc, #236]	; (80023cc <ES_WIFI_ReceiveData+0x158>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f005 fe92 	bl	8008008 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022f0:	461a      	mov	r2, r3
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff f96e 	bl	80015d4 <AT_ExecuteCommand>
 80022f8:	4603      	mov	r3, r0
 80022fa:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d141      	bne.n	8002386 <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4931      	ldr	r1, [pc, #196]	; (80023d0 <ES_WIFI_ReceiveData+0x15c>)
 800230c:	4618      	mov	r0, r3
 800230e:	f005 fe7b 	bl	8008008 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800231e:	461a      	mov	r2, r3
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff f957 	bl	80015d4 <AT_ExecuteCommand>
 8002326:	4603      	mov	r3, r0
 8002328:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 800232a:	7cfb      	ldrb	r3, [r7, #19]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d120      	bne.n	8002372 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002336:	4927      	ldr	r1, [pc, #156]	; (80023d4 <ES_WIFI_ReceiveData+0x160>)
 8002338:	4618      	mov	r0, r3
 800233a:	f005 fe65 	bl	8008008 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002344:	893a      	ldrh	r2, [r7, #8]
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff fa30 	bl	80017b4 <AT_RequestReceiveData>
 8002354:	4603      	mov	r3, r0
 8002356:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d02e      	beq.n	80023bc <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 800235e:	f640 12a9 	movw	r2, #2473	; 0x9a9
 8002362:	491d      	ldr	r1, [pc, #116]	; (80023d8 <ES_WIFI_ReceiveData+0x164>)
 8002364:	481d      	ldr	r0, [pc, #116]	; (80023dc <ES_WIFI_ReceiveData+0x168>)
 8002366:	f005 fde1 	bl	8007f2c <iprintf>
 800236a:	481d      	ldr	r0, [pc, #116]	; (80023e0 <ES_WIFI_ReceiveData+0x16c>)
 800236c:	f005 fe44 	bl	8007ff8 <puts>
 8002370:	e024      	b.n	80023bc <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 8002372:	f640 12ae 	movw	r2, #2478	; 0x9ae
 8002376:	4918      	ldr	r1, [pc, #96]	; (80023d8 <ES_WIFI_ReceiveData+0x164>)
 8002378:	4818      	ldr	r0, [pc, #96]	; (80023dc <ES_WIFI_ReceiveData+0x168>)
 800237a:	f005 fdd7 	bl	8007f2c <iprintf>
 800237e:	4819      	ldr	r0, [pc, #100]	; (80023e4 <ES_WIFI_ReceiveData+0x170>)
 8002380:	f005 fe3a 	bl	8007ff8 <puts>
 8002384:	e01a      	b.n	80023bc <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
 8002386:	f640 12b3 	movw	r2, #2483	; 0x9b3
 800238a:	4913      	ldr	r1, [pc, #76]	; (80023d8 <ES_WIFI_ReceiveData+0x164>)
 800238c:	4813      	ldr	r0, [pc, #76]	; (80023dc <ES_WIFI_ReceiveData+0x168>)
 800238e:	f005 fdcd 	bl	8007f2c <iprintf>
 8002392:	4815      	ldr	r0, [pc, #84]	; (80023e8 <ES_WIFI_ReceiveData+0x174>)
 8002394:	f005 fe30 	bl	8007ff8 <puts>
        *Receivedlen = 0;
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	2200      	movs	r2, #0
 800239c:	801a      	strh	r2, [r3, #0]
 800239e:	e00d      	b.n	80023bc <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
 80023a0:	f640 12b9 	movw	r2, #2489	; 0x9b9
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <ES_WIFI_ReceiveData+0x164>)
 80023a6:	480d      	ldr	r0, [pc, #52]	; (80023dc <ES_WIFI_ReceiveData+0x168>)
 80023a8:	f005 fdc0 	bl	8007f2c <iprintf>
 80023ac:	480f      	ldr	r0, [pc, #60]	; (80023ec <ES_WIFI_ReceiveData+0x178>)
 80023ae:	f005 fe23 	bl	8007ff8 <puts>
      issue15++;
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <ES_WIFI_ReceiveData+0x17c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	3301      	adds	r3, #1
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <ES_WIFI_ReceiveData+0x17c>)
 80023ba:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	08009b18 	.word	0x08009b18
 80023cc:	08009d9c 	.word	0x08009d9c
 80023d0:	08009da4 	.word	0x08009da4
 80023d4:	08009dac 	.word	0x08009dac
 80023d8:	08009ba8 	.word	0x08009ba8
 80023dc:	08009c04 	.word	0x08009c04
 80023e0:	08009db0 	.word	0x08009db0
 80023e4:	08009dd0 	.word	0x08009dd0
 80023e8:	08009de8 	.word	0x08009de8
 80023ec:	08009e08 	.word	0x08009e08
 80023f0:	200008b0 	.word	0x200008b0

080023f4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08c      	sub	sp, #48	; 0x30
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_Init;

  __HAL_RCC_SPI3_CLK_ENABLE();
 80023fc:	4b57      	ldr	r3, [pc, #348]	; (800255c <SPI_WIFI_MspInit+0x168>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	4a56      	ldr	r2, [pc, #344]	; (800255c <SPI_WIFI_MspInit+0x168>)
 8002402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002406:	6593      	str	r3, [r2, #88]	; 0x58
 8002408:	4b54      	ldr	r3, [pc, #336]	; (800255c <SPI_WIFI_MspInit+0x168>)
 800240a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002414:	4b51      	ldr	r3, [pc, #324]	; (800255c <SPI_WIFI_MspInit+0x168>)
 8002416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002418:	4a50      	ldr	r2, [pc, #320]	; (800255c <SPI_WIFI_MspInit+0x168>)
 800241a:	f043 0302 	orr.w	r3, r3, #2
 800241e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002420:	4b4e      	ldr	r3, [pc, #312]	; (800255c <SPI_WIFI_MspInit+0x168>)
 8002422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800242c:	4b4b      	ldr	r3, [pc, #300]	; (800255c <SPI_WIFI_MspInit+0x168>)
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	4a4a      	ldr	r2, [pc, #296]	; (800255c <SPI_WIFI_MspInit+0x168>)
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002438:	4b48      	ldr	r3, [pc, #288]	; (800255c <SPI_WIFI_MspInit+0x168>)
 800243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002444:	4b45      	ldr	r3, [pc, #276]	; (800255c <SPI_WIFI_MspInit+0x168>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	4a44      	ldr	r2, [pc, #272]	; (800255c <SPI_WIFI_MspInit+0x168>)
 800244a:	f043 0310 	orr.w	r3, r3, #16
 800244e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002450:	4b42      	ldr	r3, [pc, #264]	; (800255c <SPI_WIFI_MspInit+0x168>)
 8002452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]

  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800245c:	2200      	movs	r2, #0
 800245e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002462:	483f      	ldr	r0, [pc, #252]	; (8002560 <SPI_WIFI_MspInit+0x16c>)
 8002464:	f001 fbba 	bl	8003bdc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 8002468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800246c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800246e:	2301      	movs	r3, #1
 8002470:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002476:	2300      	movs	r3, #0
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800247a:	f107 031c 	add.w	r3, r7, #28
 800247e:	4619      	mov	r1, r3
 8002480:	4837      	ldr	r0, [pc, #220]	; (8002560 <SPI_WIFI_MspInit+0x16c>)
 8002482:	f001 f9e9 	bl	8003858 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 8002486:	2302      	movs	r3, #2
 8002488:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800248a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800248e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	4619      	mov	r1, r3
 800249e:	4831      	ldr	r0, [pc, #196]	; (8002564 <SPI_WIFI_MspInit+0x170>)
 80024a0:	f001 f9da 	bl	8003858 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 80024a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a8:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	4619      	mov	r1, r3
 80024c0:	4828      	ldr	r0, [pc, #160]	; (8002564 <SPI_WIFI_MspInit+0x170>)
 80024c2:	f001 f9c9 	bl	8003858 <HAL_GPIO_Init>

  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80024c6:	2201      	movs	r2, #1
 80024c8:	2101      	movs	r1, #1
 80024ca:	4826      	ldr	r0, [pc, #152]	; (8002564 <SPI_WIFI_MspInit+0x170>)
 80024cc:	f001 fb86 	bl	8003bdc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80024d0:	2301      	movs	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80024dc:	2301      	movs	r3, #1
 80024de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	4619      	mov	r1, r3
 80024e6:	481f      	ldr	r0, [pc, #124]	; (8002564 <SPI_WIFI_MspInit+0x170>)
 80024e8:	f001 f9b6 	bl	8003858 <HAL_GPIO_Init>

  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80024ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80024fa:	2301      	movs	r3, #1
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80024fe:	2306      	movs	r3, #6
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	4619      	mov	r1, r3
 8002508:	4817      	ldr	r0, [pc, #92]	; (8002568 <SPI_WIFI_MspInit+0x174>)
 800250a:	f001 f9a5 	bl	8003858 <HAL_GPIO_Init>

  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800250e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002512:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800251c:	2301      	movs	r3, #1
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002520:	2306      	movs	r3, #6
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8002524:	f107 031c 	add.w	r3, r7, #28
 8002528:	4619      	mov	r1, r3
 800252a:	480f      	ldr	r0, [pc, #60]	; (8002568 <SPI_WIFI_MspInit+0x174>)
 800252c:	f001 f994 	bl	8003858 <HAL_GPIO_Init>

  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8002530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002534:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800253a:	2301      	movs	r3, #1
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800253e:	2301      	movs	r3, #1
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8002542:	2306      	movs	r3, #6
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8002546:	f107 031c 	add.w	r3, r7, #28
 800254a:	4619      	mov	r1, r3
 800254c:	4806      	ldr	r0, [pc, #24]	; (8002568 <SPI_WIFI_MspInit+0x174>)
 800254e:	f001 f983 	bl	8003858 <HAL_GPIO_Init>
}
 8002552:	bf00      	nop
 8002554:	3730      	adds	r7, #48	; 0x30
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	48000400 	.word	0x48000400
 8002564:	48001000 	.word	0x48001000
 8002568:	48000800 	.word	0x48000800

0800256c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]

  if (mode == ES_WIFI_INIT)
 800257a:	88fb      	ldrh	r3, [r7, #6]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d145      	bne.n	800260c <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <SPI_WIFI_Init+0xb4>)
 8002582:	4a28      	ldr	r2, [pc, #160]	; (8002624 <SPI_WIFI_Init+0xb8>)
 8002584:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 8002586:	4826      	ldr	r0, [pc, #152]	; (8002620 <SPI_WIFI_Init+0xb4>)
 8002588:	f7ff ff34 	bl	80023f4 <SPI_WIFI_MspInit>

    hspi.Init.Mode              = SPI_MODE_MASTER;
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <SPI_WIFI_Init+0xb4>)
 800258e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002592:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8002594:	4b22      	ldr	r3, [pc, #136]	; (8002620 <SPI_WIFI_Init+0xb4>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800259a:	4b21      	ldr	r3, [pc, #132]	; (8002620 <SPI_WIFI_Init+0xb4>)
 800259c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80025a0:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 80025a2:	4b1f      	ldr	r3, [pc, #124]	; (8002620 <SPI_WIFI_Init+0xb4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <SPI_WIFI_Init+0xb4>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 80025ae:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <SPI_WIFI_Init+0xb4>)
 80025b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b4:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 80025b6:	4b1a      	ldr	r3, [pc, #104]	; (8002620 <SPI_WIFI_Init+0xb4>)
 80025b8:	2210      	movs	r2, #16
 80025ba:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <SPI_WIFI_Init+0xb4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <SPI_WIFI_Init+0xb4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80025c8:	4b15      	ldr	r3, [pc, #84]	; (8002620 <SPI_WIFI_Init+0xb4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <SPI_WIFI_Init+0xb4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80025d4:	4812      	ldr	r0, [pc, #72]	; (8002620 <SPI_WIFI_Init+0xb4>)
 80025d6:	f002 ff4f 	bl	8005478 <HAL_SPI_Init>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
 80025e4:	e018      	b.n	8002618 <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80025e6:	2200      	movs	r2, #0
 80025e8:	2100      	movs	r1, #0
 80025ea:	2007      	movs	r0, #7
 80025ec:	f001 f8bd 	bl	800376a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80025f0:	2007      	movs	r0, #7
 80025f2:	f001 f8d6 	bl	80037a2 <HAL_NVIC_EnableIRQ>

     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	2100      	movs	r1, #0
 80025fa:	2033      	movs	r0, #51	; 0x33
 80025fc:	f001 f8b5 	bl	800376a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8002600:	2033      	movs	r0, #51	; 0x33
 8002602:	f001 f8ce 	bl	80037a2 <HAL_NVIC_EnableIRQ>
    SEM_WAIT(cmddata_rdy_rising_sem, 1);
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);
#endif /* WIFI_USE_CMSIS_OS */
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 8002606:	200a      	movs	r0, #10
 8002608:	f000 f9fe 	bl	8002a08 <SPI_WIFI_DelayUs>
  }

  rc = SPI_WIFI_ResetModule();
 800260c:	f000 f80c 	bl	8002628 <SPI_WIFI_ResetModule>
 8002610:	4603      	mov	r3, r0
 8002612:	73fb      	strb	r3, [r7, #15]

  return rc;
 8002614:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200008b4 	.word	0x200008b4
 8002624:	40003c00 	.word	0x40003c00

08002628 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800262e:	f000 ff91 	bl	8003554 <HAL_GetTick>
 8002632:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;

  WIFI_RESET_MODULE();
 8002638:	2200      	movs	r2, #0
 800263a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800263e:	4830      	ldr	r0, [pc, #192]	; (8002700 <SPI_WIFI_ResetModule+0xd8>)
 8002640:	f001 facc 	bl	8003bdc <HAL_GPIO_WritePin>
 8002644:	200a      	movs	r0, #10
 8002646:	f000 ff91 	bl	800356c <HAL_Delay>
 800264a:	2201      	movs	r2, #1
 800264c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002650:	482b      	ldr	r0, [pc, #172]	; (8002700 <SPI_WIFI_ResetModule+0xd8>)
 8002652:	f001 fac3 	bl	8003bdc <HAL_GPIO_WritePin>
 8002656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800265a:	f000 ff87 	bl	800356c <HAL_Delay>
  WIFI_ENABLE_NSS();
 800265e:	2200      	movs	r2, #0
 8002660:	2101      	movs	r1, #1
 8002662:	4827      	ldr	r0, [pc, #156]	; (8002700 <SPI_WIFI_ResetModule+0xd8>)
 8002664:	f001 faba 	bl	8003bdc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002668:	200f      	movs	r0, #15
 800266a:	f000 f9cd 	bl	8002a08 <SPI_WIFI_DelayUs>

  while (WIFI_IS_CMDDATA_READY())
 800266e:	e020      	b.n	80026b2 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	463a      	mov	r2, r7
 8002674:	18d1      	adds	r1, r2, r3
 8002676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800267a:	2201      	movs	r2, #1
 800267c:	4821      	ldr	r0, [pc, #132]	; (8002704 <SPI_WIFI_ResetModule+0xdc>)
 800267e:	f003 f803 	bl	8005688 <HAL_SPI_Receive>
 8002682:	4603      	mov	r3, r0
 8002684:	71fb      	strb	r3, [r7, #7]
    count += 2;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	3302      	adds	r3, #2
 800268a:	73fb      	strb	r3, [r7, #15]
    if (((HAL_GetTick() - tickstart) > 0xFFFF) || (Status != HAL_OK))
 800268c:	f000 ff62 	bl	8003554 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269a:	d202      	bcs.n	80026a2 <SPI_WIFI_ResetModule+0x7a>
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 80026a2:	2201      	movs	r2, #1
 80026a4:	2101      	movs	r1, #1
 80026a6:	4816      	ldr	r0, [pc, #88]	; (8002700 <SPI_WIFI_ResetModule+0xd8>)
 80026a8:	f001 fa98 	bl	8003bdc <HAL_GPIO_WritePin>
      return -1;
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
 80026b0:	e021      	b.n	80026f6 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 80026b2:	2102      	movs	r1, #2
 80026b4:	4812      	ldr	r0, [pc, #72]	; (8002700 <SPI_WIFI_ResetModule+0xd8>)
 80026b6:	f001 fa79 	bl	8003bac <HAL_GPIO_ReadPin>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d0d7      	beq.n	8002670 <SPI_WIFI_ResetModule+0x48>
    }
  }

  WIFI_DISABLE_NSS();
 80026c0:	2201      	movs	r2, #1
 80026c2:	2101      	movs	r1, #1
 80026c4:	480e      	ldr	r0, [pc, #56]	; (8002700 <SPI_WIFI_ResetModule+0xd8>)
 80026c6:	f001 fa89 	bl	8003bdc <HAL_GPIO_WritePin>

  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80026ca:	783b      	ldrb	r3, [r7, #0]
 80026cc:	2b15      	cmp	r3, #21
 80026ce:	d10e      	bne.n	80026ee <SPI_WIFI_ResetModule+0xc6>
 80026d0:	787b      	ldrb	r3, [r7, #1]
 80026d2:	2b15      	cmp	r3, #21
 80026d4:	d10b      	bne.n	80026ee <SPI_WIFI_ResetModule+0xc6>
 80026d6:	78bb      	ldrb	r3, [r7, #2]
 80026d8:	2b0d      	cmp	r3, #13
 80026da:	d108      	bne.n	80026ee <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80026dc:	78fb      	ldrb	r3, [r7, #3]
  if ((Prompt[0] != 0x15) || (Prompt[1] != 0x15) || (Prompt[2] != '\r') ||
 80026de:	2b0a      	cmp	r3, #10
 80026e0:	d105      	bne.n	80026ee <SPI_WIFI_ResetModule+0xc6>
      (Prompt[3] != '\n') || (Prompt[4] != '>') || (Prompt[5] != ' '))
 80026e2:	793b      	ldrb	r3, [r7, #4]
 80026e4:	2b3e      	cmp	r3, #62	; 0x3e
 80026e6:	d102      	bne.n	80026ee <SPI_WIFI_ResetModule+0xc6>
 80026e8:	797b      	ldrb	r3, [r7, #5]
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d002      	beq.n	80026f4 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	e000      	b.n	80026f6 <SPI_WIFI_ResetModule+0xce>
  }
  return 0;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	48001000 	.word	0x48001000
 8002704:	200008b4 	.word	0x200008b4

08002708 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval 0
  */
int8_t SPI_WIFI_DeInit(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <SPI_WIFI_DeInit+0x10>)
 800270e:	f002 ff7f 	bl	8005610 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif /* WIFI_USE_CMSIS_OS */
  return 0;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200008b4 	.word	0x200008b4

0800271c <wait_cmddata_rdy_high>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
static int wait_cmddata_rdy_high(int timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8002724:	f000 ff16 	bl	8003554 <HAL_GetTick>
 8002728:	4603      	mov	r3, r0
 800272a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY() == 0)
 800272c:	e00a      	b.n	8002744 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800272e:	f000 ff11 	bl	8003554 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad2      	subs	r2, r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	d902      	bls.n	8002744 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	e007      	b.n	8002754 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY() == 0)
 8002744:	2102      	movs	r1, #2
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <wait_cmddata_rdy_high+0x40>)
 8002748:	f001 fa30 	bl	8003bac <HAL_GPIO_ReadPin>
 800274c:	4603      	mov	r3, r0
 800274e:	2b01      	cmp	r3, #1
 8002750:	d1ed      	bne.n	800272e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	48001000 	.word	0x48001000

08002760 <wait_cmddata_rdy_rising_event>:


static int wait_cmddata_rdy_rising_event(int timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 8002768:	f000 fef4 	bl	8003554 <HAL_GetTick>
 800276c:	4603      	mov	r3, r0
 800276e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event == 1)
 8002770:	e00a      	b.n	8002788 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8002772:	f000 feef 	bl	8003554 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1ad2      	subs	r2, r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	429a      	cmp	r2, r3
 8002780:	d902      	bls.n	8002788 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8002782:	f04f 33ff 	mov.w	r3, #4294967295
 8002786:	e004      	b.n	8002792 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event == 1)
 8002788:	4b04      	ldr	r3, [pc, #16]	; (800279c <wait_cmddata_rdy_rising_event+0x3c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d0f0      	beq.n	8002772 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8002790:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000920 	.word	0x20000920

080027a0 <wait_spi_rx_event>:


static int wait_spi_rx_event(int timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80027a8:	f000 fed4 	bl	8003554 <HAL_GetTick>
 80027ac:	4603      	mov	r3, r0
 80027ae:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event == 1)
 80027b0:	e00a      	b.n	80027c8 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80027b2:	f000 fecf 	bl	8003554 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1ad2      	subs	r2, r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d902      	bls.n	80027c8 <wait_spi_rx_event+0x28>
    {
      return -1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	e004      	b.n	80027d2 <wait_spi_rx_event+0x32>
  while (spi_rx_event == 1)
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <wait_spi_rx_event+0x3c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d0f0      	beq.n	80027b2 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80027d0:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000918 	.word	0x20000918

080027e0 <wait_spi_tx_event>:


static int wait_spi_tx_event(int timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80027e8:	f000 feb4 	bl	8003554 <HAL_GetTick>
 80027ec:	4603      	mov	r3, r0
 80027ee:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event == 1)
 80027f0:	e00a      	b.n	8002808 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80027f2:	f000 feaf 	bl	8003554 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1ad2      	subs	r2, r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d902      	bls.n	8002808 <wait_spi_tx_event+0x28>
    {
      return -1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e004      	b.n	8002812 <wait_spi_tx_event+0x32>
  while (spi_tx_event == 1)
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <wait_spi_tx_event+0x3c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d0f0      	beq.n	80027f2 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 8002810:	2300      	movs	r3, #0
#endif /* SEM_WAIT */
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	2000091c 	.word	0x2000091c

08002820 <SPI_WIFI_ReceiveData>:


int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	460b      	mov	r3, r1
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];

  WIFI_DISABLE_NSS();
 8002832:	2201      	movs	r2, #1
 8002834:	2101      	movs	r1, #1
 8002836:	4834      	ldr	r0, [pc, #208]	; (8002908 <SPI_WIFI_ReceiveData+0xe8>)
 8002838:	f001 f9d0 	bl	8003bdc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800283c:	2003      	movs	r0, #3
 800283e:	f000 f8e3 	bl	8002a08 <SPI_WIFI_DelayUs>

  if (wait_cmddata_rdy_rising_event(timeout) < 0)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff ff8b 	bl	8002760 <wait_cmddata_rdy_rising_event>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	da02      	bge.n	8002856 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8002850:	f06f 0302 	mvn.w	r3, #2
 8002854:	e054      	b.n	8002900 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8002856:	2200      	movs	r2, #0
 8002858:	2101      	movs	r1, #1
 800285a:	482b      	ldr	r0, [pc, #172]	; (8002908 <SPI_WIFI_ReceiveData+0xe8>)
 800285c:	f001 f9be 	bl	8003bdc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002860:	200f      	movs	r0, #15
 8002862:	f000 f8d1 	bl	8002a08 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 8002866:	e03d      	b.n	80028e4 <SPI_WIFI_ReceiveData+0xc4>
  {
    if ((length < len) || (!len))
 8002868:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800286c:	897b      	ldrh	r3, [r7, #10]
 800286e:	429a      	cmp	r2, r3
 8002870:	db02      	blt.n	8002878 <SPI_WIFI_ReceiveData+0x58>
 8002872:	897b      	ldrh	r3, [r7, #10]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d13c      	bne.n	80028f2 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event = 1;
 8002878:	4b24      	ldr	r3, [pc, #144]	; (800290c <SPI_WIFI_ReceiveData+0xec>)
 800287a:	2201      	movs	r2, #1
 800287c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	2201      	movs	r2, #1
 8002884:	4619      	mov	r1, r3
 8002886:	4822      	ldr	r0, [pc, #136]	; (8002910 <SPI_WIFI_ReceiveData+0xf0>)
 8002888:	f003 fccc 	bl	8006224 <HAL_SPI_Receive_IT>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8002892:	2201      	movs	r2, #1
 8002894:	2101      	movs	r1, #1
 8002896:	481c      	ldr	r0, [pc, #112]	; (8002908 <SPI_WIFI_ReceiveData+0xe8>)
 8002898:	f001 f9a0 	bl	8003bdc <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	e02e      	b.n	8002900 <SPI_WIFI_ReceiveData+0xe0>
      }

      wait_spi_rx_event(timeout);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff7b 	bl	80027a0 <wait_spi_rx_event>

      pData[0] = tmp[0];
 80028aa:	7d3a      	ldrb	r2, [r7, #20]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	3301      	adds	r3, #1
 80028b4:	7d7a      	ldrb	r2, [r7, #21]
 80028b6:	701a      	strb	r2, [r3, #0]
      length += 2;
 80028b8:	8afb      	ldrh	r3, [r7, #22]
 80028ba:	3302      	adds	r3, #2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3302      	adds	r3, #2
 80028c4:	60fb      	str	r3, [r7, #12]

      if (length >= ES_WIFI_DATA_SIZE) {
 80028c6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028ce:	db09      	blt.n	80028e4 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80028d0:	2201      	movs	r2, #1
 80028d2:	2101      	movs	r1, #1
 80028d4:	480c      	ldr	r0, [pc, #48]	; (8002908 <SPI_WIFI_ReceiveData+0xe8>)
 80028d6:	f001 f981 	bl	8003bdc <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80028da:	f7ff fea5 	bl	8002628 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80028de:	f06f 0303 	mvn.w	r3, #3
 80028e2:	e00d      	b.n	8002900 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80028e4:	2102      	movs	r1, #2
 80028e6:	4808      	ldr	r0, [pc, #32]	; (8002908 <SPI_WIFI_ReceiveData+0xe8>)
 80028e8:	f001 f960 	bl	8003bac <HAL_GPIO_ReadPin>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d0ba      	beq.n	8002868 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80028f2:	2201      	movs	r2, #1
 80028f4:	2101      	movs	r1, #1
 80028f6:	4804      	ldr	r0, [pc, #16]	; (8002908 <SPI_WIFI_ReceiveData+0xe8>)
 80028f8:	f001 f970 	bl	8003bdc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80028fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	48001000 	.word	0x48001000
 800290c:	20000918 	.word	0x20000918
 8002910:	200008b4 	.word	0x200008b4

08002914 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata, uint16_t len, uint32_t timeout)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	460b      	mov	r3, r1
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];

  if (wait_cmddata_rdy_high(timeout) < 0)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fef9 	bl	800271c <wait_cmddata_rdy_high>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	da02      	bge.n	8002936 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
 8002934:	e04f      	b.n	80029d6 <SPI_WIFI_SendData+0xc2>
  }

  /* arm to detect rising event */
  cmddata_rdy_rising_event = 1;
 8002936:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <SPI_WIFI_SendData+0xcc>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800293c:	2200      	movs	r2, #0
 800293e:	2101      	movs	r1, #1
 8002940:	4828      	ldr	r0, [pc, #160]	; (80029e4 <SPI_WIFI_SendData+0xd0>)
 8002942:	f001 f94b 	bl	8003bdc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8002946:	200f      	movs	r0, #15
 8002948:	f000 f85e 	bl	8002a08 <SPI_WIFI_DelayUs>
  if (len > 1)
 800294c:	897b      	ldrh	r3, [r7, #10]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d919      	bls.n	8002986 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event = 1;
 8002952:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <SPI_WIFI_SendData+0xd4>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len / 2) != HAL_OK)
 8002958:	897b      	ldrh	r3, [r7, #10]
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	b29b      	uxth	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	68f9      	ldr	r1, [r7, #12]
 8002962:	4822      	ldr	r0, [pc, #136]	; (80029ec <SPI_WIFI_SendData+0xd8>)
 8002964:	f003 fbbe 	bl	80060e4 <HAL_SPI_Transmit_IT>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800296e:	2201      	movs	r2, #1
 8002970:	2101      	movs	r1, #1
 8002972:	481c      	ldr	r0, [pc, #112]	; (80029e4 <SPI_WIFI_SendData+0xd0>)
 8002974:	f001 f932 	bl	8003bdc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
 800297c:	e02b      	b.n	80029d6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff2d 	bl	80027e0 <wait_spi_tx_event>
  }

  if (len & 1)
 8002986:	897b      	ldrh	r3, [r7, #10]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len - 1];
 8002990:	897b      	ldrh	r3, [r7, #10]
 8002992:	3b01      	subs	r3, #1
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4413      	add	r3, r2
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800299c:	230a      	movs	r3, #10
 800299e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <SPI_WIFI_SendData+0xd4>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
    if (HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	2201      	movs	r2, #1
 80029ac:	4619      	mov	r1, r3
 80029ae:	480f      	ldr	r0, [pc, #60]	; (80029ec <SPI_WIFI_SendData+0xd8>)
 80029b0:	f003 fb98 	bl	80060e4 <HAL_SPI_Transmit_IT>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 80029ba:	2201      	movs	r2, #1
 80029bc:	2101      	movs	r1, #1
 80029be:	4809      	ldr	r0, [pc, #36]	; (80029e4 <SPI_WIFI_SendData+0xd0>)
 80029c0:	f001 f90c 	bl	8003bdc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295
 80029c8:	e005      	b.n	80029d6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff07 	bl	80027e0 <wait_spi_tx_event>
  }
  return len;
 80029d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000920 	.word	0x20000920
 80029e4:	48001000 	.word	0x48001000
 80029e8:	2000091c 	.word	0x2000091c
 80029ec:	200008b4 	.word	0x200008b4

080029f0 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fdb7 	bl	800356c <HAL_Delay>
}
 80029fe:	bf00      	nop
 8002a00:	3708      	adds	r7, #8
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0)
 8002a18:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <SPI_WIFI_DelayUs+0x94>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d122      	bne.n	8002a66 <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock / 1000UL);
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <SPI_WIFI_DelayUs+0x98>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1f      	ldr	r2, [pc, #124]	; (8002aa4 <SPI_WIFI_DelayUs+0x9c>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	099b      	lsrs	r3, r3, #6
 8002a2c:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8002a36:	f000 fd8d 	bl	8003554 <HAL_GetTick>
 8002a3a:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8002a3c:	e002      	b.n	8002a44 <SPI_WIFI_DelayUs+0x3c>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f9      	bne.n	8002a3e <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick() - t;
 8002a4a:	f000 fd83 	bl	8003554 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	4a11      	ldr	r2, [pc, #68]	; (8002a9c <SPI_WIFI_DelayUs+0x94>)
 8002a56:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8002a58:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <SPI_WIFI_DelayUs+0x94>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <SPI_WIFI_DelayUs+0x5e>
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <SPI_WIFI_DelayUs+0x94>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <SPI_WIFI_DelayUs+0x98>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a0f      	ldr	r2, [pc, #60]	; (8002aa8 <SPI_WIFI_DelayUs+0xa0>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	0c9a      	lsrs	r2, r3, #18
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <SPI_WIFI_DelayUs+0x94>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8002a86:	e002      	b.n	8002a8e <SPI_WIFI_DelayUs+0x86>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f9      	bne.n	8002a88 <SPI_WIFI_DelayUs+0x80>
  return;
 8002a94:	bf00      	nop
}
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20000924 	.word	0x20000924
 8002aa0:	20000010 	.word	0x20000010
 8002aa4:	10624dd3 	.word	0x10624dd3
 8002aa8:	431bde83 	.word	0x431bde83

08002aac <HAL_SPI_RxCpltCallback>:
  *               the configuration information for the SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_SPI_RxCpltCallback+0x24>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <HAL_SPI_RxCpltCallback+0x24>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000918 	.word	0x20000918

08002ad4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_SPI_TxCpltCallback+0x24>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d002      	beq.n	8002aea <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <HAL_SPI_TxCpltCallback+0x24>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
  }
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	2000091c 	.word	0x2000091c

08002afc <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for CMDDATARDY input signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event == 1)
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <SPI_WIFI_ISR+0x1c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d102      	bne.n	8002b0e <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <SPI_WIFI_ISR+0x1c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
   }
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	20000920 	.word	0x20000920

08002b1c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8002b26:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <WIFI_Init+0x40>)
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <WIFI_Init+0x44>)
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <WIFI_Init+0x48>)
 8002b30:	4a0d      	ldr	r2, [pc, #52]	; (8002b68 <WIFI_Init+0x4c>)
 8002b32:	490e      	ldr	r1, [pc, #56]	; (8002b6c <WIFI_Init+0x50>)
 8002b34:	480e      	ldr	r0, [pc, #56]	; (8002b70 <WIFI_Init+0x54>)
 8002b36:	f7fe ff13 	bl	8001960 <ES_WIFI_RegisterBusIO>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d107      	bne.n	8002b50 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002b40:	480b      	ldr	r0, [pc, #44]	; (8002b70 <WIFI_Init+0x54>)
 8002b42:	f7fe fed9 	bl	80018f8 <ES_WIFI_Init>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8002b50:	79fb      	ldrb	r3, [r7, #7]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	08002821 	.word	0x08002821
 8002b60:	08002915 	.word	0x08002915
 8002b64:	080029f1 	.word	0x080029f1
 8002b68:	08002709 	.word	0x08002709
 8002b6c:	0800256d 	.word	0x0800256d
 8002b70:	20000928 	.word	0x20000928

08002b74 <WIFI_Connect>:
  * @param  Password : Password string
  * @param  ecn : Encryption type
  * @retval Operation status
  */
WIFI_Status_t WIFI_Connect(const char* SSID, const char* Password, WIFI_Ecn_t ecn)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	68f9      	ldr	r1, [r7, #12]
 8002b8c:	4809      	ldr	r0, [pc, #36]	; (8002bb4 <WIFI_Connect+0x40>)
 8002b8e:	f7fe ff1b 	bl	80019c8 <ES_WIFI_Connect>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d107      	bne.n	8002ba8 <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8002b98:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <WIFI_Connect+0x40>)
 8002b9a:	f7fe ffbd 	bl	8001b18 <ES_WIFI_GetNetworkSettings>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8002ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000928 	.word	0x20000928

08002bb8 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00d      	beq.n	8002bea <WIFI_GetMAC_Address+0x32>
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4806      	ldr	r0, [pc, #24]	; (8002bf4 <WIFI_GetMAC_Address+0x3c>)
 8002bdc:	f7fe ffc6 	bl	8001b6c <ES_WIFI_GetMACAddress>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000928 	.word	0x20000928

08002bf8 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (4 <= IpAddrLength))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d010      	beq.n	8002c30 <WIFI_GetIP_Address+0x38>
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d90d      	bls.n	8002c30 <WIFI_GetIP_Address+0x38>
  {
    if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8002c14:	4809      	ldr	r0, [pc, #36]	; (8002c3c <WIFI_GetIP_Address+0x44>)
 8002c16:	f7fe ff4f 	bl	8001ab8 <ES_WIFI_IsConnected>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <WIFI_GetIP_Address+0x38>
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <WIFI_GetIP_Address+0x44>)
 8002c22:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8002c26:	461a      	mov	r2, r3
    {
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000928 	.word	0x20000928

08002c40 <WIFI_StartServer>:
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name,
                               uint16_t port)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08a      	sub	sp, #40	; 0x28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	72fb      	strb	r3, [r7, #11]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 8002c5e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002c60:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8002c62:	7afb      	ldrb	r3, [r7, #11]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8002c70:	893b      	ldrh	r3, [r7, #8]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f887 3020 	strb.w	r3, [r7, #32]

  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8002c78:	f107 0310 	add.w	r3, r7, #16
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4807      	ldr	r0, [pc, #28]	; (8002c9c <WIFI_StartServer+0x5c>)
 8002c80:	f7fe ffaa 	bl	8001bd8 <ES_WIFI_StartServerSingleConn>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8002c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3728      	adds	r7, #40	; 0x28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20000928 	.word	0x20000928

08002ca0 <WIFI_WaitServerConnection>:
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(uint32_t socket,uint32_t Timeout,
                                        uint8_t *RemoteIp, uint8_t RemoteIpAddrLength, uint16_t *RemotePort)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;

  conn.Number = (uint8_t)socket;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj,Timeout,&conn);
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	481c      	ldr	r0, [pc, #112]	; (8002d30 <WIFI_WaitServerConnection+0x90>)
 8002cbe:	f7ff f837 	bl	8001d30 <ES_WIFI_WaitServerConnection>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 8002cc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d112      	bne.n	8002cf6 <WIFI_WaitServerConnection+0x56>
  {
    if (RemotePort)
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <WIFI_WaitServerConnection+0x3c>
    {
      *RemotePort = conn.RemotePort;
 8002cd6:	8a7a      	ldrh	r2, [r7, #18]
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <WIFI_WaitServerConnection+0x52>
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d904      	bls.n	8002cf2 <WIFI_WaitServerConnection+0x52>
 8002ce8:	f8d7 3016 	ldr.w	r3, [r7, #22]
 8002cec:	461a      	mov	r2, r3
    {
      memcpy(RemoteIp, conn.RemoteIP, 4);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e017      	b.n	8002d26 <WIFI_WaitServerConnection+0x86>
  }

  if (ES_WIFI_STATUS_TIMEOUT == ret)
 8002cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d112      	bne.n	8002d24 <WIFI_WaitServerConnection+0x84>
  {
    if (RemotePort)
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <WIFI_WaitServerConnection+0x6a>
    {
      *RemotePort = 0;
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	2200      	movs	r2, #0
 8002d08:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <WIFI_WaitServerConnection+0x80>
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d904      	bls.n	8002d20 <WIFI_WaitServerConnection+0x80>
    {
      memset(RemoteIp, 0, 4);
 8002d16:	2204      	movs	r2, #4
 8002d18:	2100      	movs	r1, #0
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f005 fa7c 	bl	8008218 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 8002d20:	2305      	movs	r3, #5
 8002d22:	e000      	b.n	8002d26 <WIFI_WaitServerConnection+0x86>
  }

  return WIFI_STATUS_ERROR;
 8002d24:	2301      	movs	r3, #1
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3728      	adds	r7, #40	; 0x28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000928 	.word	0x20000928

08002d34 <WIFI_CloseServerConnection>:
  * @brief  Close current connection from a client  to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(uint32_t socket)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]

  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj, (uint8_t)socket))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	4619      	mov	r1, r3
 8002d46:	4806      	ldr	r0, [pc, #24]	; (8002d60 <WIFI_CloseServerConnection+0x2c>)
 8002d48:	f7ff f916 	bl	8001f78 <ES_WIFI_CloseServerConnection>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <WIFI_CloseServerConnection+0x22>
  {
    ret = WIFI_STATUS_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000928 	.word	0x20000928

08002d64 <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]

  if(ES_WIFI_StopServerSingleConn(&EsWifiObj, (uint8_t)socket)== ES_WIFI_STATUS_OK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	4619      	mov	r1, r3
 8002d76:	4806      	ldr	r0, [pc, #24]	; (8002d90 <WIFI_StopServer+0x2c>)
 8002d78:	f7ff f95e 	bl	8002038 <ES_WIFI_StopServerSingleConn>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <WIFI_StopServer+0x22>
  {
    ret = WIFI_STATUS_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000928 	.word	0x20000928

08002d94 <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	b2d9      	uxtb	r1, r3
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	4613      	mov	r3, r2
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	4806      	ldr	r0, [pc, #24]	; (8002dd4 <WIFI_SendData+0x40>)
 8002dbc:	f7ff f99e 	bl	80020fc <ES_WIFI_SendData>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000928 	.word	0x20000928

08002dd8 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	603b      	str	r3, [r7, #0]
 8002de4:	4613      	mov	r3, r2
 8002de6:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	b2d9      	uxtb	r1, r3
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	9301      	str	r3, [sp, #4]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	4806      	ldr	r0, [pc, #24]	; (8002e18 <WIFI_ReceiveData+0x40>)
 8002e00:	f7ff fa38 	bl	8002274 <ES_WIFI_ReceiveData>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000928 	.word	0x20000928

08002e1c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	6039      	str	r1, [r7, #0]
 8002e26:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2120      	movs	r1, #32
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 faba 	bl	80033a8 <SENSOR_IO_Read>
 8002e34:	4603      	mov	r3, r0
 8002e36:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	f023 0304 	bic.w	r3, r3, #4
 8002e3e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	f043 0304 	orr.w	r3, r3, #4
 8002e46:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
 8002e5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	2120      	movs	r1, #32
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fa83 	bl	8003374 <SENSOR_IO_Write>
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b088      	sub	sp, #32
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	b2d8      	uxtb	r0, r3
 8002e84:	f107 0208 	add.w	r2, r7, #8
 8002e88:	2302      	movs	r3, #2
 8002e8a:	21b2      	movs	r1, #178	; 0xb2
 8002e8c:	f000 faaa 	bl	80033e4 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2135      	movs	r1, #53	; 0x35
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 fa86 	bl	80033a8 <SENSOR_IO_Read>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002ea0:	7ffb      	ldrb	r3, [r7, #31]
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	b21b      	sxth	r3, r3
 8002ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eaa:	b21a      	sxth	r2, r3
 8002eac:	7a3b      	ldrb	r3, [r7, #8]
 8002eae:	b21b      	sxth	r3, r3
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002eb4:	7ffb      	ldrb	r3, [r7, #31]
 8002eb6:	019b      	lsls	r3, r3, #6
 8002eb8:	b21b      	sxth	r3, r3
 8002eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	7a7b      	ldrb	r3, [r7, #9]
 8002ec2:	b21b      	sxth	r3, r3
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002ec8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002ecc:	10db      	asrs	r3, r3, #3
 8002ece:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002ed0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ed4:	10db      	asrs	r3, r3, #3
 8002ed6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	b2d8      	uxtb	r0, r3
 8002edc:	f107 0208 	add.w	r2, r7, #8
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	21bc      	movs	r1, #188	; 0xbc
 8002ee4:	f000 fa7e 	bl	80033e4 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002ee8:	7a7b      	ldrb	r3, [r7, #9]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	b21a      	sxth	r2, r3
 8002eee:	7a3b      	ldrb	r3, [r7, #8]
 8002ef0:	b21b      	sxth	r3, r3
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	b21a      	sxth	r2, r3
 8002efc:	7abb      	ldrb	r3, [r7, #10]
 8002efe:	b21b      	sxth	r3, r3
 8002f00:	4313      	orrs	r3, r2
 8002f02:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	b2d8      	uxtb	r0, r3
 8002f08:	f107 0208 	add.w	r2, r7, #8
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	21aa      	movs	r1, #170	; 0xaa
 8002f10:	f000 fa68 	bl	80033e4 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002f14:	7a7b      	ldrb	r3, [r7, #9]
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	b21a      	sxth	r2, r3
 8002f1a:	7a3b      	ldrb	r3, [r7, #8]
 8002f1c:	b21b      	sxth	r3, r3
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002f22:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002f26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	ee07 3a90 	vmov	s15, r3
 8002f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f38:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f46:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002f4a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002f4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	ee07 3a90 	vmov	s15, r3
 8002f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f60:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002f64:	ee07 3a90 	vmov	s15, r3
 8002f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f70:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	ee07 3a90 	vmov	s15, r3
}
 8002f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7e:	3720      	adds	r7, #32
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <SystemInit+0x64>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	4a16      	ldr	r2, [pc, #88]	; (8002fe8 <SystemInit+0x64>)
 8002f90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <SystemInit+0x68>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a13      	ldr	r2, [pc, #76]	; (8002fec <SystemInit+0x68>)
 8002f9e:	f043 0301 	orr.w	r3, r3, #1
 8002fa2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <SystemInit+0x68>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <SystemInit+0x68>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a0f      	ldr	r2, [pc, #60]	; (8002fec <SystemInit+0x68>)
 8002fb0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002fb4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002fb8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <SystemInit+0x68>)
 8002fbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fc0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <SystemInit+0x68>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <SystemInit+0x68>)
 8002fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fcc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002fce:	4b07      	ldr	r3, [pc, #28]	; (8002fec <SystemInit+0x68>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <SystemInit+0x64>)
 8002fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fda:	609a      	str	r2, [r3, #8]
#endif
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000ed00 	.word	0xe000ed00
 8002fec:	40021000 	.word	0x40021000

08002ff0 <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10b      	bne.n	8003018 <BSP_LED_Init+0x28>
 8003000:	4b11      	ldr	r3, [pc, #68]	; (8003048 <BSP_LED_Init+0x58>)
 8003002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003004:	4a10      	ldr	r2, [pc, #64]	; (8003048 <BSP_LED_Init+0x58>)
 8003006:	f043 0302 	orr.w	r3, r3, #2
 800300a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <BSP_LED_Init+0x58>)
 800300e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8003018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800301c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800301e:	2301      	movs	r3, #1
 8003020:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003026:	2302      	movs	r3, #2
 8003028:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	4a07      	ldr	r2, [pc, #28]	; (800304c <BSP_LED_Init+0x5c>)
 800302e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003032:	f107 020c 	add.w	r2, r7, #12
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fc0d 	bl	8003858 <HAL_GPIO_Init>
}
 800303e:	bf00      	nop
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	20000014 	.word	0x20000014

08003050 <BSP_LED_On>:
  * @param  Led  LED to be set on 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	4a06      	ldr	r2, [pc, #24]	; (8003078 <BSP_LED_On+0x28>)
 800305e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003062:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003066:	b291      	uxth	r1, r2
 8003068:	2201      	movs	r2, #1
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fdb6 	bl	8003bdc <HAL_GPIO_WritePin>
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000014 	.word	0x20000014

0800307c <BSP_LED_Off>:
  * @param  Led  LED to be set off
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	4a06      	ldr	r2, [pc, #24]	; (80030a4 <BSP_LED_Off+0x28>)
 800308a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003092:	b291      	uxth	r1, r2
 8003094:	2200      	movs	r2, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fda0 	bl	8003bdc <HAL_GPIO_WritePin>
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000014 	.word	0x20000014

080030a8 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	6039      	str	r1, [r7, #0]
 80030b2:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10b      	bne.n	80030d2 <BSP_COM_Init+0x2a>
 80030ba:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <BSP_COM_Init+0xc8>)
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	4a2c      	ldr	r2, [pc, #176]	; (8003170 <BSP_COM_Init+0xc8>)
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030c6:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <BSP_COM_Init+0xc8>)
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <BSP_COM_Init+0x48>
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <BSP_COM_Init+0xc8>)
 80030da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030dc:	4a24      	ldr	r2, [pc, #144]	; (8003170 <BSP_COM_Init+0xc8>)
 80030de:	f043 0302 	orr.w	r3, r3, #2
 80030e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030e4:	4b22      	ldr	r3, [pc, #136]	; (8003170 <BSP_COM_Init+0xc8>)
 80030e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10b      	bne.n	800310e <BSP_COM_Init+0x66>
 80030f6:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <BSP_COM_Init+0xc8>)
 80030f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fa:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <BSP_COM_Init+0xc8>)
 80030fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003100:	6613      	str	r3, [r2, #96]	; 0x60
 8003102:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <BSP_COM_Init+0xc8>)
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 800310e:	2340      	movs	r3, #64	; 0x40
 8003110:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003116:	2302      	movs	r3, #2
 8003118:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800311e:	2307      	movs	r3, #7
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	4a13      	ldr	r2, [pc, #76]	; (8003174 <BSP_COM_Init+0xcc>)
 8003126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800312a:	f107 0214 	add.w	r2, r7, #20
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fb91 	bl	8003858 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 800313e:	2307      	movs	r3, #7
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <BSP_COM_Init+0xd0>)
 8003146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800314a:	f107 0214 	add.w	r2, r7, #20
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fb81 	bl	8003858 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	4a08      	ldr	r2, [pc, #32]	; (800317c <BSP_COM_Init+0xd4>)
 800315a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8003162:	6838      	ldr	r0, [r7, #0]
 8003164:	f004 f881 	bl	800726a <HAL_UART_Init>
}
 8003168:	bf00      	nop
 800316a:	3728      	adds	r7, #40	; 0x28
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	2000001c 	.word	0x2000001c
 8003178:	20000020 	.word	0x20000020
 800317c:	20000018 	.word	0x20000018

08003180 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003188:	4b27      	ldr	r3, [pc, #156]	; (8003228 <I2Cx_MspInit+0xa8>)
 800318a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318c:	4a26      	ldr	r2, [pc, #152]	; (8003228 <I2Cx_MspInit+0xa8>)
 800318e:	f043 0302 	orr.w	r3, r3, #2
 8003192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003194:	4b24      	ldr	r3, [pc, #144]	; (8003228 <I2Cx_MspInit+0xa8>)
 8003196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80031a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031a4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80031a6:	2312      	movs	r3, #18
 80031a8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80031aa:	2301      	movs	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ae:	2303      	movs	r3, #3
 80031b0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80031b2:	2304      	movs	r3, #4
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80031b6:	f107 0314 	add.w	r3, r7, #20
 80031ba:	4619      	mov	r1, r3
 80031bc:	481b      	ldr	r0, [pc, #108]	; (800322c <I2Cx_MspInit+0xac>)
 80031be:	f000 fb4b 	bl	8003858 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80031c2:	f107 0314 	add.w	r3, r7, #20
 80031c6:	4619      	mov	r1, r3
 80031c8:	4818      	ldr	r0, [pc, #96]	; (800322c <I2Cx_MspInit+0xac>)
 80031ca:	f000 fb45 	bl	8003858 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80031ce:	4b16      	ldr	r3, [pc, #88]	; (8003228 <I2Cx_MspInit+0xa8>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	4a15      	ldr	r2, [pc, #84]	; (8003228 <I2Cx_MspInit+0xa8>)
 80031d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031d8:	6593      	str	r3, [r2, #88]	; 0x58
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <I2Cx_MspInit+0xa8>)
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <I2Cx_MspInit+0xa8>)
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	4a0f      	ldr	r2, [pc, #60]	; (8003228 <I2Cx_MspInit+0xa8>)
 80031ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031f0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <I2Cx_MspInit+0xa8>)
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <I2Cx_MspInit+0xa8>)
 80031f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80031fc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80031fe:	2200      	movs	r2, #0
 8003200:	210f      	movs	r1, #15
 8003202:	2021      	movs	r0, #33	; 0x21
 8003204:	f000 fab1 	bl	800376a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003208:	2021      	movs	r0, #33	; 0x21
 800320a:	f000 faca 	bl	80037a2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	210f      	movs	r1, #15
 8003212:	2022      	movs	r0, #34	; 0x22
 8003214:	f000 faa9 	bl	800376a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003218:	2022      	movs	r0, #34	; 0x22
 800321a:	f000 fac2 	bl	80037a2 <HAL_NVIC_EnableIRQ>
}
 800321e:	bf00      	nop
 8003220:	3728      	adds	r7, #40	; 0x28
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40021000 	.word	0x40021000
 800322c:	48000400 	.word	0x48000400

08003230 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a12      	ldr	r2, [pc, #72]	; (8003284 <I2Cx_Init+0x54>)
 800323c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a11      	ldr	r2, [pc, #68]	; (8003288 <I2Cx_Init+0x58>)
 8003242:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff89 	bl	8003180 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fce4 	bl	8003c3c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003274:	2100      	movs	r1, #0
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f001 faa4 	bl	80047c4 <HAL_I2CEx_ConfigAnalogFilter>
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40005800 	.word	0x40005800
 8003288:	00702681 	.word	0x00702681

0800328c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af04      	add	r7, sp, #16
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	4608      	mov	r0, r1
 8003296:	4611      	mov	r1, r2
 8003298:	461a      	mov	r2, r3
 800329a:	4603      	mov	r3, r0
 800329c:	72fb      	strb	r3, [r7, #11]
 800329e:	460b      	mov	r3, r1
 80032a0:	813b      	strh	r3, [r7, #8]
 80032a2:	4613      	mov	r3, r2
 80032a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80032aa:	7afb      	ldrb	r3, [r7, #11]
 80032ac:	b299      	uxth	r1, r3
 80032ae:	88f8      	ldrh	r0, [r7, #6]
 80032b0:	893a      	ldrh	r2, [r7, #8]
 80032b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b6:	9302      	str	r3, [sp, #8]
 80032b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	4603      	mov	r3, r0
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 feac 	bl	8004020 <HAL_I2C_Mem_Read>
 80032c8:	4603      	mov	r3, r0
 80032ca:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d004      	beq.n	80032dc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80032d2:	7afb      	ldrb	r3, [r7, #11]
 80032d4:	4619      	mov	r1, r3
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f832 	bl	8003340 <I2Cx_Error>
  }
  return status;
 80032dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b08a      	sub	sp, #40	; 0x28
 80032ea:	af04      	add	r7, sp, #16
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	4608      	mov	r0, r1
 80032f0:	4611      	mov	r1, r2
 80032f2:	461a      	mov	r2, r3
 80032f4:	4603      	mov	r3, r0
 80032f6:	72fb      	strb	r3, [r7, #11]
 80032f8:	460b      	mov	r3, r1
 80032fa:	813b      	strh	r3, [r7, #8]
 80032fc:	4613      	mov	r3, r2
 80032fe:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003304:	7afb      	ldrb	r3, [r7, #11]
 8003306:	b299      	uxth	r1, r3
 8003308:	88f8      	ldrh	r0, [r7, #6]
 800330a:	893a      	ldrh	r2, [r7, #8]
 800330c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003310:	9302      	str	r3, [sp, #8]
 8003312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	4603      	mov	r3, r0
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 fd6b 	bl	8003df8 <HAL_I2C_Mem_Write>
 8003322:	4603      	mov	r3, r0
 8003324:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003326:	7dfb      	ldrb	r3, [r7, #23]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d004      	beq.n	8003336 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800332c:	7afb      	ldrb	r3, [r7, #11]
 800332e:	4619      	mov	r1, r3
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f805 	bl	8003340 <I2Cx_Error>
  }
  return status;
 8003336:	7dfb      	ldrb	r3, [r7, #23]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fd10 	bl	8003d72 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff ff6c 	bl	8003230 <I2Cx_Init>
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003364:	4802      	ldr	r0, [pc, #8]	; (8003370 <SENSOR_IO_Init+0x10>)
 8003366:	f7ff ff63 	bl	8003230 <I2Cx_Init>
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20001228 	.word	0x20001228

08003374 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af02      	add	r7, sp, #8
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
 800337e:	460b      	mov	r3, r1
 8003380:	71bb      	strb	r3, [r7, #6]
 8003382:	4613      	mov	r3, r2
 8003384:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003386:	79bb      	ldrb	r3, [r7, #6]
 8003388:	b29a      	uxth	r2, r3
 800338a:	79f9      	ldrb	r1, [r7, #7]
 800338c:	2301      	movs	r3, #1
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	1d7b      	adds	r3, r7, #5
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2301      	movs	r3, #1
 8003396:	4803      	ldr	r0, [pc, #12]	; (80033a4 <SENSOR_IO_Write+0x30>)
 8003398:	f7ff ffa5 	bl	80032e6 <I2Cx_WriteMultiple>
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20001228 	.word	0x20001228

080033a8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	4603      	mov	r3, r0
 80033b0:	460a      	mov	r2, r1
 80033b2:	71fb      	strb	r3, [r7, #7]
 80033b4:	4613      	mov	r3, r2
 80033b6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80033bc:	79bb      	ldrb	r3, [r7, #6]
 80033be:	b29a      	uxth	r2, r3
 80033c0:	79f9      	ldrb	r1, [r7, #7]
 80033c2:	2301      	movs	r3, #1
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	f107 030f 	add.w	r3, r7, #15
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2301      	movs	r3, #1
 80033ce:	4804      	ldr	r0, [pc, #16]	; (80033e0 <SENSOR_IO_Read+0x38>)
 80033d0:	f7ff ff5c 	bl	800328c <I2Cx_ReadMultiple>

  return read_value;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20001228 	.word	0x20001228

080033e4 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	603a      	str	r2, [r7, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
 80033f2:	460b      	mov	r3, r1
 80033f4:	71bb      	strb	r3, [r7, #6]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80033fa:	79bb      	ldrb	r3, [r7, #6]
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	79f9      	ldrb	r1, [r7, #7]
 8003400:	88bb      	ldrh	r3, [r7, #4]
 8003402:	9301      	str	r3, [sp, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	2301      	movs	r3, #1
 800340a:	4804      	ldr	r0, [pc, #16]	; (800341c <SENSOR_IO_ReadMultiple+0x38>)
 800340c:	f7ff ff3e 	bl	800328c <I2Cx_ReadMultiple>
 8003410:	4603      	mov	r3, r0
 8003412:	b29b      	uxth	r3, r3
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20001228 	.word	0x20001228

08003420 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <BSP_TSENSOR_Init+0x30>)
 800342c:	4a09      	ldr	r2, [pc, #36]	; (8003454 <BSP_TSENSOR_Init+0x34>)
 800342e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003430:	f7ff ff96 	bl	8003360 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <BSP_TSENSOR_Init+0x30>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2100      	movs	r1, #0
 800343c:	20be      	movs	r0, #190	; 0xbe
 800343e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003444:	79fb      	ldrb	r3, [r7, #7]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20001304 	.word	0x20001304
 8003454:	20000000 	.word	0x20000000

08003458 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800345c:	4b04      	ldr	r3, [pc, #16]	; (8003470 <BSP_TSENSOR_ReadTemp+0x18>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	20be      	movs	r0, #190	; 0xbe
 8003464:	4798      	blx	r3
 8003466:	eef0 7a40 	vmov.f32	s15, s0
}
 800346a:	eeb0 0a67 	vmov.f32	s0, s15
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20001304 	.word	0x20001304

08003474 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800347e:	2003      	movs	r0, #3
 8003480:	f000 f968 	bl	8003754 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003484:	200f      	movs	r0, #15
 8003486:	f000 f815 	bl	80034b4 <HAL_InitTick>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	71fb      	strb	r3, [r7, #7]
 8003494:	e001      	b.n	800349a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003496:	f000 f805 	bl	80034a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800349a:	79fb      	ldrb	r3, [r7, #7]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <HAL_InitTick+0x6c>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d023      	beq.n	8003510 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034c8:	4b16      	ldr	r3, [pc, #88]	; (8003524 <HAL_InitTick+0x70>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <HAL_InitTick+0x6c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4619      	mov	r1, r3
 80034d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f96d 	bl	80037be <HAL_SYSTICK_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10f      	bne.n	800350a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b0f      	cmp	r3, #15
 80034ee:	d809      	bhi.n	8003504 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f0:	2200      	movs	r2, #0
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295
 80034f8:	f000 f937 	bl	800376a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034fc:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <HAL_InitTick+0x74>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e007      	b.n	8003514 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
 8003508:	e004      	b.n	8003514 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	e001      	b.n	8003514 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000028 	.word	0x20000028
 8003524:	20000010 	.word	0x20000010
 8003528:	20000024 	.word	0x20000024

0800352c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_IncTick+0x20>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_IncTick+0x24>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4413      	add	r3, r2
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <HAL_IncTick+0x24>)
 800353e:	6013      	str	r3, [r2, #0]
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000028 	.word	0x20000028
 8003550:	20001308 	.word	0x20001308

08003554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return uwTick;
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <HAL_GetTick+0x14>)
 800355a:	681b      	ldr	r3, [r3, #0]
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20001308 	.word	0x20001308

0800356c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003574:	f7ff ffee 	bl	8003554 <HAL_GetTick>
 8003578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d005      	beq.n	8003592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003586:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_Delay+0x44>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003592:	bf00      	nop
 8003594:	f7ff ffde 	bl	8003554 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d8f7      	bhi.n	8003594 <HAL_Delay+0x28>
  {
  }
}
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000028 	.word	0x20000028

080035b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <__NVIC_SetPriorityGrouping+0x44>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035d0:	4013      	ands	r3, r2
 80035d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035e6:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <__NVIC_SetPriorityGrouping+0x44>)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	60d3      	str	r3, [r2, #12]
}
 80035ec:	bf00      	nop
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <__NVIC_GetPriorityGrouping+0x18>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	0a1b      	lsrs	r3, r3, #8
 8003606:	f003 0307 	and.w	r3, r3, #7
}
 800360a:	4618      	mov	r0, r3
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000ed00 	.word	0xe000ed00

08003618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	2b00      	cmp	r3, #0
 8003628:	db0b      	blt.n	8003642 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	f003 021f 	and.w	r2, r3, #31
 8003630:	4907      	ldr	r1, [pc, #28]	; (8003650 <__NVIC_EnableIRQ+0x38>)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	2001      	movs	r0, #1
 800363a:	fa00 f202 	lsl.w	r2, r0, r2
 800363e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	e000e100 	.word	0xe000e100

08003654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	6039      	str	r1, [r7, #0]
 800365e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003664:	2b00      	cmp	r3, #0
 8003666:	db0a      	blt.n	800367e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	490c      	ldr	r1, [pc, #48]	; (80036a0 <__NVIC_SetPriority+0x4c>)
 800366e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003672:	0112      	lsls	r2, r2, #4
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	440b      	add	r3, r1
 8003678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800367c:	e00a      	b.n	8003694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	4908      	ldr	r1, [pc, #32]	; (80036a4 <__NVIC_SetPriority+0x50>)
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	3b04      	subs	r3, #4
 800368c:	0112      	lsls	r2, r2, #4
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	440b      	add	r3, r1
 8003692:	761a      	strb	r2, [r3, #24]
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	e000e100 	.word	0xe000e100
 80036a4:	e000ed00 	.word	0xe000ed00

080036a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b089      	sub	sp, #36	; 0x24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f1c3 0307 	rsb	r3, r3, #7
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	bf28      	it	cs
 80036c6:	2304      	movcs	r3, #4
 80036c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3304      	adds	r3, #4
 80036ce:	2b06      	cmp	r3, #6
 80036d0:	d902      	bls.n	80036d8 <NVIC_EncodePriority+0x30>
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	3b03      	subs	r3, #3
 80036d6:	e000      	b.n	80036da <NVIC_EncodePriority+0x32>
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036dc:	f04f 32ff 	mov.w	r2, #4294967295
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43da      	mvns	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	401a      	ands	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036f0:	f04f 31ff 	mov.w	r1, #4294967295
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	fa01 f303 	lsl.w	r3, r1, r3
 80036fa:	43d9      	mvns	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003700:	4313      	orrs	r3, r2
         );
}
 8003702:	4618      	mov	r0, r3
 8003704:	3724      	adds	r7, #36	; 0x24
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
	...

08003710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3b01      	subs	r3, #1
 800371c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003720:	d301      	bcc.n	8003726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003722:	2301      	movs	r3, #1
 8003724:	e00f      	b.n	8003746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <SysTick_Config+0x40>)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800372e:	210f      	movs	r1, #15
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	f7ff ff8e 	bl	8003654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <SysTick_Config+0x40>)
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800373e:	4b04      	ldr	r3, [pc, #16]	; (8003750 <SysTick_Config+0x40>)
 8003740:	2207      	movs	r2, #7
 8003742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	e000e010 	.word	0xe000e010

08003754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ff29 	bl	80035b4 <__NVIC_SetPriorityGrouping>
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800377c:	f7ff ff3e 	bl	80035fc <__NVIC_GetPriorityGrouping>
 8003780:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	6978      	ldr	r0, [r7, #20]
 8003788:	f7ff ff8e 	bl	80036a8 <NVIC_EncodePriority>
 800378c:	4602      	mov	r2, r0
 800378e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff ff5d 	bl	8003654 <__NVIC_SetPriority>
}
 800379a:	bf00      	nop
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	4603      	mov	r3, r0
 80037aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff31 	bl	8003618 <__NVIC_EnableIRQ>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ffa2 	bl	8003710 <SysTick_Config>
 80037cc:	4603      	mov	r3, r0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d005      	beq.n	80037fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
 80037f8:	e029      	b.n	800384e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 020e 	bic.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381e:	f003 021c 	and.w	r2, r3, #28
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	2101      	movs	r1, #1
 8003828:	fa01 f202 	lsl.w	r2, r1, r2
 800382c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	4798      	blx	r3
    }
  }
  return status;
 800384e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003866:	e17f      	b.n	8003b68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	2101      	movs	r1, #1
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	fa01 f303 	lsl.w	r3, r1, r3
 8003874:	4013      	ands	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8171 	beq.w	8003b62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	2b01      	cmp	r3, #1
 800388a:	d005      	beq.n	8003898 <HAL_GPIO_Init+0x40>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d130      	bne.n	80038fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038ce:	2201      	movs	r2, #1
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	f003 0201 	and.w	r2, r3, #1
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b03      	cmp	r3, #3
 8003904:	d118      	bne.n	8003938 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800390c:	2201      	movs	r2, #1
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	08db      	lsrs	r3, r3, #3
 8003922:	f003 0201 	and.w	r2, r3, #1
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	2b03      	cmp	r3, #3
 8003942:	d017      	beq.n	8003974 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	2203      	movs	r2, #3
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43db      	mvns	r3, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4013      	ands	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d123      	bne.n	80039c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	08da      	lsrs	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3208      	adds	r2, #8
 8003988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	220f      	movs	r2, #15
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	43db      	mvns	r3, r3
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	691a      	ldr	r2, [r3, #16]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	08da      	lsrs	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3208      	adds	r2, #8
 80039c2:	6939      	ldr	r1, [r7, #16]
 80039c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	2203      	movs	r2, #3
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f003 0203 	and.w	r2, r3, #3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80ac 	beq.w	8003b62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0a:	4b5f      	ldr	r3, [pc, #380]	; (8003b88 <HAL_GPIO_Init+0x330>)
 8003a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0e:	4a5e      	ldr	r2, [pc, #376]	; (8003b88 <HAL_GPIO_Init+0x330>)
 8003a10:	f043 0301 	orr.w	r3, r3, #1
 8003a14:	6613      	str	r3, [r2, #96]	; 0x60
 8003a16:	4b5c      	ldr	r3, [pc, #368]	; (8003b88 <HAL_GPIO_Init+0x330>)
 8003a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a22:	4a5a      	ldr	r2, [pc, #360]	; (8003b8c <HAL_GPIO_Init+0x334>)
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	089b      	lsrs	r3, r3, #2
 8003a28:	3302      	adds	r3, #2
 8003a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f003 0303 	and.w	r3, r3, #3
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	220f      	movs	r2, #15
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a4c:	d025      	beq.n	8003a9a <HAL_GPIO_Init+0x242>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4f      	ldr	r2, [pc, #316]	; (8003b90 <HAL_GPIO_Init+0x338>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d01f      	beq.n	8003a96 <HAL_GPIO_Init+0x23e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a4e      	ldr	r2, [pc, #312]	; (8003b94 <HAL_GPIO_Init+0x33c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d019      	beq.n	8003a92 <HAL_GPIO_Init+0x23a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a4d      	ldr	r2, [pc, #308]	; (8003b98 <HAL_GPIO_Init+0x340>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <HAL_GPIO_Init+0x236>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a4c      	ldr	r2, [pc, #304]	; (8003b9c <HAL_GPIO_Init+0x344>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00d      	beq.n	8003a8a <HAL_GPIO_Init+0x232>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a4b      	ldr	r2, [pc, #300]	; (8003ba0 <HAL_GPIO_Init+0x348>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d007      	beq.n	8003a86 <HAL_GPIO_Init+0x22e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4a      	ldr	r2, [pc, #296]	; (8003ba4 <HAL_GPIO_Init+0x34c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <HAL_GPIO_Init+0x22a>
 8003a7e:	2306      	movs	r3, #6
 8003a80:	e00c      	b.n	8003a9c <HAL_GPIO_Init+0x244>
 8003a82:	2307      	movs	r3, #7
 8003a84:	e00a      	b.n	8003a9c <HAL_GPIO_Init+0x244>
 8003a86:	2305      	movs	r3, #5
 8003a88:	e008      	b.n	8003a9c <HAL_GPIO_Init+0x244>
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	e006      	b.n	8003a9c <HAL_GPIO_Init+0x244>
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e004      	b.n	8003a9c <HAL_GPIO_Init+0x244>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e002      	b.n	8003a9c <HAL_GPIO_Init+0x244>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_GPIO_Init+0x244>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	f002 0203 	and.w	r2, r2, #3
 8003aa2:	0092      	lsls	r2, r2, #2
 8003aa4:	4093      	lsls	r3, r2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aac:	4937      	ldr	r1, [pc, #220]	; (8003b8c <HAL_GPIO_Init+0x334>)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_GPIO_Init+0x350>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ade:	4a32      	ldr	r2, [pc, #200]	; (8003ba8 <HAL_GPIO_Init+0x350>)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ae4:	4b30      	ldr	r3, [pc, #192]	; (8003ba8 <HAL_GPIO_Init+0x350>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b08:	4a27      	ldr	r2, [pc, #156]	; (8003ba8 <HAL_GPIO_Init+0x350>)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b0e:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <HAL_GPIO_Init+0x350>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	43db      	mvns	r3, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b32:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <HAL_GPIO_Init+0x350>)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b38:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <HAL_GPIO_Init+0x350>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b5c:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <HAL_GPIO_Init+0x350>)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	3301      	adds	r3, #1
 8003b66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f47f ae78 	bne.w	8003868 <HAL_GPIO_Init+0x10>
  }
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40010000 	.word	0x40010000
 8003b90:	48000400 	.word	0x48000400
 8003b94:	48000800 	.word	0x48000800
 8003b98:	48000c00 	.word	0x48000c00
 8003b9c:	48001000 	.word	0x48001000
 8003ba0:	48001400 	.word	0x48001400
 8003ba4:	48001800 	.word	0x48001800
 8003ba8:	40010400 	.word	0x40010400

08003bac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	887b      	ldrh	r3, [r7, #2]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
 8003bc8:	e001      	b.n	8003bce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	807b      	strh	r3, [r7, #2]
 8003be8:	4613      	mov	r3, r2
 8003bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bec:	787b      	ldrb	r3, [r7, #1]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bf2:	887a      	ldrh	r2, [r7, #2]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bf8:	e002      	b.n	8003c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c16:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d006      	beq.n	8003c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c22:	4a05      	ldr	r2, [pc, #20]	; (8003c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fd f952 	bl	8000ed4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40010400 	.word	0x40010400

08003c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e08d      	b.n	8003d6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f8b4 	bl	8003dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2224      	movs	r2, #36	; 0x24
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0201 	bic.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	e006      	b.n	8003cc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d108      	bne.n	8003cde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cda:	605a      	str	r2, [r3, #4]
 8003cdc:	e007      	b.n	8003cee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69d9      	ldr	r1, [r3, #28]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1a      	ldr	r2, [r3, #32]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d101      	bne.n	8003d84 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e021      	b.n	8003dc8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2224      	movs	r2, #36	; 0x24
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f821 	bl	8003de4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	461a      	mov	r2, r3
 8003e06:	4603      	mov	r3, r0
 8003e08:	817b      	strh	r3, [r7, #10]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	813b      	strh	r3, [r7, #8]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b20      	cmp	r3, #32
 8003e1c:	f040 80f9 	bne.w	8004012 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_I2C_Mem_Write+0x34>
 8003e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d105      	bne.n	8003e38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0ed      	b.n	8004014 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_I2C_Mem_Write+0x4e>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e0e6      	b.n	8004014 <HAL_I2C_Mem_Write+0x21c>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e4e:	f7ff fb81 	bl	8003554 <HAL_GetTick>
 8003e52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2319      	movs	r3, #25
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fac3 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0d1      	b.n	8004014 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2221      	movs	r2, #33	; 0x21
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2240      	movs	r2, #64	; 0x40
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e98:	88f8      	ldrh	r0, [r7, #6]
 8003e9a:	893a      	ldrh	r2, [r7, #8]
 8003e9c:	8979      	ldrh	r1, [r7, #10]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f9d3 	bl	8004254 <I2C_RequestMemoryWrite>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0a9      	b.n	8004014 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2bff      	cmp	r3, #255	; 0xff
 8003ec8:	d90e      	bls.n	8003ee8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	22ff      	movs	r2, #255	; 0xff
 8003ece:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	b2da      	uxtb	r2, r3
 8003ed6:	8979      	ldrh	r1, [r7, #10]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fc3d 	bl	8004760 <I2C_TransferConfig>
 8003ee6:	e00f      	b.n	8003f08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	8979      	ldrh	r1, [r7, #10]
 8003efa:	2300      	movs	r3, #0
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fc2c 	bl	8004760 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 fabc 	bl	800448a <I2C_WaitOnTXISFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e07b      	b.n	8004014 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d034      	beq.n	8003fc0 <HAL_I2C_Mem_Write+0x1c8>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d130      	bne.n	8003fc0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	2200      	movs	r2, #0
 8003f66:	2180      	movs	r1, #128	; 0x80
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fa3f 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e04d      	b.n	8004014 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2bff      	cmp	r3, #255	; 0xff
 8003f80:	d90e      	bls.n	8003fa0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	22ff      	movs	r2, #255	; 0xff
 8003f86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	8979      	ldrh	r1, [r7, #10]
 8003f90:	2300      	movs	r3, #0
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fbe1 	bl	8004760 <I2C_TransferConfig>
 8003f9e:	e00f      	b.n	8003fc0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	8979      	ldrh	r1, [r7, #10]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f000 fbd0 	bl	8004760 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d19e      	bne.n	8003f08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 faa2 	bl	8004518 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e01a      	b.n	8004014 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4b0a      	ldr	r3, [pc, #40]	; (800401c <HAL_I2C_Mem_Write+0x224>)
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	e000      	b.n	8004014 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004012:	2302      	movs	r3, #2
  }
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	fe00e800 	.word	0xfe00e800

08004020 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b088      	sub	sp, #32
 8004024:	af02      	add	r7, sp, #8
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	4608      	mov	r0, r1
 800402a:	4611      	mov	r1, r2
 800402c:	461a      	mov	r2, r3
 800402e:	4603      	mov	r3, r0
 8004030:	817b      	strh	r3, [r7, #10]
 8004032:	460b      	mov	r3, r1
 8004034:	813b      	strh	r3, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b20      	cmp	r3, #32
 8004044:	f040 80fd 	bne.w	8004242 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_I2C_Mem_Read+0x34>
 800404e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800405a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0f1      	b.n	8004244 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_I2C_Mem_Read+0x4e>
 800406a:	2302      	movs	r3, #2
 800406c:	e0ea      	b.n	8004244 <HAL_I2C_Mem_Read+0x224>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004076:	f7ff fa6d 	bl	8003554 <HAL_GetTick>
 800407a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2319      	movs	r3, #25
 8004082:	2201      	movs	r2, #1
 8004084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f9af 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0d5      	b.n	8004244 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2222      	movs	r2, #34	; 0x22
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2240      	movs	r2, #64	; 0x40
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a3a      	ldr	r2, [r7, #32]
 80040b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040c0:	88f8      	ldrh	r0, [r7, #6]
 80040c2:	893a      	ldrh	r2, [r7, #8]
 80040c4:	8979      	ldrh	r1, [r7, #10]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	4603      	mov	r3, r0
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f913 	bl	80042fc <I2C_RequestMemoryRead>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0ad      	b.n	8004244 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2bff      	cmp	r3, #255	; 0xff
 80040f0:	d90e      	bls.n	8004110 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	22ff      	movs	r2, #255	; 0xff
 80040f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	8979      	ldrh	r1, [r7, #10]
 8004100:	4b52      	ldr	r3, [pc, #328]	; (800424c <HAL_I2C_Mem_Read+0x22c>)
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 fb29 	bl	8004760 <I2C_TransferConfig>
 800410e:	e00f      	b.n	8004130 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	b2da      	uxtb	r2, r3
 8004120:	8979      	ldrh	r1, [r7, #10]
 8004122:	4b4a      	ldr	r3, [pc, #296]	; (800424c <HAL_I2C_Mem_Read+0x22c>)
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 fb18 	bl	8004760 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	2200      	movs	r2, #0
 8004138:	2104      	movs	r1, #4
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f956 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e07c      	b.n	8004244 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d034      	beq.n	80041f0 <HAL_I2C_Mem_Read+0x1d0>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418a:	2b00      	cmp	r3, #0
 800418c:	d130      	bne.n	80041f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004194:	2200      	movs	r2, #0
 8004196:	2180      	movs	r1, #128	; 0x80
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f927 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e04d      	b.n	8004244 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2bff      	cmp	r3, #255	; 0xff
 80041b0:	d90e      	bls.n	80041d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	8979      	ldrh	r1, [r7, #10]
 80041c0:	2300      	movs	r3, #0
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 fac9 	bl	8004760 <I2C_TransferConfig>
 80041ce:	e00f      	b.n	80041f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	8979      	ldrh	r1, [r7, #10]
 80041e2:	2300      	movs	r3, #0
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fab8 	bl	8004760 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d19a      	bne.n	8004130 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 f98a 	bl	8004518 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e01a      	b.n	8004244 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2220      	movs	r2, #32
 8004214:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6859      	ldr	r1, [r3, #4]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_I2C_Mem_Read+0x230>)
 8004222:	400b      	ands	r3, r1
 8004224:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	e000      	b.n	8004244 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004242:	2302      	movs	r3, #2
  }
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	80002400 	.word	0x80002400
 8004250:	fe00e800 	.word	0xfe00e800

08004254 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af02      	add	r7, sp, #8
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	4608      	mov	r0, r1
 800425e:	4611      	mov	r1, r2
 8004260:	461a      	mov	r2, r3
 8004262:	4603      	mov	r3, r0
 8004264:	817b      	strh	r3, [r7, #10]
 8004266:	460b      	mov	r3, r1
 8004268:	813b      	strh	r3, [r7, #8]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	8979      	ldrh	r1, [r7, #10]
 8004274:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <I2C_RequestMemoryWrite+0xa4>)
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 fa6f 	bl	8004760 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	69b9      	ldr	r1, [r7, #24]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f8ff 	bl	800448a <I2C_WaitOnTXISFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e02c      	b.n	80042f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d105      	bne.n	80042a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800429c:	893b      	ldrh	r3, [r7, #8]
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	629a      	str	r2, [r3, #40]	; 0x28
 80042a6:	e015      	b.n	80042d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80042a8:	893b      	ldrh	r3, [r7, #8]
 80042aa:	0a1b      	lsrs	r3, r3, #8
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f8e5 	bl	800448a <I2C_WaitOnTXISFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e012      	b.n	80042f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80042ca:	893b      	ldrh	r3, [r7, #8]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2200      	movs	r2, #0
 80042dc:	2180      	movs	r1, #128	; 0x80
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f884 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	80002000 	.word	0x80002000

080042fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af02      	add	r7, sp, #8
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	4608      	mov	r0, r1
 8004306:	4611      	mov	r1, r2
 8004308:	461a      	mov	r2, r3
 800430a:	4603      	mov	r3, r0
 800430c:	817b      	strh	r3, [r7, #10]
 800430e:	460b      	mov	r3, r1
 8004310:	813b      	strh	r3, [r7, #8]
 8004312:	4613      	mov	r3, r2
 8004314:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	8979      	ldrh	r1, [r7, #10]
 800431c:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <I2C_RequestMemoryRead+0xa4>)
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	2300      	movs	r3, #0
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fa1c 	bl	8004760 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	69b9      	ldr	r1, [r7, #24]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f8ac 	bl	800448a <I2C_WaitOnTXISFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e02c      	b.n	8004396 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d105      	bne.n	800434e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004342:	893b      	ldrh	r3, [r7, #8]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	629a      	str	r2, [r3, #40]	; 0x28
 800434c:	e015      	b.n	800437a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800434e:	893b      	ldrh	r3, [r7, #8]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	b29b      	uxth	r3, r3
 8004354:	b2da      	uxtb	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	69b9      	ldr	r1, [r7, #24]
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 f892 	bl	800448a <I2C_WaitOnTXISFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e012      	b.n	8004396 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004370:	893b      	ldrh	r3, [r7, #8]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2200      	movs	r2, #0
 8004382:	2140      	movs	r1, #64	; 0x40
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f000 f831 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d001      	beq.n	8004394 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	80002000 	.word	0x80002000

080043a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d103      	bne.n	80043c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2200      	movs	r2, #0
 80043c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d007      	beq.n	80043e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	619a      	str	r2, [r3, #24]
  }
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fc:	e031      	b.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d02d      	beq.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004406:	f7ff f8a5 	bl	8003554 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d122      	bne.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4013      	ands	r3, r2
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	429a      	cmp	r2, r3
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	429a      	cmp	r2, r3
 8004438:	d113      	bne.n	8004462 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e00f      	b.n	8004482 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4013      	ands	r3, r2
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	bf0c      	ite	eq
 8004472:	2301      	moveq	r3, #1
 8004474:	2300      	movne	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	429a      	cmp	r2, r3
 800447e:	d0be      	beq.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004496:	e033      	b.n	8004500 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	68b9      	ldr	r1, [r7, #8]
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f87f 	bl	80045a0 <I2C_IsErrorOccurred>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e031      	b.n	8004510 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b2:	d025      	beq.n	8004500 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b4:	f7ff f84e 	bl	8003554 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d302      	bcc.n	80044ca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11a      	bne.n	8004500 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d013      	beq.n	8004500 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e007      	b.n	8004510 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b02      	cmp	r3, #2
 800450c:	d1c4      	bne.n	8004498 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004524:	e02f      	b.n	8004586 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f838 	bl	80045a0 <I2C_IsErrorOccurred>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e02d      	b.n	8004596 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7ff f80b 	bl	8003554 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d11a      	bne.n	8004586 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b20      	cmp	r3, #32
 800455c:	d013      	beq.n	8004586 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	f043 0220 	orr.w	r2, r3, #32
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e007      	b.n	8004596 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b20      	cmp	r3, #32
 8004592:	d1c8      	bne.n	8004526 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08a      	sub	sp, #40	; 0x28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d068      	beq.n	800469e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2210      	movs	r2, #16
 80045d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045d4:	e049      	b.n	800466a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d045      	beq.n	800466a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fe ffb9 	bl	8003554 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d302      	bcc.n	80045f4 <I2C_IsErrorOccurred+0x54>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d13a      	bne.n	800466a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004606:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004616:	d121      	bne.n	800465c <I2C_IsErrorOccurred+0xbc>
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800461e:	d01d      	beq.n	800465c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	2b20      	cmp	r3, #32
 8004624:	d01a      	beq.n	800465c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004634:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004636:	f7fe ff8d 	bl	8003554 <HAL_GetTick>
 800463a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800463c:	e00e      	b.n	800465c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800463e:	f7fe ff89 	bl	8003554 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b19      	cmp	r3, #25
 800464a:	d907      	bls.n	800465c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	f043 0320 	orr.w	r3, r3, #32
 8004652:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800465a:	e006      	b.n	800466a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b20      	cmp	r3, #32
 8004668:	d1e9      	bne.n	800463e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b20      	cmp	r3, #32
 8004676:	d003      	beq.n	8004680 <I2C_IsErrorOccurred+0xe0>
 8004678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0aa      	beq.n	80045d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004684:	2b00      	cmp	r3, #0
 8004686:	d103      	bne.n	8004690 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2220      	movs	r2, #32
 800468e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	f043 0308 	orr.w	r3, r3, #8
 80046d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00b      	beq.n	800470c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800470c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01c      	beq.n	800474e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7ff fe45 	bl	80043a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6859      	ldr	r1, [r3, #4]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	4b0d      	ldr	r3, [pc, #52]	; (800475c <I2C_IsErrorOccurred+0x1bc>)
 8004726:	400b      	ands	r3, r1
 8004728:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	431a      	orrs	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800474e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004752:	4618      	mov	r0, r3
 8004754:	3728      	adds	r7, #40	; 0x28
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	fe00e800 	.word	0xfe00e800

08004760 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	607b      	str	r3, [r7, #4]
 800476a:	460b      	mov	r3, r1
 800476c:	817b      	strh	r3, [r7, #10]
 800476e:	4613      	mov	r3, r2
 8004770:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004772:	897b      	ldrh	r3, [r7, #10]
 8004774:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004778:	7a7b      	ldrb	r3, [r7, #9]
 800477a:	041b      	lsls	r3, r3, #16
 800477c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004780:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	4313      	orrs	r3, r2
 800478a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800478e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	0d5b      	lsrs	r3, r3, #21
 800479a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800479e:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <I2C_TransferConfig+0x60>)
 80047a0:	430b      	orrs	r3, r1
 80047a2:	43db      	mvns	r3, r3
 80047a4:	ea02 0103 	and.w	r1, r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	03ff63ff 	.word	0x03ff63ff

080047c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d138      	bne.n	800484c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e032      	b.n	800484e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2224      	movs	r2, #36	; 0x24
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 0201 	orr.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800484c:	2302      	movs	r3, #2
  }
}
 800484e:	4618      	mov	r0, r3
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004860:	4b04      	ldr	r3, [pc, #16]	; (8004874 <HAL_PWREx_GetVoltageRange+0x18>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40007000 	.word	0x40007000

08004878 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e3ca      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800488a:	4b97      	ldr	r3, [pc, #604]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
 8004892:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004894:	4b94      	ldr	r3, [pc, #592]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80e4 	beq.w	8004a74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <HAL_RCC_OscConfig+0x4a>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b0c      	cmp	r3, #12
 80048b6:	f040 808b 	bne.w	80049d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	f040 8087 	bne.w	80049d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048c2:	4b89      	ldr	r3, [pc, #548]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <HAL_RCC_OscConfig+0x62>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e3a2      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1a      	ldr	r2, [r3, #32]
 80048de:	4b82      	ldr	r3, [pc, #520]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d004      	beq.n	80048f4 <HAL_RCC_OscConfig+0x7c>
 80048ea:	4b7f      	ldr	r3, [pc, #508]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f2:	e005      	b.n	8004900 <HAL_RCC_OscConfig+0x88>
 80048f4:	4b7c      	ldr	r3, [pc, #496]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 80048f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fa:	091b      	lsrs	r3, r3, #4
 80048fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004900:	4293      	cmp	r3, r2
 8004902:	d223      	bcs.n	800494c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fd55 	bl	80053b8 <RCC_SetFlashLatencyFromMSIRange>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e383      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004918:	4b73      	ldr	r3, [pc, #460]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a72      	ldr	r2, [pc, #456]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 800491e:	f043 0308 	orr.w	r3, r3, #8
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	4b70      	ldr	r3, [pc, #448]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	496d      	ldr	r1, [pc, #436]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004936:	4b6c      	ldr	r3, [pc, #432]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69db      	ldr	r3, [r3, #28]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	4968      	ldr	r1, [pc, #416]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004946:	4313      	orrs	r3, r2
 8004948:	604b      	str	r3, [r1, #4]
 800494a:	e025      	b.n	8004998 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800494c:	4b66      	ldr	r3, [pc, #408]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a65      	ldr	r2, [pc, #404]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004952:	f043 0308 	orr.w	r3, r3, #8
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b63      	ldr	r3, [pc, #396]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	4960      	ldr	r1, [pc, #384]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004966:	4313      	orrs	r3, r2
 8004968:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800496a:	4b5f      	ldr	r3, [pc, #380]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	495b      	ldr	r1, [pc, #364]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 800497a:	4313      	orrs	r3, r2
 800497c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fd15 	bl	80053b8 <RCC_SetFlashLatencyFromMSIRange>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e343      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004998:	f000 fc4a 	bl	8005230 <HAL_RCC_GetSysClockFreq>
 800499c:	4602      	mov	r2, r0
 800499e:	4b52      	ldr	r3, [pc, #328]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	091b      	lsrs	r3, r3, #4
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	4950      	ldr	r1, [pc, #320]	; (8004aec <HAL_RCC_OscConfig+0x274>)
 80049aa:	5ccb      	ldrb	r3, [r1, r3]
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
 80049b4:	4a4e      	ldr	r2, [pc, #312]	; (8004af0 <HAL_RCC_OscConfig+0x278>)
 80049b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049b8:	4b4e      	ldr	r3, [pc, #312]	; (8004af4 <HAL_RCC_OscConfig+0x27c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7fe fd79 	bl	80034b4 <HAL_InitTick>
 80049c2:	4603      	mov	r3, r0
 80049c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d052      	beq.n	8004a72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	e327      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d032      	beq.n	8004a3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049d8:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a42      	ldr	r2, [pc, #264]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049e4:	f7fe fdb6 	bl	8003554 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049ec:	f7fe fdb2 	bl	8003554 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e310      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049fe:	4b3a      	ldr	r3, [pc, #232]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a0a:	4b37      	ldr	r3, [pc, #220]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a36      	ldr	r2, [pc, #216]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a10:	f043 0308 	orr.w	r3, r3, #8
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	4b34      	ldr	r3, [pc, #208]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	4931      	ldr	r1, [pc, #196]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a28:	4b2f      	ldr	r3, [pc, #188]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	492c      	ldr	r1, [pc, #176]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	604b      	str	r3, [r1, #4]
 8004a3c:	e01a      	b.n	8004a74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a3e:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a29      	ldr	r2, [pc, #164]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a44:	f023 0301 	bic.w	r3, r3, #1
 8004a48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a4a:	f7fe fd83 	bl	8003554 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a52:	f7fe fd7f 	bl	8003554 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e2dd      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a64:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f0      	bne.n	8004a52 <HAL_RCC_OscConfig+0x1da>
 8004a70:	e000      	b.n	8004a74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d074      	beq.n	8004b6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d005      	beq.n	8004a92 <HAL_RCC_OscConfig+0x21a>
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2b0c      	cmp	r3, #12
 8004a8a:	d10e      	bne.n	8004aaa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d10b      	bne.n	8004aaa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d064      	beq.n	8004b68 <HAL_RCC_OscConfig+0x2f0>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d160      	bne.n	8004b68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e2ba      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab2:	d106      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x24a>
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a0b      	ldr	r2, [pc, #44]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	e026      	b.n	8004b10 <HAL_RCC_OscConfig+0x298>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aca:	d115      	bne.n	8004af8 <HAL_RCC_OscConfig+0x280>
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a05      	ldr	r2, [pc, #20]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004ad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a02      	ldr	r2, [pc, #8]	; (8004ae8 <HAL_RCC_OscConfig+0x270>)
 8004ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e014      	b.n	8004b10 <HAL_RCC_OscConfig+0x298>
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	08009ebc 	.word	0x08009ebc
 8004af0:	20000010 	.word	0x20000010
 8004af4:	20000024 	.word	0x20000024
 8004af8:	4ba0      	ldr	r3, [pc, #640]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a9f      	ldr	r2, [pc, #636]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b02:	6013      	str	r3, [r2, #0]
 8004b04:	4b9d      	ldr	r3, [pc, #628]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a9c      	ldr	r2, [pc, #624]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d013      	beq.n	8004b40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b18:	f7fe fd1c 	bl	8003554 <HAL_GetTick>
 8004b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b1e:	e008      	b.n	8004b32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b20:	f7fe fd18 	bl	8003554 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b64      	cmp	r3, #100	; 0x64
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e276      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b32:	4b92      	ldr	r3, [pc, #584]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0f0      	beq.n	8004b20 <HAL_RCC_OscConfig+0x2a8>
 8004b3e:	e014      	b.n	8004b6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fe fd08 	bl	8003554 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b48:	f7fe fd04 	bl	8003554 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	; 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e262      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b5a:	4b88      	ldr	r3, [pc, #544]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x2d0>
 8004b66:	e000      	b.n	8004b6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d060      	beq.n	8004c38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d005      	beq.n	8004b88 <HAL_RCC_OscConfig+0x310>
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b0c      	cmp	r3, #12
 8004b80:	d119      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d116      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b88:	4b7c      	ldr	r3, [pc, #496]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x328>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e23f      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba0:	4b76      	ldr	r3, [pc, #472]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	061b      	lsls	r3, r3, #24
 8004bae:	4973      	ldr	r1, [pc, #460]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bb4:	e040      	b.n	8004c38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d023      	beq.n	8004c06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bbe:	4b6f      	ldr	r3, [pc, #444]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a6e      	ldr	r2, [pc, #440]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fe fcc3 	bl	8003554 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bd2:	f7fe fcbf 	bl	8003554 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e21d      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004be4:	4b65      	ldr	r3, [pc, #404]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f0      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf0:	4b62      	ldr	r3, [pc, #392]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	061b      	lsls	r3, r3, #24
 8004bfe:	495f      	ldr	r1, [pc, #380]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	604b      	str	r3, [r1, #4]
 8004c04:	e018      	b.n	8004c38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c06:	4b5d      	ldr	r3, [pc, #372]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a5c      	ldr	r2, [pc, #368]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c12:	f7fe fc9f 	bl	8003554 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c1a:	f7fe fc9b 	bl	8003554 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e1f9      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c2c:	4b53      	ldr	r3, [pc, #332]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f0      	bne.n	8004c1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d03c      	beq.n	8004cbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01c      	beq.n	8004c86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c4c:	4b4b      	ldr	r3, [pc, #300]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c52:	4a4a      	ldr	r2, [pc, #296]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5c:	f7fe fc7a 	bl	8003554 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c64:	f7fe fc76 	bl	8003554 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e1d4      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c76:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0ef      	beq.n	8004c64 <HAL_RCC_OscConfig+0x3ec>
 8004c84:	e01b      	b.n	8004cbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c86:	4b3d      	ldr	r3, [pc, #244]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c8c:	4a3b      	ldr	r2, [pc, #236]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004c8e:	f023 0301 	bic.w	r3, r3, #1
 8004c92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c96:	f7fe fc5d 	bl	8003554 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c9e:	f7fe fc59 	bl	8003554 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e1b7      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cb0:	4b32      	ldr	r3, [pc, #200]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1ef      	bne.n	8004c9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 80a6 	beq.w	8004e18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cd0:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10d      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cdc:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce0:	4a26      	ldr	r2, [pc, #152]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ce8:	4b24      	ldr	r3, [pc, #144]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf8:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <HAL_RCC_OscConfig+0x508>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d118      	bne.n	8004d36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d04:	4b1e      	ldr	r3, [pc, #120]	; (8004d80 <HAL_RCC_OscConfig+0x508>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1d      	ldr	r2, [pc, #116]	; (8004d80 <HAL_RCC_OscConfig+0x508>)
 8004d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d10:	f7fe fc20 	bl	8003554 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d18:	f7fe fc1c 	bl	8003554 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e17a      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d2a:	4b15      	ldr	r3, [pc, #84]	; (8004d80 <HAL_RCC_OscConfig+0x508>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d108      	bne.n	8004d50 <HAL_RCC_OscConfig+0x4d8>
 8004d3e:	4b0f      	ldr	r3, [pc, #60]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d44:	4a0d      	ldr	r2, [pc, #52]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004d46:	f043 0301 	orr.w	r3, r3, #1
 8004d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d4e:	e029      	b.n	8004da4 <HAL_RCC_OscConfig+0x52c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d115      	bne.n	8004d84 <HAL_RCC_OscConfig+0x50c>
 8004d58:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5e:	4a07      	ldr	r2, [pc, #28]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004d60:	f043 0304 	orr.w	r3, r3, #4
 8004d64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	4a03      	ldr	r2, [pc, #12]	; (8004d7c <HAL_RCC_OscConfig+0x504>)
 8004d70:	f043 0301 	orr.w	r3, r3, #1
 8004d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d78:	e014      	b.n	8004da4 <HAL_RCC_OscConfig+0x52c>
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	40007000 	.word	0x40007000
 8004d84:	4b9c      	ldr	r3, [pc, #624]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	4a9b      	ldr	r2, [pc, #620]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d94:	4b98      	ldr	r3, [pc, #608]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	4a97      	ldr	r2, [pc, #604]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004d9c:	f023 0304 	bic.w	r3, r3, #4
 8004da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d016      	beq.n	8004dda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fe fbd2 	bl	8003554 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db2:	e00a      	b.n	8004dca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db4:	f7fe fbce 	bl	8003554 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e12a      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dca:	4b8b      	ldr	r3, [pc, #556]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0ed      	beq.n	8004db4 <HAL_RCC_OscConfig+0x53c>
 8004dd8:	e015      	b.n	8004e06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dda:	f7fe fbbb 	bl	8003554 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004de0:	e00a      	b.n	8004df8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de2:	f7fe fbb7 	bl	8003554 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e113      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004df8:	4b7f      	ldr	r3, [pc, #508]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1ed      	bne.n	8004de2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e06:	7ffb      	ldrb	r3, [r7, #31]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d105      	bne.n	8004e18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e0c:	4b7a      	ldr	r3, [pc, #488]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e10:	4a79      	ldr	r2, [pc, #484]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 80fe 	beq.w	800501e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	f040 80d0 	bne.w	8004fcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e2c:	4b72      	ldr	r3, [pc, #456]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f003 0203 	and.w	r2, r3, #3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d130      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d127      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d11f      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e6c:	2a07      	cmp	r2, #7
 8004e6e:	bf14      	ite	ne
 8004e70:	2201      	movne	r2, #1
 8004e72:	2200      	moveq	r2, #0
 8004e74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d113      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	3b01      	subs	r3, #1
 8004e88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d109      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d06e      	beq.n	8004f80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b0c      	cmp	r3, #12
 8004ea6:	d069      	beq.n	8004f7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ea8:	4b53      	ldr	r3, [pc, #332]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004eb4:	4b50      	ldr	r3, [pc, #320]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0ad      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ec4:	4b4c      	ldr	r3, [pc, #304]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a4b      	ldr	r2, [pc, #300]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ece:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ed0:	f7fe fb40 	bl	8003554 <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fe fb3c 	bl	8003554 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e09a      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eea:	4b43      	ldr	r3, [pc, #268]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ef6:	4b40      	ldr	r3, [pc, #256]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004ef8:	68da      	ldr	r2, [r3, #12]
 8004efa:	4b40      	ldr	r3, [pc, #256]	; (8004ffc <HAL_RCC_OscConfig+0x784>)
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f06:	3a01      	subs	r2, #1
 8004f08:	0112      	lsls	r2, r2, #4
 8004f0a:	4311      	orrs	r1, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f10:	0212      	lsls	r2, r2, #8
 8004f12:	4311      	orrs	r1, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f18:	0852      	lsrs	r2, r2, #1
 8004f1a:	3a01      	subs	r2, #1
 8004f1c:	0552      	lsls	r2, r2, #21
 8004f1e:	4311      	orrs	r1, r2
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f24:	0852      	lsrs	r2, r2, #1
 8004f26:	3a01      	subs	r2, #1
 8004f28:	0652      	lsls	r2, r2, #25
 8004f2a:	4311      	orrs	r1, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f30:	0912      	lsrs	r2, r2, #4
 8004f32:	0452      	lsls	r2, r2, #17
 8004f34:	430a      	orrs	r2, r1
 8004f36:	4930      	ldr	r1, [pc, #192]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f3c:	4b2e      	ldr	r3, [pc, #184]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a2d      	ldr	r2, [pc, #180]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f48:	4b2b      	ldr	r3, [pc, #172]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4a2a      	ldr	r2, [pc, #168]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f54:	f7fe fafe 	bl	8003554 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5c:	f7fe fafa 	bl	8003554 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e058      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6e:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f7a:	e050      	b.n	800501e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e04f      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f80:	4b1d      	ldr	r3, [pc, #116]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d148      	bne.n	800501e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a19      	ldr	r2, [pc, #100]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f98:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4a16      	ldr	r2, [pc, #88]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fa4:	f7fe fad6 	bl	8003554 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fac:	f7fe fad2 	bl	8003554 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e030      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fbe:	4b0e      	ldr	r3, [pc, #56]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0x734>
 8004fca:	e028      	b.n	800501e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b0c      	cmp	r3, #12
 8004fd0:	d023      	beq.n	800501a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd2:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a08      	ldr	r2, [pc, #32]	; (8004ff8 <HAL_RCC_OscConfig+0x780>)
 8004fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fde:	f7fe fab9 	bl	8003554 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe4:	e00c      	b.n	8005000 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe6:	f7fe fab5 	bl	8003554 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d905      	bls.n	8005000 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e013      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005000:	4b09      	ldr	r3, [pc, #36]	; (8005028 <HAL_RCC_OscConfig+0x7b0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1ec      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <HAL_RCC_OscConfig+0x7b0>)
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	4905      	ldr	r1, [pc, #20]	; (8005028 <HAL_RCC_OscConfig+0x7b0>)
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_RCC_OscConfig+0x7b4>)
 8005014:	4013      	ands	r3, r2
 8005016:	60cb      	str	r3, [r1, #12]
 8005018:	e001      	b.n	800501e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3720      	adds	r7, #32
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000
 800502c:	feeefffc 	.word	0xfeeefffc

08005030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0e7      	b.n	8005214 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005044:	4b75      	ldr	r3, [pc, #468]	; (800521c <HAL_RCC_ClockConfig+0x1ec>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	429a      	cmp	r2, r3
 8005050:	d910      	bls.n	8005074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005052:	4b72      	ldr	r3, [pc, #456]	; (800521c <HAL_RCC_ClockConfig+0x1ec>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f023 0207 	bic.w	r2, r3, #7
 800505a:	4970      	ldr	r1, [pc, #448]	; (800521c <HAL_RCC_ClockConfig+0x1ec>)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	4313      	orrs	r3, r2
 8005060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005062:	4b6e      	ldr	r3, [pc, #440]	; (800521c <HAL_RCC_ClockConfig+0x1ec>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d001      	beq.n	8005074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0cf      	b.n	8005214 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d010      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	4b66      	ldr	r3, [pc, #408]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800508c:	429a      	cmp	r2, r3
 800508e:	d908      	bls.n	80050a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005090:	4b63      	ldr	r3, [pc, #396]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	4960      	ldr	r1, [pc, #384]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d04c      	beq.n	8005148 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d107      	bne.n	80050c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b6:	4b5a      	ldr	r3, [pc, #360]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d121      	bne.n	8005106 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0a6      	b.n	8005214 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d107      	bne.n	80050de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ce:	4b54      	ldr	r3, [pc, #336]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d115      	bne.n	8005106 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e09a      	b.n	8005214 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050e6:	4b4e      	ldr	r3, [pc, #312]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d109      	bne.n	8005106 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e08e      	b.n	8005214 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f6:	4b4a      	ldr	r3, [pc, #296]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e086      	b.n	8005214 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005106:	4b46      	ldr	r3, [pc, #280]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f023 0203 	bic.w	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4943      	ldr	r1, [pc, #268]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 8005114:	4313      	orrs	r3, r2
 8005116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005118:	f7fe fa1c 	bl	8003554 <HAL_GetTick>
 800511c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511e:	e00a      	b.n	8005136 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005120:	f7fe fa18 	bl	8003554 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	f241 3288 	movw	r2, #5000	; 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e06e      	b.n	8005214 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	4b3a      	ldr	r3, [pc, #232]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 020c 	and.w	r2, r3, #12
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	429a      	cmp	r2, r3
 8005146:	d1eb      	bne.n	8005120 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d010      	beq.n	8005176 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	4b31      	ldr	r3, [pc, #196]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005160:	429a      	cmp	r2, r3
 8005162:	d208      	bcs.n	8005176 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005164:	4b2e      	ldr	r3, [pc, #184]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	492b      	ldr	r1, [pc, #172]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 8005172:	4313      	orrs	r3, r2
 8005174:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005176:	4b29      	ldr	r3, [pc, #164]	; (800521c <HAL_RCC_ClockConfig+0x1ec>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d210      	bcs.n	80051a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005184:	4b25      	ldr	r3, [pc, #148]	; (800521c <HAL_RCC_ClockConfig+0x1ec>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 0207 	bic.w	r2, r3, #7
 800518c:	4923      	ldr	r1, [pc, #140]	; (800521c <HAL_RCC_ClockConfig+0x1ec>)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	4313      	orrs	r3, r2
 8005192:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005194:	4b21      	ldr	r3, [pc, #132]	; (800521c <HAL_RCC_ClockConfig+0x1ec>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d001      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e036      	b.n	8005214 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d008      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051b2:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	4918      	ldr	r1, [pc, #96]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0308 	and.w	r3, r3, #8
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051d0:	4b13      	ldr	r3, [pc, #76]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	4910      	ldr	r1, [pc, #64]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051e4:	f000 f824 	bl	8005230 <HAL_RCC_GetSysClockFreq>
 80051e8:	4602      	mov	r2, r0
 80051ea:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <HAL_RCC_ClockConfig+0x1f0>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	091b      	lsrs	r3, r3, #4
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	490b      	ldr	r1, [pc, #44]	; (8005224 <HAL_RCC_ClockConfig+0x1f4>)
 80051f6:	5ccb      	ldrb	r3, [r1, r3]
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005200:	4a09      	ldr	r2, [pc, #36]	; (8005228 <HAL_RCC_ClockConfig+0x1f8>)
 8005202:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005204:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_RCC_ClockConfig+0x1fc>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe f953 	bl	80034b4 <HAL_InitTick>
 800520e:	4603      	mov	r3, r0
 8005210:	72fb      	strb	r3, [r7, #11]

  return status;
 8005212:	7afb      	ldrb	r3, [r7, #11]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40022000 	.word	0x40022000
 8005220:	40021000 	.word	0x40021000
 8005224:	08009ebc 	.word	0x08009ebc
 8005228:	20000010 	.word	0x20000010
 800522c:	20000024 	.word	0x20000024

08005230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005230:	b480      	push	{r7}
 8005232:	b089      	sub	sp, #36	; 0x24
 8005234:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800523e:	4b3e      	ldr	r3, [pc, #248]	; (8005338 <HAL_RCC_GetSysClockFreq+0x108>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 030c 	and.w	r3, r3, #12
 8005246:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005248:	4b3b      	ldr	r3, [pc, #236]	; (8005338 <HAL_RCC_GetSysClockFreq+0x108>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0303 	and.w	r3, r3, #3
 8005250:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <HAL_RCC_GetSysClockFreq+0x34>
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b0c      	cmp	r3, #12
 800525c:	d121      	bne.n	80052a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d11e      	bne.n	80052a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005264:	4b34      	ldr	r3, [pc, #208]	; (8005338 <HAL_RCC_GetSysClockFreq+0x108>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d107      	bne.n	8005280 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005270:	4b31      	ldr	r3, [pc, #196]	; (8005338 <HAL_RCC_GetSysClockFreq+0x108>)
 8005272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005276:	0a1b      	lsrs	r3, r3, #8
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	61fb      	str	r3, [r7, #28]
 800527e:	e005      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005280:	4b2d      	ldr	r3, [pc, #180]	; (8005338 <HAL_RCC_GetSysClockFreq+0x108>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800528c:	4a2b      	ldr	r2, [pc, #172]	; (800533c <HAL_RCC_GetSysClockFreq+0x10c>)
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005294:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10d      	bne.n	80052b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052a0:	e00a      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	d102      	bne.n	80052ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052a8:	4b25      	ldr	r3, [pc, #148]	; (8005340 <HAL_RCC_GetSysClockFreq+0x110>)
 80052aa:	61bb      	str	r3, [r7, #24]
 80052ac:	e004      	b.n	80052b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052b4:	4b23      	ldr	r3, [pc, #140]	; (8005344 <HAL_RCC_GetSysClockFreq+0x114>)
 80052b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b0c      	cmp	r3, #12
 80052bc:	d134      	bne.n	8005328 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052be:	4b1e      	ldr	r3, [pc, #120]	; (8005338 <HAL_RCC_GetSysClockFreq+0x108>)
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d003      	beq.n	80052d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d003      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0xac>
 80052d4:	e005      	b.n	80052e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052d6:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <HAL_RCC_GetSysClockFreq+0x110>)
 80052d8:	617b      	str	r3, [r7, #20]
      break;
 80052da:	e005      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052dc:	4b19      	ldr	r3, [pc, #100]	; (8005344 <HAL_RCC_GetSysClockFreq+0x114>)
 80052de:	617b      	str	r3, [r7, #20]
      break;
 80052e0:	e002      	b.n	80052e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	617b      	str	r3, [r7, #20]
      break;
 80052e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052e8:	4b13      	ldr	r3, [pc, #76]	; (8005338 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	f003 0307 	and.w	r3, r3, #7
 80052f2:	3301      	adds	r3, #1
 80052f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052f6:	4b10      	ldr	r3, [pc, #64]	; (8005338 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	0a1b      	lsrs	r3, r3, #8
 80052fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	fb03 f202 	mul.w	r2, r3, r2
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800530e:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <HAL_RCC_GetSysClockFreq+0x108>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	0e5b      	lsrs	r3, r3, #25
 8005314:	f003 0303 	and.w	r3, r3, #3
 8005318:	3301      	adds	r3, #1
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	fbb2 f3f3 	udiv	r3, r2, r3
 8005326:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005328:	69bb      	ldr	r3, [r7, #24]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3724      	adds	r7, #36	; 0x24
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
 800533c:	08009ed4 	.word	0x08009ed4
 8005340:	00f42400 	.word	0x00f42400
 8005344:	007a1200 	.word	0x007a1200

08005348 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_GetHCLKFreq+0x14>)
 800534e:	681b      	ldr	r3, [r3, #0]
}
 8005350:	4618      	mov	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000010 	.word	0x20000010

08005360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005364:	f7ff fff0 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b06      	ldr	r3, [pc, #24]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0a1b      	lsrs	r3, r3, #8
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4904      	ldr	r1, [pc, #16]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40021000 	.word	0x40021000
 8005388:	08009ecc 	.word	0x08009ecc

0800538c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005390:	f7ff ffda 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005394:	4602      	mov	r2, r0
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	0adb      	lsrs	r3, r3, #11
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4904      	ldr	r1, [pc, #16]	; (80053b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021000 	.word	0x40021000
 80053b4:	08009ecc 	.word	0x08009ecc

080053b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053c0:	2300      	movs	r3, #0
 80053c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053c4:	4b2a      	ldr	r3, [pc, #168]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053d0:	f7ff fa44 	bl	800485c <HAL_PWREx_GetVoltageRange>
 80053d4:	6178      	str	r0, [r7, #20]
 80053d6:	e014      	b.n	8005402 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053d8:	4b25      	ldr	r3, [pc, #148]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053dc:	4a24      	ldr	r2, [pc, #144]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e2:	6593      	str	r3, [r2, #88]	; 0x58
 80053e4:	4b22      	ldr	r3, [pc, #136]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053f0:	f7ff fa34 	bl	800485c <HAL_PWREx_GetVoltageRange>
 80053f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053f6:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	4a1d      	ldr	r2, [pc, #116]	; (8005470 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005400:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005408:	d10b      	bne.n	8005422 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b80      	cmp	r3, #128	; 0x80
 800540e:	d919      	bls.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2ba0      	cmp	r3, #160	; 0xa0
 8005414:	d902      	bls.n	800541c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005416:	2302      	movs	r3, #2
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	e013      	b.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800541c:	2301      	movs	r3, #1
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	e010      	b.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b80      	cmp	r3, #128	; 0x80
 8005426:	d902      	bls.n	800542e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005428:	2303      	movs	r3, #3
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	e00a      	b.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b80      	cmp	r3, #128	; 0x80
 8005432:	d102      	bne.n	800543a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005434:	2302      	movs	r3, #2
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e004      	b.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b70      	cmp	r3, #112	; 0x70
 800543e:	d101      	bne.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005440:	2301      	movs	r3, #1
 8005442:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005444:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f023 0207 	bic.w	r2, r3, #7
 800544c:	4909      	ldr	r1, [pc, #36]	; (8005474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005454:	4b07      	ldr	r3, [pc, #28]	; (8005474 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	429a      	cmp	r2, r3
 8005460:	d001      	beq.n	8005466 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	40022000 	.word	0x40022000

08005478 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e0be      	b.n	8005608 <HAL_SPI_Init+0x190>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b00      	cmp	r3, #0
 8005490:	d108      	bne.n	80054a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549a:	d009      	beq.n	80054b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	61da      	str	r2, [r3, #28]
 80054a2:	e005      	b.n	80054b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d106      	bne.n	80054ca <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f8cb 	bl	8005660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054ea:	d902      	bls.n	80054f2 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e002      	b.n	80054f8 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005500:	d007      	beq.n	8005512 <HAL_SPI_Init+0x9a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800550a:	d002      	beq.n	8005512 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005540:	431a      	orrs	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005554:	ea42 0103 	orr.w	r1, r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	430a      	orrs	r2, r1
 8005566:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005570:	d11b      	bne.n	80055aa <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10b      	bne.n	8005592 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005582:	d903      	bls.n	800558c <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	631a      	str	r2, [r3, #48]	; 0x30
 800558a:	e002      	b.n	8005592 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	2b02      	cmp	r3, #2
 8005598:	d107      	bne.n	80055aa <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	0c1b      	lsrs	r3, r3, #16
 80055b0:	f003 0204 	and.w	r2, r3, #4
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	431a      	orrs	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80055d0:	ea42 0103 	orr.w	r1, r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ea:	d105      	bne.n	80055f8 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	b292      	uxth	r2, r2
 80055f6:	611a      	str	r2, [r3, #16]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e01a      	b.n	8005658 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005638:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f81a 	bl	8005674 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	; 0x30
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	61bb      	str	r3, [r7, #24]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (hspi->State != HAL_SPI_STATE_READY)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d003      	beq.n	80056ba <HAL_SPI_Receive+0x32>
  {
    errorcode = HAL_BUSY;
 80056b2:	2302      	movs	r3, #2
 80056b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 80056b8:	e1cc      	b.n	8005a54 <HAL_SPI_Receive+0x3cc>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c2:	d112      	bne.n	80056ea <HAL_SPI_Receive+0x62>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10e      	bne.n	80056ea <HAL_SPI_Receive+0x62>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2204      	movs	r2, #4
 80056d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056d4:	88fa      	ldrh	r2, [r7, #6]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	4613      	mov	r3, r2
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	68b9      	ldr	r1, [r7, #8]
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f9c1 	bl	8005a68 <HAL_SPI_TransmitReceive>
 80056e6:	4603      	mov	r3, r0
 80056e8:	e1ba      	b.n	8005a60 <HAL_SPI_Receive+0x3d8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_SPI_Receive+0x70>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e1b3      	b.n	8005a60 <HAL_SPI_Receive+0x3d8>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005700:	f7fd ff28 	bl	8003554 <HAL_GetTick>
 8005704:	6238      	str	r0, [r7, #32]

  if ((pData == NULL) || (Size == 0U))
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d002      	beq.n	8005712 <HAL_SPI_Receive+0x8a>
 800570c:	88fb      	ldrh	r3, [r7, #6]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d103      	bne.n	800571a <HAL_SPI_Receive+0x92>
  {
    errorcode = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    goto error;
 8005718:	e19c      	b.n	8005a54 <HAL_SPI_Receive+0x3cc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2204      	movs	r2, #4
 800571e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	88fa      	ldrh	r2, [r7, #6]
 800573a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005764:	d118      	bne.n	8005798 <HAL_SPI_Receive+0x110>
  {
    SPI_RESET_CRC(hspi);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005784:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057a0:	d908      	bls.n	80057b4 <HAL_SPI_Receive+0x12c>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057b0:	605a      	str	r2, [r3, #4]
 80057b2:	e007      	b.n	80057c4 <HAL_SPI_Receive+0x13c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057cc:	d10f      	bne.n	80057ee <HAL_SPI_Receive+0x166>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b40      	cmp	r3, #64	; 0x40
 80057fa:	d007      	beq.n	800580c <HAL_SPI_Receive+0x184>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800580a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005814:	d871      	bhi.n	80058fa <HAL_SPI_Receive+0x272>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005816:	e035      	b.n	8005884 <HAL_SPI_Receive+0x1fc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b01      	cmp	r3, #1
 8005824:	d117      	bne.n	8005856 <HAL_SPI_Receive+0x1ce>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f103 020c 	add.w	r2, r3, #12
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	7812      	ldrb	r2, [r2, #0]
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005854:	e016      	b.n	8005884 <HAL_SPI_Receive+0x1fc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005856:	f7fd fe7d 	bl	8003554 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d803      	bhi.n	800586e <HAL_SPI_Receive+0x1e6>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d102      	bne.n	8005874 <HAL_SPI_Receive+0x1ec>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d107      	bne.n	8005884 <HAL_SPI_Receive+0x1fc>
        {
          errorcode = HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005882:	e0e7      	b.n	8005a54 <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1c3      	bne.n	8005818 <HAL_SPI_Receive+0x190>
 8005890:	e039      	b.n	8005906 <HAL_SPI_Receive+0x27e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b01      	cmp	r3, #1
 800589e:	d115      	bne.n	80058cc <HAL_SPI_Receive+0x244>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	b292      	uxth	r2, r2
 80058ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	1c9a      	adds	r2, r3, #2
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058ca:	e016      	b.n	80058fa <HAL_SPI_Receive+0x272>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058cc:	f7fd fe42 	bl	8003554 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d803      	bhi.n	80058e4 <HAL_SPI_Receive+0x25c>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e2:	d102      	bne.n	80058ea <HAL_SPI_Receive+0x262>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d107      	bne.n	80058fa <HAL_SPI_Receive+0x272>
        {
          errorcode = HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          hspi->State = HAL_SPI_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80058f8:	e0ac      	b.n	8005a54 <HAL_SPI_Receive+0x3cc>
    while (hspi->RxXferCount > 0U)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1c5      	bne.n	8005892 <HAL_SPI_Receive+0x20a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800590e:	d178      	bne.n	8005a02 <HAL_SPI_Receive+0x37a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800591e:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	2101      	movs	r1, #1
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f001 fa00 	bl	8006d30 <SPI_WaitFlagStateUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_SPI_Receive+0x2b6>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 800593c:	e08a      	b.n	8005a54 <HAL_SPI_Receive+0x3cc>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005946:	d907      	bls.n	8005958 <HAL_SPI_Receive+0x2d0>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	b292      	uxth	r2, r2
 8005954:	801a      	strh	r2, [r3, #0]
 8005956:	e008      	b.n	800596a <HAL_SPI_Receive+0x2e2>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f103 020c 	add.w	r2, r3, #12
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	2101      	movs	r1, #1
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f001 f9db 	bl	8006d30 <SPI_WaitFlagStateUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d009      	beq.n	8005994 <HAL_SPI_Receive+0x30c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005984:	f043 0202 	orr.w	r2, r3, #2
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      goto error;
 8005992:	e05f      	b.n	8005a54 <HAL_SPI_Receive+0x3cc>
    }

    /* Read CRC to Flush DR and RXNE flag */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800599c:	d105      	bne.n	80059aa <HAL_SPI_Receive+0x322>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	e02b      	b.n	8005a02 <HAL_SPI_Receive+0x37a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	330c      	adds	r3, #12
 80059b0:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80059ba:	7dfb      	ldrb	r3, [r7, #23]

      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059c4:	d11d      	bne.n	8005a02 <HAL_SPI_Receive+0x37a>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d119      	bne.n	8005a02 <HAL_SPI_Receive+0x37a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2201      	movs	r2, #1
 80059d6:	2101      	movs	r1, #1
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f001 f9a9 	bl	8006d30 <SPI_WaitFlagStateUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d009      	beq.n	80059f8 <HAL_SPI_Receive+0x370>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e8:	f043 0202 	orr.w	r2, r3, #2
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80059f6:	e02d      	b.n	8005a54 <HAL_SPI_Receive+0x3cc>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a02:	6a3a      	ldr	r2, [r7, #32]
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f001 fab0 	bl	8006f6c <SPI_EndRxTransaction>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_SPI_Receive+0x390>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 0310 	and.w	r3, r3, #16
 8005a22:	2b10      	cmp	r3, #16
 8005a24:	d10a      	bne.n	8005a3c <HAL_SPI_Receive+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a2a:	f043 0202 	orr.w	r2, r3, #2
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005a3a:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_SPI_Receive+0x3c4>
  {
    errorcode = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005a4a:	e003      	b.n	8005a54 <HAL_SPI_Receive+0x3cc>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3728      	adds	r7, #40	; 0x28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b092      	sub	sp, #72	; 0x48
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_SPI_TransmitReceive+0x2e>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e322      	b.n	80060dc <HAL_SPI_TransmitReceive+0x674>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a9e:	f7fd fd59 	bl	8003554 <HAL_GetTick>
 8005aa2:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8005ab4:	887b      	ldrh	r3, [r7, #2]
 8005ab6:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8005ab8:	887b      	ldrh	r3, [r7, #2]
 8005aba:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005acc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d00f      	beq.n	8005af4 <HAL_SPI_TransmitReceive+0x8c>
 8005ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ada:	d107      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x84>
 8005ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d003      	beq.n	8005af4 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8005aec:	2302      	movs	r3, #2
 8005aee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8005af2:	e2ed      	b.n	80060d0 <HAL_SPI_TransmitReceive+0x668>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d005      	beq.n	8005b06 <HAL_SPI_TransmitReceive+0x9e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <HAL_SPI_TransmitReceive+0x9e>
 8005b00:	887b      	ldrh	r3, [r7, #2]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8005b0c:	e2e0      	b.n	80060d0 <HAL_SPI_TransmitReceive+0x668>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d003      	beq.n	8005b22 <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2205      	movs	r2, #5
 8005b1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	887a      	ldrh	r2, [r7, #2]
 8005b32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	887a      	ldrh	r2, [r7, #2]
 8005b3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	887a      	ldrh	r2, [r7, #2]
 8005b4e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b64:	d10f      	bne.n	8005b86 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b84:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b8e:	d802      	bhi.n	8005b96 <HAL_SPI_TransmitReceive+0x12e>
 8005b90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d908      	bls.n	8005ba8 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ba4:	605a      	str	r2, [r3, #4]
 8005ba6:	e007      	b.n	8005bb8 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d007      	beq.n	8005bd6 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bde:	f240 80ce 	bls.w	8005d7e <HAL_SPI_TransmitReceive+0x316>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_SPI_TransmitReceive+0x18a>
 8005bea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	f040 80b8 	bne.w	8005d62 <HAL_SPI_TransmitReceive+0x2fa>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	881a      	ldrh	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	1c9a      	adds	r2, r3, #2
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
      /* Enable CRC Transmission */
      if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f040 80a0 	bne.w	8005d62 <HAL_SPI_TransmitReceive+0x2fa>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2a:	f040 809a 	bne.w	8005d62 <HAL_SPI_TransmitReceive+0x2fa>
      {
        /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
        if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10c      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x1ea>
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	f003 0308 	and.w	r3, r3, #8
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <HAL_SPI_TransmitReceive+0x1ea>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c50:	601a      	str	r2, [r3, #0]
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c60:	601a      	str	r2, [r3, #0]
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c62:	e07e      	b.n	8005d62 <HAL_SPI_TransmitReceive+0x2fa>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d13f      	bne.n	8005cf2 <HAL_SPI_TransmitReceive+0x28a>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d03a      	beq.n	8005cf2 <HAL_SPI_TransmitReceive+0x28a>
 8005c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d137      	bne.n	8005cf2 <HAL_SPI_TransmitReceive+0x28a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	881a      	ldrh	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	1c9a      	adds	r2, r3, #2
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d11e      	bne.n	8005cf2 <HAL_SPI_TransmitReceive+0x28a>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cbc:	d119      	bne.n	8005cf2 <HAL_SPI_TransmitReceive+0x28a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10c      	bne.n	8005ce2 <HAL_SPI_TransmitReceive+0x27a>
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <HAL_SPI_TransmitReceive+0x27a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce0:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cf0:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d11c      	bne.n	8005d3a <HAL_SPI_TransmitReceive+0x2d2>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d016      	beq.n	8005d3a <HAL_SPI_TransmitReceive+0x2d2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	b292      	uxth	r2, r2
 8005d18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	1c9a      	adds	r2, r3, #2
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d36:	2301      	movs	r3, #1
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d3a:	f7fd fc0b 	bl	8003554 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d80b      	bhi.n	8005d62 <HAL_SPI_TransmitReceive+0x2fa>
 8005d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d50:	d007      	beq.n	8005d62 <HAL_SPI_TransmitReceive+0x2fa>
      {
        errorcode = HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005d60:	e1b6      	b.n	80060d0 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f47f af7b 	bne.w	8005c64 <HAL_SPI_TransmitReceive+0x1fc>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f47f af74 	bne.w	8005c64 <HAL_SPI_TransmitReceive+0x1fc>
 8005d7c:	e12d      	b.n	8005fda <HAL_SPI_TransmitReceive+0x572>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_SPI_TransmitReceive+0x326>
 8005d86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	f040 8119 	bne.w	8005fc0 <HAL_SPI_TransmitReceive+0x558>
    {
      if (hspi->TxXferCount > 1U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d912      	bls.n	8005dbe <HAL_SPI_TransmitReceive+0x356>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	881a      	ldrh	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	1c9a      	adds	r2, r3, #2
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b02      	subs	r3, #2
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dbc:	e100      	b.n	8005fc0 <HAL_SPI_TransmitReceive+0x558>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	330c      	adds	r3, #12
 8005dc8:	7812      	ldrb	r2, [r2, #0]
 8005dca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	87da      	strh	r2, [r3, #62]	; 0x3e

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f040 80e8 	bne.w	8005fc0 <HAL_SPI_TransmitReceive+0x558>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df8:	f040 80e2 	bne.w	8005fc0 <HAL_SPI_TransmitReceive+0x558>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10c      	bne.n	8005e20 <HAL_SPI_TransmitReceive+0x3b8>
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	f003 0308 	and.w	r3, r3, #8
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d007      	beq.n	8005e20 <HAL_SPI_TransmitReceive+0x3b8>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e1e:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e2e:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e30:	e0c6      	b.n	8005fc0 <HAL_SPI_TransmitReceive+0x558>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d158      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x48a>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d053      	beq.n	8005ef2 <HAL_SPI_TransmitReceive+0x48a>
 8005e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d150      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->TxXferCount > 1U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d912      	bls.n	8005e80 <HAL_SPI_TransmitReceive+0x418>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	881a      	ldrh	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	1c9a      	adds	r2, r3, #2
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b02      	subs	r3, #2
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e7e:	e012      	b.n	8005ea6 <HAL_SPI_TransmitReceive+0x43e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	330c      	adds	r3, #12
 8005e8a:	7812      	ldrb	r2, [r2, #0]
 8005e8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d11e      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x48a>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ebc:	d119      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x48a>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10c      	bne.n	8005ee2 <HAL_SPI_TransmitReceive+0x47a>
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	f003 0308 	and.w	r3, r3, #8
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <HAL_SPI_TransmitReceive+0x47a>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee0:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ef0:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d148      	bne.n	8005f92 <HAL_SPI_TransmitReceive+0x52a>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d042      	beq.n	8005f92 <HAL_SPI_TransmitReceive+0x52a>
      {
        if (hspi->RxXferCount > 1U)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d923      	bls.n	8005f60 <HAL_SPI_TransmitReceive+0x4f8>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	b292      	uxth	r2, r2
 8005f24:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	1c9a      	adds	r2, r3, #2
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	3b02      	subs	r3, #2
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d81f      	bhi.n	8005f8e <HAL_SPI_TransmitReceive+0x526>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	e016      	b.n	8005f8e <HAL_SPI_TransmitReceive+0x526>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f103 020c 	add.w	r2, r3, #12
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	7812      	ldrb	r2, [r2, #0]
 8005f6e:	b2d2      	uxtb	r2, r2
 8005f70:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	1c5a      	adds	r2, r3, #1
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f92:	f7fd fadf 	bl	8003554 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d803      	bhi.n	8005faa <HAL_SPI_TransmitReceive+0x542>
 8005fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa8:	d102      	bne.n	8005fb0 <HAL_SPI_TransmitReceive+0x548>
 8005faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d107      	bne.n	8005fc0 <HAL_SPI_TransmitReceive+0x558>
      {
        errorcode = HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        hspi->State = HAL_SPI_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005fbe:	e087      	b.n	80060d0 <HAL_SPI_TransmitReceive+0x668>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f47f af33 	bne.w	8005e32 <HAL_SPI_TransmitReceive+0x3ca>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f47f af2c 	bne.w	8005e32 <HAL_SPI_TransmitReceive+0x3ca>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe2:	d146      	bne.n	8006072 <HAL_SPI_TransmitReceive+0x60a>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fea:	2201      	movs	r2, #1
 8005fec:	2101      	movs	r1, #1
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fe9e 	bl	8006d30 <SPI_WaitFlagStateUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <HAL_SPI_TransmitReceive+0x5a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffe:	f043 0202 	orr.w	r2, r3, #2
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 800600c:	e060      	b.n	80060d0 <HAL_SPI_TransmitReceive+0x668>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006016:	d105      	bne.n	8006024 <HAL_SPI_TransmitReceive+0x5bc>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	e026      	b.n	8006072 <HAL_SPI_TransmitReceive+0x60a>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006034:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	2b02      	cmp	r3, #2
 800603c:	d119      	bne.n	8006072 <HAL_SPI_TransmitReceive+0x60a>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800603e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006044:	2201      	movs	r2, #1
 8006046:	2101      	movs	r1, #1
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fe71 	bl	8006d30 <SPI_WaitFlagStateUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d009      	beq.n	8006068 <HAL_SPI_TransmitReceive+0x600>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006058:	f043 0202 	orr.w	r2, r3, #2
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8006066:	e033      	b.n	80060d0 <HAL_SPI_TransmitReceive+0x668>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006070:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0310 	and.w	r3, r3, #16
 800607c:	2b10      	cmp	r3, #16
 800607e:	d10d      	bne.n	800609c <HAL_SPI_TransmitReceive+0x634>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006084:	f043 0202 	orr.w	r2, r3, #2
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006094:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800609c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800609e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 ffbb 	bl	800701c <SPI_EndRxTxTransaction>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <HAL_SPI_TransmitReceive+0x650>
  {
    errorcode = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x660>
  {
    errorcode = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80060c6:	e003      	b.n	80060d0 <HAL_SPI_TransmitReceive+0x668>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80060d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3740      	adds	r7, #64	; 0x40
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	4613      	mov	r3, r2
 80060f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <HAL_SPI_Transmit_IT+0x1e>
 80060fc:	88fb      	ldrh	r3, [r7, #6]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d102      	bne.n	8006108 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006106:	e082      	b.n	800620e <HAL_SPI_Transmit_IT+0x12a>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	d002      	beq.n	800611a <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8006114:	2302      	movs	r3, #2
 8006116:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006118:	e079      	b.n	800620e <HAL_SPI_Transmit_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006120:	2b01      	cmp	r3, #1
 8006122:	d101      	bne.n	8006128 <HAL_SPI_Transmit_IT+0x44>
 8006124:	2302      	movs	r3, #2
 8006126:	e073      	b.n	8006210 <HAL_SPI_Transmit_IT+0x12c>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2203      	movs	r2, #3
 8006134:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	88fa      	ldrh	r2, [r7, #6]
 8006148:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	88fa      	ldrh	r2, [r7, #6]
 800614e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006174:	d903      	bls.n	800617e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a28      	ldr	r2, [pc, #160]	; (800621c <HAL_SPI_Transmit_IT+0x138>)
 800617a:	651a      	str	r2, [r3, #80]	; 0x50
 800617c:	e002      	b.n	8006184 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a27      	ldr	r2, [pc, #156]	; (8006220 <HAL_SPI_Transmit_IT+0x13c>)
 8006182:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800618c:	d10f      	bne.n	80061ae <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800619c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ac:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b6:	d10f      	bne.n	80061d8 <HAL_SPI_Transmit_IT+0xf4>
  {
    SPI_RESET_CRC(hspi);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061d6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b40      	cmp	r3, #64	; 0x40
 80061e4:	d007      	beq.n	80061f6 <HAL_SPI_Transmit_IT+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061f4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800620c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800620e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006210:	4618      	mov	r0, r3
 8006212:	371c      	adds	r7, #28
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	08006cd1 	.word	0x08006cd1
 8006220:	08006c71 	.word	0x08006c71

08006224 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4613      	mov	r3, r2
 8006230:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b01      	cmp	r3, #1
 8006240:	d002      	beq.n	8006248 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8006242:	2302      	movs	r3, #2
 8006244:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006246:	e0ba      	b.n	80063be <HAL_SPI_Receive_IT+0x19a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d110      	bne.n	8006272 <HAL_SPI_Receive_IT+0x4e>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006258:	d10b      	bne.n	8006272 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2204      	movs	r2, #4
 800625e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8006262:	88fb      	ldrh	r3, [r7, #6]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	68b9      	ldr	r1, [r7, #8]
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f8b1 	bl	80063d0 <HAL_SPI_TransmitReceive_IT>
 800626e:	4603      	mov	r3, r0
 8006270:	e0a6      	b.n	80063c0 <HAL_SPI_Receive_IT+0x19c>
  }


  if ((pData == NULL) || (Size == 0U))
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_SPI_Receive_IT+0x5a>
 8006278:	88fb      	ldrh	r3, [r7, #6]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006282:	e09c      	b.n	80063be <HAL_SPI_Receive_IT+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_SPI_Receive_IT+0x6e>
 800628e:	2302      	movs	r3, #2
 8006290:	e096      	b.n	80063c0 <HAL_SPI_Receive_IT+0x19c>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2204      	movs	r2, #4
 800629e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	88fa      	ldrh	r2, [r7, #6]
 80062b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	88fa      	ldrh	r2, [r7, #6]
 80062ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062de:	d90b      	bls.n	80062f8 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062ee:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4a35      	ldr	r2, [pc, #212]	; (80063c8 <HAL_SPI_Receive_IT+0x1a4>)
 80062f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80062f6:	e00a      	b.n	800630e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006306:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	4a30      	ldr	r2, [pc, #192]	; (80063cc <HAL_SPI_Receive_IT+0x1a8>)
 800630c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006316:	d10f      	bne.n	8006338 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006326:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006336:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006340:	d11f      	bne.n	8006382 <HAL_SPI_Receive_IT+0x15e>
  {
    hspi->CRCSize = 1U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006350:	d806      	bhi.n	8006360 <HAL_SPI_Receive_IT+0x13c>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	2b02      	cmp	r3, #2
 8006358:	d102      	bne.n	8006360 <HAL_SPI_Receive_IT+0x13c>
    {
      hspi->CRCSize = 2U;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2202      	movs	r2, #2
 800635e:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e002      	b.n	8006388 <HAL_SPI_Receive_IT+0x164>
  }
  else
  {
    hspi->CRCSize = 0U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	649a      	str	r2, [r3, #72]	; 0x48
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006392:	2b40      	cmp	r3, #64	; 0x40
 8006394:	d007      	beq.n	80063a6 <HAL_SPI_Receive_IT+0x182>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063a4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80063bc:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80063be:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	08006be9 	.word	0x08006be9
 80063cc:	08006b29 	.word	0x08006b29

080063d0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063e8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063f0:	7dbb      	ldrb	r3, [r7, #22]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d00d      	beq.n	8006412 <HAL_SPI_TransmitReceive_IT+0x42>
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063fc:	d106      	bne.n	800640c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <HAL_SPI_TransmitReceive_IT+0x3c>
 8006406:	7dbb      	ldrb	r3, [r7, #22]
 8006408:	2b04      	cmp	r3, #4
 800640a:	d002      	beq.n	8006412 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 800640c:	2302      	movs	r3, #2
 800640e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006410:	e0a5      	b.n	800655e <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d005      	beq.n	8006424 <HAL_SPI_TransmitReceive_IT+0x54>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <HAL_SPI_TransmitReceive_IT+0x54>
 800641e:	887b      	ldrh	r3, [r7, #2]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d102      	bne.n	800642a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006428:	e099      	b.n	800655e <HAL_SPI_TransmitReceive_IT+0x18e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_SPI_TransmitReceive_IT+0x68>
 8006434:	2302      	movs	r3, #2
 8006436:	e093      	b.n	8006560 <HAL_SPI_TransmitReceive_IT+0x190>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b04      	cmp	r3, #4
 800644a:	d003      	beq.n	8006454 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2205      	movs	r2, #5
 8006450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	887a      	ldrh	r2, [r7, #2]
 8006464:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	887a      	ldrh	r2, [r7, #2]
 800646a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	887a      	ldrh	r2, [r7, #2]
 8006476:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	887a      	ldrh	r2, [r7, #2]
 800647e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800648a:	d906      	bls.n	800649a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4a37      	ldr	r2, [pc, #220]	; (800656c <HAL_SPI_TransmitReceive_IT+0x19c>)
 8006490:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4a36      	ldr	r2, [pc, #216]	; (8006570 <HAL_SPI_TransmitReceive_IT+0x1a0>)
 8006496:	651a      	str	r2, [r3, #80]	; 0x50
 8006498:	e005      	b.n	80064a6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4a35      	ldr	r2, [pc, #212]	; (8006574 <HAL_SPI_TransmitReceive_IT+0x1a4>)
 800649e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4a35      	ldr	r2, [pc, #212]	; (8006578 <HAL_SPI_TransmitReceive_IT+0x1a8>)
 80064a4:	651a      	str	r2, [r3, #80]	; 0x50
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ae:	d11f      	bne.n	80064f0 <HAL_SPI_TransmitReceive_IT+0x120>
  {
    hspi->CRCSize = 1U;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064be:	d806      	bhi.n	80064ce <HAL_SPI_TransmitReceive_IT+0xfe>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d102      	bne.n	80064ce <HAL_SPI_TransmitReceive_IT+0xfe>
    {
      hspi->CRCSize = 2U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2202      	movs	r2, #2
 80064cc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    SPI_RESET_CRC(hspi);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e002      	b.n	80064f6 <HAL_SPI_TransmitReceive_IT+0x126>
  }
  else
  {
    hspi->CRCSize = 0U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	649a      	str	r2, [r3, #72]	; 0x48
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064fe:	d802      	bhi.n	8006506 <HAL_SPI_TransmitReceive_IT+0x136>
 8006500:	887b      	ldrh	r3, [r7, #2]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d908      	bls.n	8006518 <HAL_SPI_TransmitReceive_IT+0x148>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006514:	605a      	str	r2, [r3, #4]
 8006516:	e007      	b.n	8006528 <HAL_SPI_TransmitReceive_IT+0x158>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006526:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006532:	2b40      	cmp	r3, #64	; 0x40
 8006534:	d007      	beq.n	8006546 <HAL_SPI_TransmitReceive_IT+0x176>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006544:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800655c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800655e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006560:	4618      	mov	r0, r3
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	080069b1 	.word	0x080069b1
 8006570:	08006a61 	.word	0x08006a61
 8006574:	080067b9 	.word	0x080067b9
 8006578:	080068f5 	.word	0x080068f5

0800657c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b088      	sub	sp, #32
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10e      	bne.n	80065bc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d009      	beq.n	80065bc <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
    return;
 80065ba:	e0ce      	b.n	800675a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d009      	beq.n	80065da <HAL_SPI_IRQHandler+0x5e>
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d004      	beq.n	80065da <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	4798      	blx	r3
    return;
 80065d8:	e0bf      	b.n	800675a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	f003 0320 	and.w	r3, r3, #32
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <HAL_SPI_IRQHandler+0x7e>
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d105      	bne.n	80065fa <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 80b0 	beq.w	800675a <HAL_SPI_IRQHandler+0x1de>
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	f003 0320 	and.w	r3, r3, #32
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80aa 	beq.w	800675a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b00      	cmp	r3, #0
 800660e:	d023      	beq.n	8006658 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b03      	cmp	r3, #3
 800661a:	d011      	beq.n	8006640 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006620:	f043 0204 	orr.w	r2, r3, #4
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006628:	2300      	movs	r3, #0
 800662a:	617b      	str	r3, [r7, #20]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	e00b      	b.n	8006658 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006640:	2300      	movs	r3, #0
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	613b      	str	r3, [r7, #16]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	613b      	str	r3, [r7, #16]
 8006654:	693b      	ldr	r3, [r7, #16]
        return;
 8006656:	e080      	b.n	800675a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	f003 0320 	and.w	r3, r3, #32
 800665e:	2b00      	cmp	r3, #0
 8006660:	d014      	beq.n	800668c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006666:	f043 0201 	orr.w	r2, r3, #1
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00c      	beq.n	80066b0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800669a:	f043 0208 	orr.w	r2, r3, #8
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066a2:	2300      	movs	r3, #0
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	60bb      	str	r3, [r7, #8]
 80066ae:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d04f      	beq.n	8006758 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066c6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <HAL_SPI_IRQHandler+0x168>
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d034      	beq.n	800674e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0203 	bic.w	r2, r2, #3
 80066f2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d011      	beq.n	8006720 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006700:	4a17      	ldr	r2, [pc, #92]	; (8006760 <HAL_SPI_IRQHandler+0x1e4>)
 8006702:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006708:	4618      	mov	r0, r3
 800670a:	f7fd f864 	bl	80037d6 <HAL_DMA_Abort_IT>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006718:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006724:	2b00      	cmp	r3, #0
 8006726:	d016      	beq.n	8006756 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672c:	4a0c      	ldr	r2, [pc, #48]	; (8006760 <HAL_SPI_IRQHandler+0x1e4>)
 800672e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006734:	4618      	mov	r0, r3
 8006736:	f7fd f84e 	bl	80037d6 <HAL_DMA_Abort_IT>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006744:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800674c:	e003      	b.n	8006756 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f812 	bl	8006778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006754:	e000      	b.n	8006758 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006756:	bf00      	nop
    return;
 8006758:	bf00      	nop
  }
}
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	0800678d 	.word	0x0800678d

08006764 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006798:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff ffe5 	bl	8006778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
	...

080067b8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d923      	bls.n	8006814 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	b292      	uxth	r2, r2
 80067d8:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	1c9a      	adds	r2, r3, #2
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b02      	subs	r3, #2
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d11f      	bne.n	8006842 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006810:	605a      	str	r2, [r3, #4]
 8006812:	e016      	b.n	8006842 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f103 020c 	add.w	r2, r3, #12
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006820:	7812      	ldrb	r2, [r2, #0]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d120      	bne.n	8006890 <SPI_2linesRxISR_8BIT+0xd8>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006856:	d10b      	bne.n	8006870 <SPI_2linesRxISR_8BIT+0xb8>
    {
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006866:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a0b      	ldr	r2, [pc, #44]	; (8006898 <SPI_2linesRxISR_8BIT+0xe0>)
 800686c:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 800686e:	e00f      	b.n	8006890 <SPI_2linesRxISR_8BIT+0xd8>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800687e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006884:	b29b      	uxth	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d102      	bne.n	8006890 <SPI_2linesRxISR_8BIT+0xd8>
    {
      SPI_CloseRxTx_ISR(hspi);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fc0c 	bl	80070a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	0800689d 	.word	0x0800689d

0800689c <SPI_2linesRxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	330c      	adds	r3, #12
 80068ae:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 80068b8:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068be:	1e5a      	subs	r2, r3, #1
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Check end of the reception */
  if (hspi->CRCSize == 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10f      	bne.n	80068ec <SPI_2linesRxISR_8BITCRC+0x50>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068da:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <SPI_2linesRxISR_8BITCRC+0x50>
    {
      SPI_CloseRxTx_ISR(hspi);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fbde 	bl	80070a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80068ec:	bf00      	nop
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b01      	cmp	r3, #1
 8006904:	d912      	bls.n	800692c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	881a      	ldrh	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	1c9a      	adds	r2, r3, #2
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b02      	subs	r3, #2
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	87da      	strh	r2, [r3, #62]	; 0x3e
 800692a:	e012      	b.n	8006952 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	7812      	ldrb	r2, [r2, #0]
 8006938:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006948:	b29b      	uxth	r3, r3
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d126      	bne.n	80069aa <SPI_2linesTxISR_8BIT+0xb6>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006964:	d110      	bne.n	8006988 <SPI_2linesTxISR_8BIT+0x94>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006974:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006984:	605a      	str	r2, [r3, #4]
      return;
 8006986:	e010      	b.n	80069aa <SPI_2linesTxISR_8BIT+0xb6>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006996:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <SPI_2linesTxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fb7f 	bl	80070a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c2:	b292      	uxth	r2, r2
 80069c4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	1c9a      	adds	r2, r3, #2
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d118      	bne.n	8006a20 <SPI_2linesRxISR_16BIT+0x70>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f6:	d103      	bne.n	8006a00 <SPI_2linesRxISR_16BIT+0x50>
    {
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a0b      	ldr	r2, [pc, #44]	; (8006a28 <SPI_2linesRxISR_16BIT+0x78>)
 80069fc:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 80069fe:	e00f      	b.n	8006a20 <SPI_2linesRxISR_16BIT+0x70>
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685a      	ldr	r2, [r3, #4]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a0e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <SPI_2linesRxISR_16BIT+0x70>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fb44 	bl	80070a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	08006a2d 	.word	0x08006a2d

08006a2c <SPI_2linesRxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006a40:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a50:	605a      	str	r2, [r3, #4]

  SPI_CloseRxTx_ISR(hspi);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fb28 	bl	80070a8 <SPI_CloseRxTx_ISR>
}
 8006a58:	bf00      	nop
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6c:	881a      	ldrh	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	1c9a      	adds	r2, r3, #2
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d126      	bne.n	8006ae4 <SPI_2linesTxISR_16BIT+0x84>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a9e:	d110      	bne.n	8006ac2 <SPI_2linesTxISR_16BIT+0x62>
    {
      /* Set CRC Next Bit to send CRC */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aae:	601a      	str	r2, [r3, #0]
      /* Disable TXE interrupt */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006abe:	605a      	str	r2, [r3, #4]
      return;
 8006ac0:	e010      	b.n	8006ae4 <SPI_2linesTxISR_16BIT+0x84>
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ad0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <SPI_2linesTxISR_16BIT+0x84>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fae2 	bl	80070a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <SPI_RxISR_8BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	72fb      	strb	r3, [r7, #11]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	60fb      	str	r3, [r7, #12]
  /* Read 8bit CRC to flush Data Register */
  tmpreg8 = *ptmpreg8;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	72fb      	strb	r3, [r7, #11]
  /* To avoid GCC warning */
  UNUSED(tmpreg8);
 8006b06:	7afb      	ldrb	r3, [r7, #11]

  hspi->CRCSize--;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0c:	1e5a      	subs	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	649a      	str	r2, [r3, #72]	; 0x48

  if (hspi->CRCSize == 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d102      	bne.n	8006b20 <SPI_RxISR_8BITCRC+0x36>
  {
    SPI_CloseRx_ISR(hspi);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fb20 	bl	8007160 <SPI_CloseRx_ISR>
  }
}
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f103 020c 	add.w	r2, r3, #12
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	7812      	ldrb	r2, [r2, #0]
 8006b3e:	b2d2      	uxtb	r2, r2
 8006b40:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d10c      	bne.n	8006b84 <SPI_RxISR_8BIT+0x5c>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b72:	d107      	bne.n	8006b84 <SPI_RxISR_8BIT+0x5c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b82:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10b      	bne.n	8006ba8 <SPI_RxISR_8BIT+0x80>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b98:	d103      	bne.n	8006ba2 <SPI_RxISR_8BIT+0x7a>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a04      	ldr	r2, [pc, #16]	; (8006bb0 <SPI_RxISR_8BIT+0x88>)
 8006b9e:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006ba0:	e002      	b.n	8006ba8 <SPI_RxISR_8BIT+0x80>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fadc 	bl	8007160 <SPI_CloseRx_ISR>
  }
}
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	08006aeb 	.word	0x08006aeb

08006bb4 <SPI_RxISR_16BITCRC>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BITCRC(struct __SPI_HandleTypeDef *hspi)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Read 16bit CRC to flush Data Register */
  tmpreg = READ_REG(hspi->Instance->DR);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8006bc8:	68fb      	ldr	r3, [r7, #12]

  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685a      	ldr	r2, [r3, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006bd8:	605a      	str	r2, [r3, #4]

  SPI_CloseRx_ISR(hspi);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fac0 	bl	8007160 <SPI_CloseRx_ISR>
}
 8006be0:	bf00      	nop
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	b292      	uxth	r2, r2
 8006bfc:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	1c9a      	adds	r2, r3, #2
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10c      	bne.n	8006c40 <SPI_RxISR_16BIT+0x58>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c2e:	d107      	bne.n	8006c40 <SPI_RxISR_16BIT+0x58>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c3e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10b      	bne.n	8006c64 <SPI_RxISR_16BIT+0x7c>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c54:	d103      	bne.n	8006c5e <SPI_RxISR_16BIT+0x76>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a04      	ldr	r2, [pc, #16]	; (8006c6c <SPI_RxISR_16BIT+0x84>)
 8006c5a:	64da      	str	r2, [r3, #76]	; 0x4c
      return;
 8006c5c:	e002      	b.n	8006c64 <SPI_RxISR_16BIT+0x7c>
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa7e 	bl	8007160 <SPI_CloseRx_ISR>
  }
}
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	08006bb5 	.word	0x08006bb5

08006c70 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	330c      	adds	r3, #12
 8006c82:	7812      	ldrb	r2, [r2, #0]
 8006c84:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10f      	bne.n	8006cc8 <SPI_TxISR_8BIT+0x58>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb0:	d107      	bne.n	8006cc2 <SPI_TxISR_8BIT+0x52>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cc0:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fa92 	bl	80071ec <SPI_CloseTx_ISR>
  }
}
 8006cc8:	bf00      	nop
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cdc:	881a      	ldrh	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	1c9a      	adds	r2, r3, #2
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10f      	bne.n	8006d26 <SPI_TxISR_16BIT+0x56>
  {
#if (USE_SPI_CRC != 0U)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d0e:	d107      	bne.n	8006d20 <SPI_TxISR_16BIT+0x50>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d1e:	601a      	str	r2, [r3, #0]
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fa63 	bl	80071ec <SPI_CloseTx_ISR>
  }
}
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b088      	sub	sp, #32
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d40:	f7fc fc08 	bl	8003554 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	1a9b      	subs	r3, r3, r2
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d50:	f7fc fc00 	bl	8003554 <HAL_GetTick>
 8006d54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d56:	4b39      	ldr	r3, [pc, #228]	; (8006e3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	015b      	lsls	r3, r3, #5
 8006d5c:	0d1b      	lsrs	r3, r3, #20
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	fb02 f303 	mul.w	r3, r2, r3
 8006d64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d66:	e054      	b.n	8006e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	d050      	beq.n	8006e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d70:	f7fc fbf0 	bl	8003554 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d902      	bls.n	8006d86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d13d      	bne.n	8006e02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d9e:	d111      	bne.n	8006dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da8:	d004      	beq.n	8006db4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db2:	d107      	bne.n	8006dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dcc:	d10f      	bne.n	8006dee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e017      	b.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	bf0c      	ite	eq
 8006e22:	2301      	moveq	r3, #1
 8006e24:	2300      	movne	r3, #0
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	461a      	mov	r2, r3
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d19b      	bne.n	8006d68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3720      	adds	r7, #32
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000010 	.word	0x20000010

08006e40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	; 0x28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e52:	f7fc fb7f 	bl	8003554 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	1a9b      	subs	r3, r3, r2
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	4413      	add	r3, r2
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006e62:	f7fc fb77 	bl	8003554 <HAL_GetTick>
 8006e66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	330c      	adds	r3, #12
 8006e6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006e70:	4b3d      	ldr	r3, [pc, #244]	; (8006f68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	00da      	lsls	r2, r3, #3
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	0d1b      	lsrs	r3, r3, #20
 8006e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e82:	fb02 f303 	mul.w	r3, r2, r3
 8006e86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006e88:	e060      	b.n	8006f4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006e90:	d107      	bne.n	8006ea2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea8:	d050      	beq.n	8006f4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eaa:	f7fc fb53 	bl	8003554 <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d902      	bls.n	8006ec0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d13d      	bne.n	8006f3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ece:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed8:	d111      	bne.n	8006efe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee2:	d004      	beq.n	8006eee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eec:	d107      	bne.n	8006efe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006efc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f06:	d10f      	bne.n	8006f28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e010      	b.n	8006f5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	4013      	ands	r3, r2
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d196      	bne.n	8006e8a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3728      	adds	r7, #40	; 0x28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000010 	.word	0x20000010

08006f6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af02      	add	r7, sp, #8
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f80:	d111      	bne.n	8006fa6 <SPI_EndRxTransaction+0x3a>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f8a:	d004      	beq.n	8006f96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f94:	d107      	bne.n	8006fa6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fa4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2200      	movs	r2, #0
 8006fae:	2180      	movs	r1, #128	; 0x80
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff febd 	bl	8006d30 <SPI_WaitFlagStateUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d007      	beq.n	8006fcc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fc0:	f043 0220 	orr.w	r2, r3, #32
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e023      	b.n	8007014 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fd4:	d11d      	bne.n	8007012 <SPI_EndRxTransaction+0xa6>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fde:	d004      	beq.n	8006fea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe8:	d113      	bne.n	8007012 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ff6:	68f8      	ldr	r0, [r7, #12]
 8006ff8:	f7ff ff22 	bl	8006e40 <SPI_WaitFifoStateUntilTimeout>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d007      	beq.n	8007012 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007006:	f043 0220 	orr.w	r2, r3, #32
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e000      	b.n	8007014 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af02      	add	r7, sp, #8
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2200      	movs	r2, #0
 8007030:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff ff03 	bl	8006e40 <SPI_WaitFifoStateUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d007      	beq.n	8007050 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007044:	f043 0220 	orr.w	r2, r3, #32
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e027      	b.n	80070a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2200      	movs	r2, #0
 8007058:	2180      	movs	r1, #128	; 0x80
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f7ff fe68 	bl	8006d30 <SPI_WaitFlagStateUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800706a:	f043 0220 	orr.w	r2, r3, #32
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e014      	b.n	80070a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2200      	movs	r2, #0
 800707e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f7ff fedc 	bl	8006e40 <SPI_WaitFifoStateUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d007      	beq.n	800709e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007092:	f043 0220 	orr.w	r2, r3, #32
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e000      	b.n	80070a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070b0:	f7fc fa50 	bl	8003554 <HAL_GetTick>
 80070b4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0220 	bic.w	r2, r2, #32
 80070c4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	2164      	movs	r1, #100	; 0x64
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff ffa6 	bl	800701c <SPI_EndRxTxTransaction>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d005      	beq.n	80070e2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070da:	f043 0220 	orr.w	r2, r3, #32
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	661a      	str	r2, [r3, #96]	; 0x60
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b10      	cmp	r3, #16
 80070ee:	d112      	bne.n	8007116 <SPI_CloseRxTx_ISR+0x6e>
  {
    hspi->State = HAL_SPI_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070fc:	f043 0202 	orr.w	r2, r3, #2
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800710c:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7ff fb32 	bl	8006778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8007114:	e020      	b.n	8007158 <SPI_CloseRxTx_ISR+0xb0>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800711a:	2b00      	cmp	r3, #0
 800711c:	d115      	bne.n	800714a <SPI_CloseRxTx_ISR+0xa2>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b04      	cmp	r3, #4
 8007128:	d107      	bne.n	800713a <SPI_CloseRxTx_ISR+0x92>
        hspi->State = HAL_SPI_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_RxCpltCallback(hspi);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7fb fcba 	bl	8002aac <HAL_SPI_RxCpltCallback>
}
 8007138:	e00e      	b.n	8007158 <SPI_CloseRxTx_ISR+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff fb0e 	bl	8006764 <HAL_SPI_TxRxCpltCallback>
}
 8007148:	e006      	b.n	8007158 <SPI_CloseRxTx_ISR+0xb0>
      hspi->State = HAL_SPI_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff fb10 	bl	8006778 <HAL_SPI_ErrorCallback>
}
 8007158:	bf00      	nop
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007176:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8007178:	f7fc f9ec 	bl	8003554 <HAL_GetTick>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	2164      	movs	r1, #100	; 0x64
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff fef2 	bl	8006f6c <SPI_EndRxTransaction>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007192:	f043 0220 	orr.w	r2, r3, #32
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 0310 	and.w	r3, r3, #16
 80071ac:	2b10      	cmp	r3, #16
 80071ae:	d10e      	bne.n	80071ce <SPI_CloseRx_ISR+0x6e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071b4:	f043 0202 	orr.w	r2, r3, #2
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80071c4:	609a      	str	r2, [r3, #8]
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7ff fad6 	bl	8006778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80071cc:	e00a      	b.n	80071e4 <SPI_CloseRx_ISR+0x84>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d103      	bne.n	80071de <SPI_CloseRx_ISR+0x7e>
      HAL_SPI_RxCpltCallback(hspi);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f7fb fc68 	bl	8002aac <HAL_SPI_RxCpltCallback>
}
 80071dc:	e002      	b.n	80071e4 <SPI_CloseRx_ISR+0x84>
      HAL_SPI_ErrorCallback(hspi);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff faca 	bl	8006778 <HAL_SPI_ErrorCallback>
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071f4:	f7fc f9ae 	bl	8003554 <HAL_GetTick>
 80071f8:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007208:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	2164      	movs	r1, #100	; 0x64
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff ff04 	bl	800701c <SPI_EndRxTxTransaction>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721e:	f043 0220 	orr.w	r2, r3, #32
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10a      	bne.n	8007244 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800722e:	2300      	movs	r3, #0
 8007230:	60bb      	str	r3, [r7, #8]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	60bb      	str	r3, [r7, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff fa8f 	bl	8006778 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800725a:	e002      	b.n	8007262 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7fb fc39 	bl	8002ad4 <HAL_SPI_TxCpltCallback>
}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e040      	b.n	80072fe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f83a 	bl	8007306 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2224      	movs	r2, #36	; 0x24
 8007296:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0201 	bic.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fb75 	bl	80079a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f8ba 	bl	8007430 <UART_SetConfig>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e01b      	b.n	80072fe <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f042 0201 	orr.w	r2, r2, #1
 80072f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fbf4 	bl	8007ae4 <UART_CheckIdleState>
 80072fc:	4603      	mov	r3, r0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b08a      	sub	sp, #40	; 0x28
 800731e:	af02      	add	r7, sp, #8
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	603b      	str	r3, [r7, #0]
 8007326:	4613      	mov	r3, r2
 8007328:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800732e:	2b20      	cmp	r3, #32
 8007330:	d178      	bne.n	8007424 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <HAL_UART_Transmit+0x24>
 8007338:	88fb      	ldrh	r3, [r7, #6]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e071      	b.n	8007426 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2221      	movs	r2, #33	; 0x21
 800734e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007350:	f7fc f900 	bl	8003554 <HAL_GetTick>
 8007354:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	88fa      	ldrh	r2, [r7, #6]
 800735a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	88fa      	ldrh	r2, [r7, #6]
 8007362:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800736e:	d108      	bne.n	8007382 <HAL_UART_Transmit+0x68>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d104      	bne.n	8007382 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007378:	2300      	movs	r3, #0
 800737a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	61bb      	str	r3, [r7, #24]
 8007380:	e003      	b.n	800738a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800738a:	e030      	b.n	80073ee <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	2200      	movs	r2, #0
 8007394:	2180      	movs	r1, #128	; 0x80
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f000 fc4c 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d004      	beq.n	80073ac <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2220      	movs	r2, #32
 80073a6:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e03c      	b.n	8007426 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10b      	bne.n	80073ca <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	881a      	ldrh	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073be:	b292      	uxth	r2, r2
 80073c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	3302      	adds	r3, #2
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	e008      	b.n	80073dc <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	b292      	uxth	r2, r2
 80073d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	3301      	adds	r3, #1
 80073da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	3b01      	subs	r3, #1
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1c8      	bne.n	800738c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2200      	movs	r2, #0
 8007402:	2140      	movs	r1, #64	; 0x40
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fc15 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e005      	b.n	8007426 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2220      	movs	r2, #32
 800741e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	e000      	b.n	8007426 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007424:	2302      	movs	r3, #2
  }
}
 8007426:	4618      	mov	r0, r3
 8007428:	3720      	adds	r7, #32
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
	...

08007430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007434:	b08a      	sub	sp, #40	; 0x28
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	431a      	orrs	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	431a      	orrs	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	4313      	orrs	r3, r2
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	4ba4      	ldr	r3, [pc, #656]	; (80076f0 <UART_SetConfig+0x2c0>)
 8007460:	4013      	ands	r3, r2
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007468:	430b      	orrs	r3, r1
 800746a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a99      	ldr	r2, [pc, #612]	; (80076f4 <UART_SetConfig+0x2c4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d004      	beq.n	800749c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007498:	4313      	orrs	r3, r2
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ac:	430a      	orrs	r2, r1
 80074ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a90      	ldr	r2, [pc, #576]	; (80076f8 <UART_SetConfig+0x2c8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d126      	bne.n	8007508 <UART_SetConfig+0xd8>
 80074ba:	4b90      	ldr	r3, [pc, #576]	; (80076fc <UART_SetConfig+0x2cc>)
 80074bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c0:	f003 0303 	and.w	r3, r3, #3
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d81b      	bhi.n	8007500 <UART_SetConfig+0xd0>
 80074c8:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <UART_SetConfig+0xa0>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	080074e1 	.word	0x080074e1
 80074d4:	080074f1 	.word	0x080074f1
 80074d8:	080074e9 	.word	0x080074e9
 80074dc:	080074f9 	.word	0x080074f9
 80074e0:	2301      	movs	r3, #1
 80074e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074e6:	e116      	b.n	8007716 <UART_SetConfig+0x2e6>
 80074e8:	2302      	movs	r3, #2
 80074ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ee:	e112      	b.n	8007716 <UART_SetConfig+0x2e6>
 80074f0:	2304      	movs	r3, #4
 80074f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074f6:	e10e      	b.n	8007716 <UART_SetConfig+0x2e6>
 80074f8:	2308      	movs	r3, #8
 80074fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074fe:	e10a      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007500:	2310      	movs	r3, #16
 8007502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007506:	e106      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a7c      	ldr	r2, [pc, #496]	; (8007700 <UART_SetConfig+0x2d0>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d138      	bne.n	8007584 <UART_SetConfig+0x154>
 8007512:	4b7a      	ldr	r3, [pc, #488]	; (80076fc <UART_SetConfig+0x2cc>)
 8007514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007518:	f003 030c 	and.w	r3, r3, #12
 800751c:	2b0c      	cmp	r3, #12
 800751e:	d82d      	bhi.n	800757c <UART_SetConfig+0x14c>
 8007520:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <UART_SetConfig+0xf8>)
 8007522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007526:	bf00      	nop
 8007528:	0800755d 	.word	0x0800755d
 800752c:	0800757d 	.word	0x0800757d
 8007530:	0800757d 	.word	0x0800757d
 8007534:	0800757d 	.word	0x0800757d
 8007538:	0800756d 	.word	0x0800756d
 800753c:	0800757d 	.word	0x0800757d
 8007540:	0800757d 	.word	0x0800757d
 8007544:	0800757d 	.word	0x0800757d
 8007548:	08007565 	.word	0x08007565
 800754c:	0800757d 	.word	0x0800757d
 8007550:	0800757d 	.word	0x0800757d
 8007554:	0800757d 	.word	0x0800757d
 8007558:	08007575 	.word	0x08007575
 800755c:	2300      	movs	r3, #0
 800755e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007562:	e0d8      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007564:	2302      	movs	r3, #2
 8007566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756a:	e0d4      	b.n	8007716 <UART_SetConfig+0x2e6>
 800756c:	2304      	movs	r3, #4
 800756e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007572:	e0d0      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007574:	2308      	movs	r3, #8
 8007576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800757a:	e0cc      	b.n	8007716 <UART_SetConfig+0x2e6>
 800757c:	2310      	movs	r3, #16
 800757e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007582:	e0c8      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a5e      	ldr	r2, [pc, #376]	; (8007704 <UART_SetConfig+0x2d4>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d125      	bne.n	80075da <UART_SetConfig+0x1aa>
 800758e:	4b5b      	ldr	r3, [pc, #364]	; (80076fc <UART_SetConfig+0x2cc>)
 8007590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007594:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007598:	2b30      	cmp	r3, #48	; 0x30
 800759a:	d016      	beq.n	80075ca <UART_SetConfig+0x19a>
 800759c:	2b30      	cmp	r3, #48	; 0x30
 800759e:	d818      	bhi.n	80075d2 <UART_SetConfig+0x1a2>
 80075a0:	2b20      	cmp	r3, #32
 80075a2:	d00a      	beq.n	80075ba <UART_SetConfig+0x18a>
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	d814      	bhi.n	80075d2 <UART_SetConfig+0x1a2>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <UART_SetConfig+0x182>
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d008      	beq.n	80075c2 <UART_SetConfig+0x192>
 80075b0:	e00f      	b.n	80075d2 <UART_SetConfig+0x1a2>
 80075b2:	2300      	movs	r3, #0
 80075b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075b8:	e0ad      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075ba:	2302      	movs	r3, #2
 80075bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075c0:	e0a9      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075c2:	2304      	movs	r3, #4
 80075c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075c8:	e0a5      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075ca:	2308      	movs	r3, #8
 80075cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075d0:	e0a1      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075d2:	2310      	movs	r3, #16
 80075d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075d8:	e09d      	b.n	8007716 <UART_SetConfig+0x2e6>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a4a      	ldr	r2, [pc, #296]	; (8007708 <UART_SetConfig+0x2d8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d125      	bne.n	8007630 <UART_SetConfig+0x200>
 80075e4:	4b45      	ldr	r3, [pc, #276]	; (80076fc <UART_SetConfig+0x2cc>)
 80075e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075ee:	2bc0      	cmp	r3, #192	; 0xc0
 80075f0:	d016      	beq.n	8007620 <UART_SetConfig+0x1f0>
 80075f2:	2bc0      	cmp	r3, #192	; 0xc0
 80075f4:	d818      	bhi.n	8007628 <UART_SetConfig+0x1f8>
 80075f6:	2b80      	cmp	r3, #128	; 0x80
 80075f8:	d00a      	beq.n	8007610 <UART_SetConfig+0x1e0>
 80075fa:	2b80      	cmp	r3, #128	; 0x80
 80075fc:	d814      	bhi.n	8007628 <UART_SetConfig+0x1f8>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <UART_SetConfig+0x1d8>
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d008      	beq.n	8007618 <UART_SetConfig+0x1e8>
 8007606:	e00f      	b.n	8007628 <UART_SetConfig+0x1f8>
 8007608:	2300      	movs	r3, #0
 800760a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800760e:	e082      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007610:	2302      	movs	r3, #2
 8007612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007616:	e07e      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007618:	2304      	movs	r3, #4
 800761a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800761e:	e07a      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007620:	2308      	movs	r3, #8
 8007622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007626:	e076      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007628:	2310      	movs	r3, #16
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800762e:	e072      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a35      	ldr	r2, [pc, #212]	; (800770c <UART_SetConfig+0x2dc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d12a      	bne.n	8007690 <UART_SetConfig+0x260>
 800763a:	4b30      	ldr	r3, [pc, #192]	; (80076fc <UART_SetConfig+0x2cc>)
 800763c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007648:	d01a      	beq.n	8007680 <UART_SetConfig+0x250>
 800764a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800764e:	d81b      	bhi.n	8007688 <UART_SetConfig+0x258>
 8007650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007654:	d00c      	beq.n	8007670 <UART_SetConfig+0x240>
 8007656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765a:	d815      	bhi.n	8007688 <UART_SetConfig+0x258>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <UART_SetConfig+0x238>
 8007660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007664:	d008      	beq.n	8007678 <UART_SetConfig+0x248>
 8007666:	e00f      	b.n	8007688 <UART_SetConfig+0x258>
 8007668:	2300      	movs	r3, #0
 800766a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800766e:	e052      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007670:	2302      	movs	r3, #2
 8007672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007676:	e04e      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007678:	2304      	movs	r3, #4
 800767a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800767e:	e04a      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007680:	2308      	movs	r3, #8
 8007682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007686:	e046      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007688:	2310      	movs	r3, #16
 800768a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800768e:	e042      	b.n	8007716 <UART_SetConfig+0x2e6>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a17      	ldr	r2, [pc, #92]	; (80076f4 <UART_SetConfig+0x2c4>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d13a      	bne.n	8007710 <UART_SetConfig+0x2e0>
 800769a:	4b18      	ldr	r3, [pc, #96]	; (80076fc <UART_SetConfig+0x2cc>)
 800769c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076a8:	d01a      	beq.n	80076e0 <UART_SetConfig+0x2b0>
 80076aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076ae:	d81b      	bhi.n	80076e8 <UART_SetConfig+0x2b8>
 80076b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076b4:	d00c      	beq.n	80076d0 <UART_SetConfig+0x2a0>
 80076b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ba:	d815      	bhi.n	80076e8 <UART_SetConfig+0x2b8>
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <UART_SetConfig+0x298>
 80076c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c4:	d008      	beq.n	80076d8 <UART_SetConfig+0x2a8>
 80076c6:	e00f      	b.n	80076e8 <UART_SetConfig+0x2b8>
 80076c8:	2300      	movs	r3, #0
 80076ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ce:	e022      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076d0:	2302      	movs	r3, #2
 80076d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076d6:	e01e      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076d8:	2304      	movs	r3, #4
 80076da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076de:	e01a      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076e0:	2308      	movs	r3, #8
 80076e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076e6:	e016      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076e8:	2310      	movs	r3, #16
 80076ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ee:	e012      	b.n	8007716 <UART_SetConfig+0x2e6>
 80076f0:	efff69f3 	.word	0xefff69f3
 80076f4:	40008000 	.word	0x40008000
 80076f8:	40013800 	.word	0x40013800
 80076fc:	40021000 	.word	0x40021000
 8007700:	40004400 	.word	0x40004400
 8007704:	40004800 	.word	0x40004800
 8007708:	40004c00 	.word	0x40004c00
 800770c:	40005000 	.word	0x40005000
 8007710:	2310      	movs	r3, #16
 8007712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a9f      	ldr	r2, [pc, #636]	; (8007998 <UART_SetConfig+0x568>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d17a      	bne.n	8007816 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007724:	2b08      	cmp	r3, #8
 8007726:	d824      	bhi.n	8007772 <UART_SetConfig+0x342>
 8007728:	a201      	add	r2, pc, #4	; (adr r2, 8007730 <UART_SetConfig+0x300>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	08007755 	.word	0x08007755
 8007734:	08007773 	.word	0x08007773
 8007738:	0800775d 	.word	0x0800775d
 800773c:	08007773 	.word	0x08007773
 8007740:	08007763 	.word	0x08007763
 8007744:	08007773 	.word	0x08007773
 8007748:	08007773 	.word	0x08007773
 800774c:	08007773 	.word	0x08007773
 8007750:	0800776b 	.word	0x0800776b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007754:	f7fd fe04 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007758:	61f8      	str	r0, [r7, #28]
        break;
 800775a:	e010      	b.n	800777e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800775c:	4b8f      	ldr	r3, [pc, #572]	; (800799c <UART_SetConfig+0x56c>)
 800775e:	61fb      	str	r3, [r7, #28]
        break;
 8007760:	e00d      	b.n	800777e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007762:	f7fd fd65 	bl	8005230 <HAL_RCC_GetSysClockFreq>
 8007766:	61f8      	str	r0, [r7, #28]
        break;
 8007768:	e009      	b.n	800777e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800776a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800776e:	61fb      	str	r3, [r7, #28]
        break;
 8007770:	e005      	b.n	800777e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800777c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 80fb 	beq.w	800797c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	4613      	mov	r3, r2
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	4413      	add	r3, r2
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	429a      	cmp	r2, r3
 8007794:	d305      	bcc.n	80077a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d903      	bls.n	80077aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077a8:	e0e8      	b.n	800797c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	2200      	movs	r2, #0
 80077ae:	461c      	mov	r4, r3
 80077b0:	4615      	mov	r5, r2
 80077b2:	f04f 0200 	mov.w	r2, #0
 80077b6:	f04f 0300 	mov.w	r3, #0
 80077ba:	022b      	lsls	r3, r5, #8
 80077bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80077c0:	0222      	lsls	r2, r4, #8
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	6849      	ldr	r1, [r1, #4]
 80077c6:	0849      	lsrs	r1, r1, #1
 80077c8:	2000      	movs	r0, #0
 80077ca:	4688      	mov	r8, r1
 80077cc:	4681      	mov	r9, r0
 80077ce:	eb12 0a08 	adds.w	sl, r2, r8
 80077d2:	eb43 0b09 	adc.w	fp, r3, r9
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	603b      	str	r3, [r7, #0]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077e4:	4650      	mov	r0, sl
 80077e6:	4659      	mov	r1, fp
 80077e8:	f7f8 fd4a 	bl	8000280 <__aeabi_uldivmod>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4613      	mov	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077fa:	d308      	bcc.n	800780e <UART_SetConfig+0x3de>
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007802:	d204      	bcs.n	800780e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	60da      	str	r2, [r3, #12]
 800780c:	e0b6      	b.n	800797c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007814:	e0b2      	b.n	800797c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	69db      	ldr	r3, [r3, #28]
 800781a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800781e:	d15e      	bne.n	80078de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007824:	2b08      	cmp	r3, #8
 8007826:	d828      	bhi.n	800787a <UART_SetConfig+0x44a>
 8007828:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <UART_SetConfig+0x400>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007855 	.word	0x08007855
 8007834:	0800785d 	.word	0x0800785d
 8007838:	08007865 	.word	0x08007865
 800783c:	0800787b 	.word	0x0800787b
 8007840:	0800786b 	.word	0x0800786b
 8007844:	0800787b 	.word	0x0800787b
 8007848:	0800787b 	.word	0x0800787b
 800784c:	0800787b 	.word	0x0800787b
 8007850:	08007873 	.word	0x08007873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007854:	f7fd fd84 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007858:	61f8      	str	r0, [r7, #28]
        break;
 800785a:	e014      	b.n	8007886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800785c:	f7fd fd96 	bl	800538c <HAL_RCC_GetPCLK2Freq>
 8007860:	61f8      	str	r0, [r7, #28]
        break;
 8007862:	e010      	b.n	8007886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007864:	4b4d      	ldr	r3, [pc, #308]	; (800799c <UART_SetConfig+0x56c>)
 8007866:	61fb      	str	r3, [r7, #28]
        break;
 8007868:	e00d      	b.n	8007886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800786a:	f7fd fce1 	bl	8005230 <HAL_RCC_GetSysClockFreq>
 800786e:	61f8      	str	r0, [r7, #28]
        break;
 8007870:	e009      	b.n	8007886 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007876:	61fb      	str	r3, [r7, #28]
        break;
 8007878:	e005      	b.n	8007886 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800787a:	2300      	movs	r3, #0
 800787c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007884:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d077      	beq.n	800797c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	005a      	lsls	r2, r3, #1
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	085b      	lsrs	r3, r3, #1
 8007896:	441a      	add	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b0f      	cmp	r3, #15
 80078a6:	d916      	bls.n	80078d6 <UART_SetConfig+0x4a6>
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ae:	d212      	bcs.n	80078d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f023 030f 	bic.w	r3, r3, #15
 80078b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	085b      	lsrs	r3, r3, #1
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f003 0307 	and.w	r3, r3, #7
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	8afb      	ldrh	r3, [r7, #22]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	8afa      	ldrh	r2, [r7, #22]
 80078d2:	60da      	str	r2, [r3, #12]
 80078d4:	e052      	b.n	800797c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078dc:	e04e      	b.n	800797c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078e2:	2b08      	cmp	r3, #8
 80078e4:	d827      	bhi.n	8007936 <UART_SetConfig+0x506>
 80078e6:	a201      	add	r2, pc, #4	; (adr r2, 80078ec <UART_SetConfig+0x4bc>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	08007911 	.word	0x08007911
 80078f0:	08007919 	.word	0x08007919
 80078f4:	08007921 	.word	0x08007921
 80078f8:	08007937 	.word	0x08007937
 80078fc:	08007927 	.word	0x08007927
 8007900:	08007937 	.word	0x08007937
 8007904:	08007937 	.word	0x08007937
 8007908:	08007937 	.word	0x08007937
 800790c:	0800792f 	.word	0x0800792f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007910:	f7fd fd26 	bl	8005360 <HAL_RCC_GetPCLK1Freq>
 8007914:	61f8      	str	r0, [r7, #28]
        break;
 8007916:	e014      	b.n	8007942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007918:	f7fd fd38 	bl	800538c <HAL_RCC_GetPCLK2Freq>
 800791c:	61f8      	str	r0, [r7, #28]
        break;
 800791e:	e010      	b.n	8007942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007920:	4b1e      	ldr	r3, [pc, #120]	; (800799c <UART_SetConfig+0x56c>)
 8007922:	61fb      	str	r3, [r7, #28]
        break;
 8007924:	e00d      	b.n	8007942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007926:	f7fd fc83 	bl	8005230 <HAL_RCC_GetSysClockFreq>
 800792a:	61f8      	str	r0, [r7, #28]
        break;
 800792c:	e009      	b.n	8007942 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800792e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007932:	61fb      	str	r3, [r7, #28]
        break;
 8007934:	e005      	b.n	8007942 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007940:	bf00      	nop
    }

    if (pclk != 0U)
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d019      	beq.n	800797c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	085a      	lsrs	r2, r3, #1
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	441a      	add	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	fbb2 f3f3 	udiv	r3, r2, r3
 800795a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	2b0f      	cmp	r3, #15
 8007960:	d909      	bls.n	8007976 <UART_SetConfig+0x546>
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007968:	d205      	bcs.n	8007976 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	60da      	str	r2, [r3, #12]
 8007974:	e002      	b.n	800797c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007988:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800798c:	4618      	mov	r0, r3
 800798e:	3728      	adds	r7, #40	; 0x28
 8007990:	46bd      	mov	sp, r7
 8007992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007996:	bf00      	nop
 8007998:	40008000 	.word	0x40008000
 800799c:	00f42400 	.word	0x00f42400

080079a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00a      	beq.n	8007a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	f003 0304 	and.w	r3, r3, #4
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00a      	beq.n	8007a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01a      	beq.n	8007ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a9e:	d10a      	bne.n	8007ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	605a      	str	r2, [r3, #4]
  }
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b098      	sub	sp, #96	; 0x60
 8007ae8:	af02      	add	r7, sp, #8
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007af4:	f7fb fd2e 	bl	8003554 <HAL_GetTick>
 8007af8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0308 	and.w	r3, r3, #8
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d12e      	bne.n	8007b66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b10:	2200      	movs	r2, #0
 8007b12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f88c 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d021      	beq.n	8007b66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b36:	653b      	str	r3, [r7, #80]	; 0x50
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b40:	647b      	str	r3, [r7, #68]	; 0x44
 8007b42:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e6      	bne.n	8007b22 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e062      	b.n	8007c2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d149      	bne.n	8007c08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f856 	bl	8007c34 <UART_WaitOnFlagUntilTimeout>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d03c      	beq.n	8007c08 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	623b      	str	r3, [r7, #32]
   return(result);
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bac:	633b      	str	r3, [r7, #48]	; 0x30
 8007bae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb4:	e841 2300 	strex	r3, r2, [r1]
 8007bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e6      	bne.n	8007b8e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f023 0301 	bic.w	r3, r3, #1
 8007bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3308      	adds	r3, #8
 8007bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007be0:	61fa      	str	r2, [r7, #28]
 8007be2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	69b9      	ldr	r1, [r7, #24]
 8007be6:	69fa      	ldr	r2, [r7, #28]
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	617b      	str	r3, [r7, #20]
   return(result);
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e5      	bne.n	8007bc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2220      	movs	r2, #32
 8007bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e011      	b.n	8007c2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2220      	movs	r2, #32
 8007c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3758      	adds	r7, #88	; 0x58
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	4613      	mov	r3, r2
 8007c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c44:	e049      	b.n	8007cda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4c:	d045      	beq.n	8007cda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c4e:	f7fb fc81 	bl	8003554 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d302      	bcc.n	8007c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e048      	b.n	8007cfa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0304 	and.w	r3, r3, #4
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d031      	beq.n	8007cda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b08      	cmp	r3, #8
 8007c82:	d110      	bne.n	8007ca6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2208      	movs	r2, #8
 8007c8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 f838 	bl	8007d02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2208      	movs	r2, #8
 8007c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e029      	b.n	8007cfa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb4:	d111      	bne.n	8007cda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 f81e 	bl	8007d02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e00f      	b.n	8007cfa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69da      	ldr	r2, [r3, #28]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	bf0c      	ite	eq
 8007cea:	2301      	moveq	r3, #1
 8007cec:	2300      	movne	r3, #0
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d0a6      	beq.n	8007c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b095      	sub	sp, #84	; 0x54
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d12:	e853 3f00 	ldrex	r3, [r3]
 8007d16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	461a      	mov	r2, r3
 8007d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d28:	643b      	str	r3, [r7, #64]	; 0x40
 8007d2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d30:	e841 2300 	strex	r3, r2, [r1]
 8007d34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e6      	bne.n	8007d0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3308      	adds	r3, #8
 8007d42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f023 0301 	bic.w	r3, r3, #1
 8007d52:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3308      	adds	r3, #8
 8007d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e5      	bne.n	8007d3c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d118      	bne.n	8007daa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f023 0310 	bic.w	r3, r3, #16
 8007d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	461a      	mov	r2, r3
 8007d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d96:	61bb      	str	r3, [r7, #24]
 8007d98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9a:	6979      	ldr	r1, [r7, #20]
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	613b      	str	r3, [r7, #16]
   return(result);
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e6      	bne.n	8007d78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007dbe:	bf00      	nop
 8007dc0:	3754      	adds	r7, #84	; 0x54
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <std>:
 8007dcc:	2300      	movs	r3, #0
 8007dce:	b510      	push	{r4, lr}
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	e9c0 3300 	strd	r3, r3, [r0]
 8007dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dda:	6083      	str	r3, [r0, #8]
 8007ddc:	8181      	strh	r1, [r0, #12]
 8007dde:	6643      	str	r3, [r0, #100]	; 0x64
 8007de0:	81c2      	strh	r2, [r0, #14]
 8007de2:	6183      	str	r3, [r0, #24]
 8007de4:	4619      	mov	r1, r3
 8007de6:	2208      	movs	r2, #8
 8007de8:	305c      	adds	r0, #92	; 0x5c
 8007dea:	f000 fa15 	bl	8008218 <memset>
 8007dee:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <std+0x38>)
 8007df0:	6263      	str	r3, [r4, #36]	; 0x24
 8007df2:	4b05      	ldr	r3, [pc, #20]	; (8007e08 <std+0x3c>)
 8007df4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007df6:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <std+0x40>)
 8007df8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dfa:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <std+0x44>)
 8007dfc:	6224      	str	r4, [r4, #32]
 8007dfe:	6323      	str	r3, [r4, #48]	; 0x30
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	bf00      	nop
 8007e04:	08008049 	.word	0x08008049
 8007e08:	0800806b 	.word	0x0800806b
 8007e0c:	080080a3 	.word	0x080080a3
 8007e10:	080080c7 	.word	0x080080c7

08007e14 <stdio_exit_handler>:
 8007e14:	4a02      	ldr	r2, [pc, #8]	; (8007e20 <stdio_exit_handler+0xc>)
 8007e16:	4903      	ldr	r1, [pc, #12]	; (8007e24 <stdio_exit_handler+0x10>)
 8007e18:	4803      	ldr	r0, [pc, #12]	; (8007e28 <stdio_exit_handler+0x14>)
 8007e1a:	f000 b869 	b.w	8007ef0 <_fwalk_sglue>
 8007e1e:	bf00      	nop
 8007e20:	2000002c 	.word	0x2000002c
 8007e24:	08009015 	.word	0x08009015
 8007e28:	20000038 	.word	0x20000038

08007e2c <cleanup_stdio>:
 8007e2c:	6841      	ldr	r1, [r0, #4]
 8007e2e:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <cleanup_stdio+0x34>)
 8007e30:	4299      	cmp	r1, r3
 8007e32:	b510      	push	{r4, lr}
 8007e34:	4604      	mov	r4, r0
 8007e36:	d001      	beq.n	8007e3c <cleanup_stdio+0x10>
 8007e38:	f001 f8ec 	bl	8009014 <_fflush_r>
 8007e3c:	68a1      	ldr	r1, [r4, #8]
 8007e3e:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <cleanup_stdio+0x38>)
 8007e40:	4299      	cmp	r1, r3
 8007e42:	d002      	beq.n	8007e4a <cleanup_stdio+0x1e>
 8007e44:	4620      	mov	r0, r4
 8007e46:	f001 f8e5 	bl	8009014 <_fflush_r>
 8007e4a:	68e1      	ldr	r1, [r4, #12]
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <cleanup_stdio+0x3c>)
 8007e4e:	4299      	cmp	r1, r3
 8007e50:	d004      	beq.n	8007e5c <cleanup_stdio+0x30>
 8007e52:	4620      	mov	r0, r4
 8007e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e58:	f001 b8dc 	b.w	8009014 <_fflush_r>
 8007e5c:	bd10      	pop	{r4, pc}
 8007e5e:	bf00      	nop
 8007e60:	2000130c 	.word	0x2000130c
 8007e64:	20001374 	.word	0x20001374
 8007e68:	200013dc 	.word	0x200013dc

08007e6c <global_stdio_init.part.0>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	4b0b      	ldr	r3, [pc, #44]	; (8007e9c <global_stdio_init.part.0+0x30>)
 8007e70:	4c0b      	ldr	r4, [pc, #44]	; (8007ea0 <global_stdio_init.part.0+0x34>)
 8007e72:	4a0c      	ldr	r2, [pc, #48]	; (8007ea4 <global_stdio_init.part.0+0x38>)
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	4620      	mov	r0, r4
 8007e78:	2200      	movs	r2, #0
 8007e7a:	2104      	movs	r1, #4
 8007e7c:	f7ff ffa6 	bl	8007dcc <std>
 8007e80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007e84:	2201      	movs	r2, #1
 8007e86:	2109      	movs	r1, #9
 8007e88:	f7ff ffa0 	bl	8007dcc <std>
 8007e8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007e90:	2202      	movs	r2, #2
 8007e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e96:	2112      	movs	r1, #18
 8007e98:	f7ff bf98 	b.w	8007dcc <std>
 8007e9c:	20001444 	.word	0x20001444
 8007ea0:	2000130c 	.word	0x2000130c
 8007ea4:	08007e15 	.word	0x08007e15

08007ea8 <__sfp_lock_acquire>:
 8007ea8:	4801      	ldr	r0, [pc, #4]	; (8007eb0 <__sfp_lock_acquire+0x8>)
 8007eaa:	f000 bad3 	b.w	8008454 <__retarget_lock_acquire_recursive>
 8007eae:	bf00      	nop
 8007eb0:	2000144d 	.word	0x2000144d

08007eb4 <__sfp_lock_release>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	; (8007ebc <__sfp_lock_release+0x8>)
 8007eb6:	f000 bace 	b.w	8008456 <__retarget_lock_release_recursive>
 8007eba:	bf00      	nop
 8007ebc:	2000144d 	.word	0x2000144d

08007ec0 <__sinit>:
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	f7ff fff0 	bl	8007ea8 <__sfp_lock_acquire>
 8007ec8:	6a23      	ldr	r3, [r4, #32]
 8007eca:	b11b      	cbz	r3, 8007ed4 <__sinit+0x14>
 8007ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed0:	f7ff bff0 	b.w	8007eb4 <__sfp_lock_release>
 8007ed4:	4b04      	ldr	r3, [pc, #16]	; (8007ee8 <__sinit+0x28>)
 8007ed6:	6223      	str	r3, [r4, #32]
 8007ed8:	4b04      	ldr	r3, [pc, #16]	; (8007eec <__sinit+0x2c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1f5      	bne.n	8007ecc <__sinit+0xc>
 8007ee0:	f7ff ffc4 	bl	8007e6c <global_stdio_init.part.0>
 8007ee4:	e7f2      	b.n	8007ecc <__sinit+0xc>
 8007ee6:	bf00      	nop
 8007ee8:	08007e2d 	.word	0x08007e2d
 8007eec:	20001444 	.word	0x20001444

08007ef0 <_fwalk_sglue>:
 8007ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef4:	4607      	mov	r7, r0
 8007ef6:	4688      	mov	r8, r1
 8007ef8:	4614      	mov	r4, r2
 8007efa:	2600      	movs	r6, #0
 8007efc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f00:	f1b9 0901 	subs.w	r9, r9, #1
 8007f04:	d505      	bpl.n	8007f12 <_fwalk_sglue+0x22>
 8007f06:	6824      	ldr	r4, [r4, #0]
 8007f08:	2c00      	cmp	r4, #0
 8007f0a:	d1f7      	bne.n	8007efc <_fwalk_sglue+0xc>
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d907      	bls.n	8007f28 <_fwalk_sglue+0x38>
 8007f18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	d003      	beq.n	8007f28 <_fwalk_sglue+0x38>
 8007f20:	4629      	mov	r1, r5
 8007f22:	4638      	mov	r0, r7
 8007f24:	47c0      	blx	r8
 8007f26:	4306      	orrs	r6, r0
 8007f28:	3568      	adds	r5, #104	; 0x68
 8007f2a:	e7e9      	b.n	8007f00 <_fwalk_sglue+0x10>

08007f2c <iprintf>:
 8007f2c:	b40f      	push	{r0, r1, r2, r3}
 8007f2e:	b507      	push	{r0, r1, r2, lr}
 8007f30:	4906      	ldr	r1, [pc, #24]	; (8007f4c <iprintf+0x20>)
 8007f32:	ab04      	add	r3, sp, #16
 8007f34:	6808      	ldr	r0, [r1, #0]
 8007f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f3a:	6881      	ldr	r1, [r0, #8]
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	f000 fd39 	bl	80089b4 <_vfiprintf_r>
 8007f42:	b003      	add	sp, #12
 8007f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f48:	b004      	add	sp, #16
 8007f4a:	4770      	bx	lr
 8007f4c:	20000084 	.word	0x20000084

08007f50 <_puts_r>:
 8007f50:	6a03      	ldr	r3, [r0, #32]
 8007f52:	b570      	push	{r4, r5, r6, lr}
 8007f54:	6884      	ldr	r4, [r0, #8]
 8007f56:	4605      	mov	r5, r0
 8007f58:	460e      	mov	r6, r1
 8007f5a:	b90b      	cbnz	r3, 8007f60 <_puts_r+0x10>
 8007f5c:	f7ff ffb0 	bl	8007ec0 <__sinit>
 8007f60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f62:	07db      	lsls	r3, r3, #31
 8007f64:	d405      	bmi.n	8007f72 <_puts_r+0x22>
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	0598      	lsls	r0, r3, #22
 8007f6a:	d402      	bmi.n	8007f72 <_puts_r+0x22>
 8007f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f6e:	f000 fa71 	bl	8008454 <__retarget_lock_acquire_recursive>
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	0719      	lsls	r1, r3, #28
 8007f76:	d513      	bpl.n	8007fa0 <_puts_r+0x50>
 8007f78:	6923      	ldr	r3, [r4, #16]
 8007f7a:	b18b      	cbz	r3, 8007fa0 <_puts_r+0x50>
 8007f7c:	3e01      	subs	r6, #1
 8007f7e:	68a3      	ldr	r3, [r4, #8]
 8007f80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f84:	3b01      	subs	r3, #1
 8007f86:	60a3      	str	r3, [r4, #8]
 8007f88:	b9e9      	cbnz	r1, 8007fc6 <_puts_r+0x76>
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	da2e      	bge.n	8007fec <_puts_r+0x9c>
 8007f8e:	4622      	mov	r2, r4
 8007f90:	210a      	movs	r1, #10
 8007f92:	4628      	mov	r0, r5
 8007f94:	f000 f89b 	bl	80080ce <__swbuf_r>
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d007      	beq.n	8007fac <_puts_r+0x5c>
 8007f9c:	250a      	movs	r5, #10
 8007f9e:	e007      	b.n	8007fb0 <_puts_r+0x60>
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f000 f8d0 	bl	8008148 <__swsetup_r>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d0e7      	beq.n	8007f7c <_puts_r+0x2c>
 8007fac:	f04f 35ff 	mov.w	r5, #4294967295
 8007fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fb2:	07da      	lsls	r2, r3, #31
 8007fb4:	d405      	bmi.n	8007fc2 <_puts_r+0x72>
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	059b      	lsls	r3, r3, #22
 8007fba:	d402      	bmi.n	8007fc2 <_puts_r+0x72>
 8007fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fbe:	f000 fa4a 	bl	8008456 <__retarget_lock_release_recursive>
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	bd70      	pop	{r4, r5, r6, pc}
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	da04      	bge.n	8007fd4 <_puts_r+0x84>
 8007fca:	69a2      	ldr	r2, [r4, #24]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	dc06      	bgt.n	8007fde <_puts_r+0x8e>
 8007fd0:	290a      	cmp	r1, #10
 8007fd2:	d004      	beq.n	8007fde <_puts_r+0x8e>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	6022      	str	r2, [r4, #0]
 8007fda:	7019      	strb	r1, [r3, #0]
 8007fdc:	e7cf      	b.n	8007f7e <_puts_r+0x2e>
 8007fde:	4622      	mov	r2, r4
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	f000 f874 	bl	80080ce <__swbuf_r>
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	d1c9      	bne.n	8007f7e <_puts_r+0x2e>
 8007fea:	e7df      	b.n	8007fac <_puts_r+0x5c>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	250a      	movs	r5, #10
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	6022      	str	r2, [r4, #0]
 8007ff4:	701d      	strb	r5, [r3, #0]
 8007ff6:	e7db      	b.n	8007fb0 <_puts_r+0x60>

08007ff8 <puts>:
 8007ff8:	4b02      	ldr	r3, [pc, #8]	; (8008004 <puts+0xc>)
 8007ffa:	4601      	mov	r1, r0
 8007ffc:	6818      	ldr	r0, [r3, #0]
 8007ffe:	f7ff bfa7 	b.w	8007f50 <_puts_r>
 8008002:	bf00      	nop
 8008004:	20000084 	.word	0x20000084

08008008 <siprintf>:
 8008008:	b40e      	push	{r1, r2, r3}
 800800a:	b500      	push	{lr}
 800800c:	b09c      	sub	sp, #112	; 0x70
 800800e:	ab1d      	add	r3, sp, #116	; 0x74
 8008010:	9002      	str	r0, [sp, #8]
 8008012:	9006      	str	r0, [sp, #24]
 8008014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008018:	4809      	ldr	r0, [pc, #36]	; (8008040 <siprintf+0x38>)
 800801a:	9107      	str	r1, [sp, #28]
 800801c:	9104      	str	r1, [sp, #16]
 800801e:	4909      	ldr	r1, [pc, #36]	; (8008044 <siprintf+0x3c>)
 8008020:	f853 2b04 	ldr.w	r2, [r3], #4
 8008024:	9105      	str	r1, [sp, #20]
 8008026:	6800      	ldr	r0, [r0, #0]
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	a902      	add	r1, sp, #8
 800802c:	f000 fb9a 	bl	8008764 <_svfiprintf_r>
 8008030:	9b02      	ldr	r3, [sp, #8]
 8008032:	2200      	movs	r2, #0
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	b01c      	add	sp, #112	; 0x70
 8008038:	f85d eb04 	ldr.w	lr, [sp], #4
 800803c:	b003      	add	sp, #12
 800803e:	4770      	bx	lr
 8008040:	20000084 	.word	0x20000084
 8008044:	ffff0208 	.word	0xffff0208

08008048 <__sread>:
 8008048:	b510      	push	{r4, lr}
 800804a:	460c      	mov	r4, r1
 800804c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008050:	f000 f9b2 	bl	80083b8 <_read_r>
 8008054:	2800      	cmp	r0, #0
 8008056:	bfab      	itete	ge
 8008058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800805a:	89a3      	ldrhlt	r3, [r4, #12]
 800805c:	181b      	addge	r3, r3, r0
 800805e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008062:	bfac      	ite	ge
 8008064:	6563      	strge	r3, [r4, #84]	; 0x54
 8008066:	81a3      	strhlt	r3, [r4, #12]
 8008068:	bd10      	pop	{r4, pc}

0800806a <__swrite>:
 800806a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800806e:	461f      	mov	r7, r3
 8008070:	898b      	ldrh	r3, [r1, #12]
 8008072:	05db      	lsls	r3, r3, #23
 8008074:	4605      	mov	r5, r0
 8008076:	460c      	mov	r4, r1
 8008078:	4616      	mov	r6, r2
 800807a:	d505      	bpl.n	8008088 <__swrite+0x1e>
 800807c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008080:	2302      	movs	r3, #2
 8008082:	2200      	movs	r2, #0
 8008084:	f000 f986 	bl	8008394 <_lseek_r>
 8008088:	89a3      	ldrh	r3, [r4, #12]
 800808a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800808e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	4632      	mov	r2, r6
 8008096:	463b      	mov	r3, r7
 8008098:	4628      	mov	r0, r5
 800809a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800809e:	f000 b99d 	b.w	80083dc <_write_r>

080080a2 <__sseek>:
 80080a2:	b510      	push	{r4, lr}
 80080a4:	460c      	mov	r4, r1
 80080a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080aa:	f000 f973 	bl	8008394 <_lseek_r>
 80080ae:	1c43      	adds	r3, r0, #1
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	bf15      	itete	ne
 80080b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80080b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080be:	81a3      	strheq	r3, [r4, #12]
 80080c0:	bf18      	it	ne
 80080c2:	81a3      	strhne	r3, [r4, #12]
 80080c4:	bd10      	pop	{r4, pc}

080080c6 <__sclose>:
 80080c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ca:	f000 b953 	b.w	8008374 <_close_r>

080080ce <__swbuf_r>:
 80080ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d0:	460e      	mov	r6, r1
 80080d2:	4614      	mov	r4, r2
 80080d4:	4605      	mov	r5, r0
 80080d6:	b118      	cbz	r0, 80080e0 <__swbuf_r+0x12>
 80080d8:	6a03      	ldr	r3, [r0, #32]
 80080da:	b90b      	cbnz	r3, 80080e0 <__swbuf_r+0x12>
 80080dc:	f7ff fef0 	bl	8007ec0 <__sinit>
 80080e0:	69a3      	ldr	r3, [r4, #24]
 80080e2:	60a3      	str	r3, [r4, #8]
 80080e4:	89a3      	ldrh	r3, [r4, #12]
 80080e6:	071a      	lsls	r2, r3, #28
 80080e8:	d525      	bpl.n	8008136 <__swbuf_r+0x68>
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	b31b      	cbz	r3, 8008136 <__swbuf_r+0x68>
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	6922      	ldr	r2, [r4, #16]
 80080f2:	1a98      	subs	r0, r3, r2
 80080f4:	6963      	ldr	r3, [r4, #20]
 80080f6:	b2f6      	uxtb	r6, r6
 80080f8:	4283      	cmp	r3, r0
 80080fa:	4637      	mov	r7, r6
 80080fc:	dc04      	bgt.n	8008108 <__swbuf_r+0x3a>
 80080fe:	4621      	mov	r1, r4
 8008100:	4628      	mov	r0, r5
 8008102:	f000 ff87 	bl	8009014 <_fflush_r>
 8008106:	b9e0      	cbnz	r0, 8008142 <__swbuf_r+0x74>
 8008108:	68a3      	ldr	r3, [r4, #8]
 800810a:	3b01      	subs	r3, #1
 800810c:	60a3      	str	r3, [r4, #8]
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	6022      	str	r2, [r4, #0]
 8008114:	701e      	strb	r6, [r3, #0]
 8008116:	6962      	ldr	r2, [r4, #20]
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	429a      	cmp	r2, r3
 800811c:	d004      	beq.n	8008128 <__swbuf_r+0x5a>
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	07db      	lsls	r3, r3, #31
 8008122:	d506      	bpl.n	8008132 <__swbuf_r+0x64>
 8008124:	2e0a      	cmp	r6, #10
 8008126:	d104      	bne.n	8008132 <__swbuf_r+0x64>
 8008128:	4621      	mov	r1, r4
 800812a:	4628      	mov	r0, r5
 800812c:	f000 ff72 	bl	8009014 <_fflush_r>
 8008130:	b938      	cbnz	r0, 8008142 <__swbuf_r+0x74>
 8008132:	4638      	mov	r0, r7
 8008134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008136:	4621      	mov	r1, r4
 8008138:	4628      	mov	r0, r5
 800813a:	f000 f805 	bl	8008148 <__swsetup_r>
 800813e:	2800      	cmp	r0, #0
 8008140:	d0d5      	beq.n	80080ee <__swbuf_r+0x20>
 8008142:	f04f 37ff 	mov.w	r7, #4294967295
 8008146:	e7f4      	b.n	8008132 <__swbuf_r+0x64>

08008148 <__swsetup_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4b2a      	ldr	r3, [pc, #168]	; (80081f4 <__swsetup_r+0xac>)
 800814c:	4605      	mov	r5, r0
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	460c      	mov	r4, r1
 8008152:	b118      	cbz	r0, 800815c <__swsetup_r+0x14>
 8008154:	6a03      	ldr	r3, [r0, #32]
 8008156:	b90b      	cbnz	r3, 800815c <__swsetup_r+0x14>
 8008158:	f7ff feb2 	bl	8007ec0 <__sinit>
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008162:	0718      	lsls	r0, r3, #28
 8008164:	d422      	bmi.n	80081ac <__swsetup_r+0x64>
 8008166:	06d9      	lsls	r1, r3, #27
 8008168:	d407      	bmi.n	800817a <__swsetup_r+0x32>
 800816a:	2309      	movs	r3, #9
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008172:	81a3      	strh	r3, [r4, #12]
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	e034      	b.n	80081e4 <__swsetup_r+0x9c>
 800817a:	0758      	lsls	r0, r3, #29
 800817c:	d512      	bpl.n	80081a4 <__swsetup_r+0x5c>
 800817e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008180:	b141      	cbz	r1, 8008194 <__swsetup_r+0x4c>
 8008182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008186:	4299      	cmp	r1, r3
 8008188:	d002      	beq.n	8008190 <__swsetup_r+0x48>
 800818a:	4628      	mov	r0, r5
 800818c:	f000 f990 	bl	80084b0 <_free_r>
 8008190:	2300      	movs	r3, #0
 8008192:	6363      	str	r3, [r4, #52]	; 0x34
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800819a:	81a3      	strh	r3, [r4, #12]
 800819c:	2300      	movs	r3, #0
 800819e:	6063      	str	r3, [r4, #4]
 80081a0:	6923      	ldr	r3, [r4, #16]
 80081a2:	6023      	str	r3, [r4, #0]
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	f043 0308 	orr.w	r3, r3, #8
 80081aa:	81a3      	strh	r3, [r4, #12]
 80081ac:	6923      	ldr	r3, [r4, #16]
 80081ae:	b94b      	cbnz	r3, 80081c4 <__swsetup_r+0x7c>
 80081b0:	89a3      	ldrh	r3, [r4, #12]
 80081b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ba:	d003      	beq.n	80081c4 <__swsetup_r+0x7c>
 80081bc:	4621      	mov	r1, r4
 80081be:	4628      	mov	r0, r5
 80081c0:	f000 ff88 	bl	80090d4 <__smakebuf_r>
 80081c4:	89a0      	ldrh	r0, [r4, #12]
 80081c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081ca:	f010 0301 	ands.w	r3, r0, #1
 80081ce:	d00a      	beq.n	80081e6 <__swsetup_r+0x9e>
 80081d0:	2300      	movs	r3, #0
 80081d2:	60a3      	str	r3, [r4, #8]
 80081d4:	6963      	ldr	r3, [r4, #20]
 80081d6:	425b      	negs	r3, r3
 80081d8:	61a3      	str	r3, [r4, #24]
 80081da:	6923      	ldr	r3, [r4, #16]
 80081dc:	b943      	cbnz	r3, 80081f0 <__swsetup_r+0xa8>
 80081de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081e2:	d1c4      	bne.n	800816e <__swsetup_r+0x26>
 80081e4:	bd38      	pop	{r3, r4, r5, pc}
 80081e6:	0781      	lsls	r1, r0, #30
 80081e8:	bf58      	it	pl
 80081ea:	6963      	ldrpl	r3, [r4, #20]
 80081ec:	60a3      	str	r3, [r4, #8]
 80081ee:	e7f4      	b.n	80081da <__swsetup_r+0x92>
 80081f0:	2000      	movs	r0, #0
 80081f2:	e7f7      	b.n	80081e4 <__swsetup_r+0x9c>
 80081f4:	20000084 	.word	0x20000084

080081f8 <memcmp>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	3901      	subs	r1, #1
 80081fc:	4402      	add	r2, r0
 80081fe:	4290      	cmp	r0, r2
 8008200:	d101      	bne.n	8008206 <memcmp+0xe>
 8008202:	2000      	movs	r0, #0
 8008204:	e005      	b.n	8008212 <memcmp+0x1a>
 8008206:	7803      	ldrb	r3, [r0, #0]
 8008208:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800820c:	42a3      	cmp	r3, r4
 800820e:	d001      	beq.n	8008214 <memcmp+0x1c>
 8008210:	1b18      	subs	r0, r3, r4
 8008212:	bd10      	pop	{r4, pc}
 8008214:	3001      	adds	r0, #1
 8008216:	e7f2      	b.n	80081fe <memcmp+0x6>

08008218 <memset>:
 8008218:	4402      	add	r2, r0
 800821a:	4603      	mov	r3, r0
 800821c:	4293      	cmp	r3, r2
 800821e:	d100      	bne.n	8008222 <memset+0xa>
 8008220:	4770      	bx	lr
 8008222:	f803 1b01 	strb.w	r1, [r3], #1
 8008226:	e7f9      	b.n	800821c <memset+0x4>

08008228 <strcat>:
 8008228:	b510      	push	{r4, lr}
 800822a:	4602      	mov	r2, r0
 800822c:	7814      	ldrb	r4, [r2, #0]
 800822e:	4613      	mov	r3, r2
 8008230:	3201      	adds	r2, #1
 8008232:	2c00      	cmp	r4, #0
 8008234:	d1fa      	bne.n	800822c <strcat+0x4>
 8008236:	3b01      	subs	r3, #1
 8008238:	f811 2b01 	ldrb.w	r2, [r1], #1
 800823c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008240:	2a00      	cmp	r2, #0
 8008242:	d1f9      	bne.n	8008238 <strcat+0x10>
 8008244:	bd10      	pop	{r4, pc}

08008246 <strncmp>:
 8008246:	b510      	push	{r4, lr}
 8008248:	b16a      	cbz	r2, 8008266 <strncmp+0x20>
 800824a:	3901      	subs	r1, #1
 800824c:	1884      	adds	r4, r0, r2
 800824e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008252:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008256:	429a      	cmp	r2, r3
 8008258:	d103      	bne.n	8008262 <strncmp+0x1c>
 800825a:	42a0      	cmp	r0, r4
 800825c:	d001      	beq.n	8008262 <strncmp+0x1c>
 800825e:	2a00      	cmp	r2, #0
 8008260:	d1f5      	bne.n	800824e <strncmp+0x8>
 8008262:	1ad0      	subs	r0, r2, r3
 8008264:	bd10      	pop	{r4, pc}
 8008266:	4610      	mov	r0, r2
 8008268:	e7fc      	b.n	8008264 <strncmp+0x1e>

0800826a <strncpy>:
 800826a:	b510      	push	{r4, lr}
 800826c:	3901      	subs	r1, #1
 800826e:	4603      	mov	r3, r0
 8008270:	b132      	cbz	r2, 8008280 <strncpy+0x16>
 8008272:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008276:	f803 4b01 	strb.w	r4, [r3], #1
 800827a:	3a01      	subs	r2, #1
 800827c:	2c00      	cmp	r4, #0
 800827e:	d1f7      	bne.n	8008270 <strncpy+0x6>
 8008280:	441a      	add	r2, r3
 8008282:	2100      	movs	r1, #0
 8008284:	4293      	cmp	r3, r2
 8008286:	d100      	bne.n	800828a <strncpy+0x20>
 8008288:	bd10      	pop	{r4, pc}
 800828a:	f803 1b01 	strb.w	r1, [r3], #1
 800828e:	e7f9      	b.n	8008284 <strncpy+0x1a>

08008290 <strtok>:
 8008290:	4b16      	ldr	r3, [pc, #88]	; (80082ec <strtok+0x5c>)
 8008292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008294:	681e      	ldr	r6, [r3, #0]
 8008296:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008298:	4605      	mov	r5, r0
 800829a:	b9fc      	cbnz	r4, 80082dc <strtok+0x4c>
 800829c:	2050      	movs	r0, #80	; 0x50
 800829e:	9101      	str	r1, [sp, #4]
 80082a0:	f000 f952 	bl	8008548 <malloc>
 80082a4:	9901      	ldr	r1, [sp, #4]
 80082a6:	6470      	str	r0, [r6, #68]	; 0x44
 80082a8:	4602      	mov	r2, r0
 80082aa:	b920      	cbnz	r0, 80082b6 <strtok+0x26>
 80082ac:	4b10      	ldr	r3, [pc, #64]	; (80082f0 <strtok+0x60>)
 80082ae:	4811      	ldr	r0, [pc, #68]	; (80082f4 <strtok+0x64>)
 80082b0:	215b      	movs	r1, #91	; 0x5b
 80082b2:	f000 f8df 	bl	8008474 <__assert_func>
 80082b6:	e9c0 4400 	strd	r4, r4, [r0]
 80082ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80082be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80082c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80082c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80082ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80082ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80082d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80082d6:	6184      	str	r4, [r0, #24]
 80082d8:	7704      	strb	r4, [r0, #28]
 80082da:	6244      	str	r4, [r0, #36]	; 0x24
 80082dc:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80082de:	2301      	movs	r3, #1
 80082e0:	4628      	mov	r0, r5
 80082e2:	b002      	add	sp, #8
 80082e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082e8:	f000 b806 	b.w	80082f8 <__strtok_r>
 80082ec:	20000084 	.word	0x20000084
 80082f0:	08009f04 	.word	0x08009f04
 80082f4:	08009f1b 	.word	0x08009f1b

080082f8 <__strtok_r>:
 80082f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082fa:	b908      	cbnz	r0, 8008300 <__strtok_r+0x8>
 80082fc:	6810      	ldr	r0, [r2, #0]
 80082fe:	b188      	cbz	r0, 8008324 <__strtok_r+0x2c>
 8008300:	4604      	mov	r4, r0
 8008302:	4620      	mov	r0, r4
 8008304:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008308:	460f      	mov	r7, r1
 800830a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800830e:	b91e      	cbnz	r6, 8008318 <__strtok_r+0x20>
 8008310:	b965      	cbnz	r5, 800832c <__strtok_r+0x34>
 8008312:	6015      	str	r5, [r2, #0]
 8008314:	4628      	mov	r0, r5
 8008316:	e005      	b.n	8008324 <__strtok_r+0x2c>
 8008318:	42b5      	cmp	r5, r6
 800831a:	d1f6      	bne.n	800830a <__strtok_r+0x12>
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1f0      	bne.n	8008302 <__strtok_r+0xa>
 8008320:	6014      	str	r4, [r2, #0]
 8008322:	7003      	strb	r3, [r0, #0]
 8008324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008326:	461c      	mov	r4, r3
 8008328:	e00c      	b.n	8008344 <__strtok_r+0x4c>
 800832a:	b915      	cbnz	r5, 8008332 <__strtok_r+0x3a>
 800832c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008330:	460e      	mov	r6, r1
 8008332:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008336:	42ab      	cmp	r3, r5
 8008338:	d1f7      	bne.n	800832a <__strtok_r+0x32>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0f3      	beq.n	8008326 <__strtok_r+0x2e>
 800833e:	2300      	movs	r3, #0
 8008340:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008344:	6014      	str	r4, [r2, #0]
 8008346:	e7ed      	b.n	8008324 <__strtok_r+0x2c>

08008348 <strstr>:
 8008348:	780a      	ldrb	r2, [r1, #0]
 800834a:	b570      	push	{r4, r5, r6, lr}
 800834c:	b96a      	cbnz	r2, 800836a <strstr+0x22>
 800834e:	bd70      	pop	{r4, r5, r6, pc}
 8008350:	429a      	cmp	r2, r3
 8008352:	d109      	bne.n	8008368 <strstr+0x20>
 8008354:	460c      	mov	r4, r1
 8008356:	4605      	mov	r5, r0
 8008358:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800835c:	2b00      	cmp	r3, #0
 800835e:	d0f6      	beq.n	800834e <strstr+0x6>
 8008360:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008364:	429e      	cmp	r6, r3
 8008366:	d0f7      	beq.n	8008358 <strstr+0x10>
 8008368:	3001      	adds	r0, #1
 800836a:	7803      	ldrb	r3, [r0, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1ef      	bne.n	8008350 <strstr+0x8>
 8008370:	4618      	mov	r0, r3
 8008372:	e7ec      	b.n	800834e <strstr+0x6>

08008374 <_close_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4d06      	ldr	r5, [pc, #24]	; (8008390 <_close_r+0x1c>)
 8008378:	2300      	movs	r3, #0
 800837a:	4604      	mov	r4, r0
 800837c:	4608      	mov	r0, r1
 800837e:	602b      	str	r3, [r5, #0]
 8008380:	f7f8 fe52 	bl	8001028 <_close>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	d102      	bne.n	800838e <_close_r+0x1a>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	b103      	cbz	r3, 800838e <_close_r+0x1a>
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	20001448 	.word	0x20001448

08008394 <_lseek_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d07      	ldr	r5, [pc, #28]	; (80083b4 <_lseek_r+0x20>)
 8008398:	4604      	mov	r4, r0
 800839a:	4608      	mov	r0, r1
 800839c:	4611      	mov	r1, r2
 800839e:	2200      	movs	r2, #0
 80083a0:	602a      	str	r2, [r5, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	f7f8 fe67 	bl	8001076 <_lseek>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_lseek_r+0x1e>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_lseek_r+0x1e>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	20001448 	.word	0x20001448

080083b8 <_read_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d07      	ldr	r5, [pc, #28]	; (80083d8 <_read_r+0x20>)
 80083bc:	4604      	mov	r4, r0
 80083be:	4608      	mov	r0, r1
 80083c0:	4611      	mov	r1, r2
 80083c2:	2200      	movs	r2, #0
 80083c4:	602a      	str	r2, [r5, #0]
 80083c6:	461a      	mov	r2, r3
 80083c8:	f7f8 fdf5 	bl	8000fb6 <_read>
 80083cc:	1c43      	adds	r3, r0, #1
 80083ce:	d102      	bne.n	80083d6 <_read_r+0x1e>
 80083d0:	682b      	ldr	r3, [r5, #0]
 80083d2:	b103      	cbz	r3, 80083d6 <_read_r+0x1e>
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
 80083d8:	20001448 	.word	0x20001448

080083dc <_write_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4d07      	ldr	r5, [pc, #28]	; (80083fc <_write_r+0x20>)
 80083e0:	4604      	mov	r4, r0
 80083e2:	4608      	mov	r0, r1
 80083e4:	4611      	mov	r1, r2
 80083e6:	2200      	movs	r2, #0
 80083e8:	602a      	str	r2, [r5, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	f7f8 fe00 	bl	8000ff0 <_write>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d102      	bne.n	80083fa <_write_r+0x1e>
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	b103      	cbz	r3, 80083fa <_write_r+0x1e>
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	bd38      	pop	{r3, r4, r5, pc}
 80083fc:	20001448 	.word	0x20001448

08008400 <__errno>:
 8008400:	4b01      	ldr	r3, [pc, #4]	; (8008408 <__errno+0x8>)
 8008402:	6818      	ldr	r0, [r3, #0]
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	20000084 	.word	0x20000084

0800840c <__libc_init_array>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	4d0d      	ldr	r5, [pc, #52]	; (8008444 <__libc_init_array+0x38>)
 8008410:	4c0d      	ldr	r4, [pc, #52]	; (8008448 <__libc_init_array+0x3c>)
 8008412:	1b64      	subs	r4, r4, r5
 8008414:	10a4      	asrs	r4, r4, #2
 8008416:	2600      	movs	r6, #0
 8008418:	42a6      	cmp	r6, r4
 800841a:	d109      	bne.n	8008430 <__libc_init_array+0x24>
 800841c:	4d0b      	ldr	r5, [pc, #44]	; (800844c <__libc_init_array+0x40>)
 800841e:	4c0c      	ldr	r4, [pc, #48]	; (8008450 <__libc_init_array+0x44>)
 8008420:	f000 ff62 	bl	80092e8 <_init>
 8008424:	1b64      	subs	r4, r4, r5
 8008426:	10a4      	asrs	r4, r4, #2
 8008428:	2600      	movs	r6, #0
 800842a:	42a6      	cmp	r6, r4
 800842c:	d105      	bne.n	800843a <__libc_init_array+0x2e>
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	f855 3b04 	ldr.w	r3, [r5], #4
 8008434:	4798      	blx	r3
 8008436:	3601      	adds	r6, #1
 8008438:	e7ee      	b.n	8008418 <__libc_init_array+0xc>
 800843a:	f855 3b04 	ldr.w	r3, [r5], #4
 800843e:	4798      	blx	r3
 8008440:	3601      	adds	r6, #1
 8008442:	e7f2      	b.n	800842a <__libc_init_array+0x1e>
 8008444:	08009fec 	.word	0x08009fec
 8008448:	08009fec 	.word	0x08009fec
 800844c:	08009fec 	.word	0x08009fec
 8008450:	08009ff0 	.word	0x08009ff0

08008454 <__retarget_lock_acquire_recursive>:
 8008454:	4770      	bx	lr

08008456 <__retarget_lock_release_recursive>:
 8008456:	4770      	bx	lr

08008458 <memcpy>:
 8008458:	440a      	add	r2, r1
 800845a:	4291      	cmp	r1, r2
 800845c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008460:	d100      	bne.n	8008464 <memcpy+0xc>
 8008462:	4770      	bx	lr
 8008464:	b510      	push	{r4, lr}
 8008466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800846a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800846e:	4291      	cmp	r1, r2
 8008470:	d1f9      	bne.n	8008466 <memcpy+0xe>
 8008472:	bd10      	pop	{r4, pc}

08008474 <__assert_func>:
 8008474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008476:	4614      	mov	r4, r2
 8008478:	461a      	mov	r2, r3
 800847a:	4b09      	ldr	r3, [pc, #36]	; (80084a0 <__assert_func+0x2c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4605      	mov	r5, r0
 8008480:	68d8      	ldr	r0, [r3, #12]
 8008482:	b14c      	cbz	r4, 8008498 <__assert_func+0x24>
 8008484:	4b07      	ldr	r3, [pc, #28]	; (80084a4 <__assert_func+0x30>)
 8008486:	9100      	str	r1, [sp, #0]
 8008488:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800848c:	4906      	ldr	r1, [pc, #24]	; (80084a8 <__assert_func+0x34>)
 800848e:	462b      	mov	r3, r5
 8008490:	f000 fde8 	bl	8009064 <fiprintf>
 8008494:	f000 fea6 	bl	80091e4 <abort>
 8008498:	4b04      	ldr	r3, [pc, #16]	; (80084ac <__assert_func+0x38>)
 800849a:	461c      	mov	r4, r3
 800849c:	e7f3      	b.n	8008486 <__assert_func+0x12>
 800849e:	bf00      	nop
 80084a0:	20000084 	.word	0x20000084
 80084a4:	08009f75 	.word	0x08009f75
 80084a8:	08009f82 	.word	0x08009f82
 80084ac:	08009fb0 	.word	0x08009fb0

080084b0 <_free_r>:
 80084b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084b2:	2900      	cmp	r1, #0
 80084b4:	d044      	beq.n	8008540 <_free_r+0x90>
 80084b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ba:	9001      	str	r0, [sp, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f1a1 0404 	sub.w	r4, r1, #4
 80084c2:	bfb8      	it	lt
 80084c4:	18e4      	addlt	r4, r4, r3
 80084c6:	f000 f8e7 	bl	8008698 <__malloc_lock>
 80084ca:	4a1e      	ldr	r2, [pc, #120]	; (8008544 <_free_r+0x94>)
 80084cc:	9801      	ldr	r0, [sp, #4]
 80084ce:	6813      	ldr	r3, [r2, #0]
 80084d0:	b933      	cbnz	r3, 80084e0 <_free_r+0x30>
 80084d2:	6063      	str	r3, [r4, #4]
 80084d4:	6014      	str	r4, [r2, #0]
 80084d6:	b003      	add	sp, #12
 80084d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084dc:	f000 b8e2 	b.w	80086a4 <__malloc_unlock>
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	d908      	bls.n	80084f6 <_free_r+0x46>
 80084e4:	6825      	ldr	r5, [r4, #0]
 80084e6:	1961      	adds	r1, r4, r5
 80084e8:	428b      	cmp	r3, r1
 80084ea:	bf01      	itttt	eq
 80084ec:	6819      	ldreq	r1, [r3, #0]
 80084ee:	685b      	ldreq	r3, [r3, #4]
 80084f0:	1949      	addeq	r1, r1, r5
 80084f2:	6021      	streq	r1, [r4, #0]
 80084f4:	e7ed      	b.n	80084d2 <_free_r+0x22>
 80084f6:	461a      	mov	r2, r3
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	b10b      	cbz	r3, 8008500 <_free_r+0x50>
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	d9fa      	bls.n	80084f6 <_free_r+0x46>
 8008500:	6811      	ldr	r1, [r2, #0]
 8008502:	1855      	adds	r5, r2, r1
 8008504:	42a5      	cmp	r5, r4
 8008506:	d10b      	bne.n	8008520 <_free_r+0x70>
 8008508:	6824      	ldr	r4, [r4, #0]
 800850a:	4421      	add	r1, r4
 800850c:	1854      	adds	r4, r2, r1
 800850e:	42a3      	cmp	r3, r4
 8008510:	6011      	str	r1, [r2, #0]
 8008512:	d1e0      	bne.n	80084d6 <_free_r+0x26>
 8008514:	681c      	ldr	r4, [r3, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	6053      	str	r3, [r2, #4]
 800851a:	440c      	add	r4, r1
 800851c:	6014      	str	r4, [r2, #0]
 800851e:	e7da      	b.n	80084d6 <_free_r+0x26>
 8008520:	d902      	bls.n	8008528 <_free_r+0x78>
 8008522:	230c      	movs	r3, #12
 8008524:	6003      	str	r3, [r0, #0]
 8008526:	e7d6      	b.n	80084d6 <_free_r+0x26>
 8008528:	6825      	ldr	r5, [r4, #0]
 800852a:	1961      	adds	r1, r4, r5
 800852c:	428b      	cmp	r3, r1
 800852e:	bf04      	itt	eq
 8008530:	6819      	ldreq	r1, [r3, #0]
 8008532:	685b      	ldreq	r3, [r3, #4]
 8008534:	6063      	str	r3, [r4, #4]
 8008536:	bf04      	itt	eq
 8008538:	1949      	addeq	r1, r1, r5
 800853a:	6021      	streq	r1, [r4, #0]
 800853c:	6054      	str	r4, [r2, #4]
 800853e:	e7ca      	b.n	80084d6 <_free_r+0x26>
 8008540:	b003      	add	sp, #12
 8008542:	bd30      	pop	{r4, r5, pc}
 8008544:	20001450 	.word	0x20001450

08008548 <malloc>:
 8008548:	4b02      	ldr	r3, [pc, #8]	; (8008554 <malloc+0xc>)
 800854a:	4601      	mov	r1, r0
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	f000 b823 	b.w	8008598 <_malloc_r>
 8008552:	bf00      	nop
 8008554:	20000084 	.word	0x20000084

08008558 <sbrk_aligned>:
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	4e0e      	ldr	r6, [pc, #56]	; (8008594 <sbrk_aligned+0x3c>)
 800855c:	460c      	mov	r4, r1
 800855e:	6831      	ldr	r1, [r6, #0]
 8008560:	4605      	mov	r5, r0
 8008562:	b911      	cbnz	r1, 800856a <sbrk_aligned+0x12>
 8008564:	f000 fe2e 	bl	80091c4 <_sbrk_r>
 8008568:	6030      	str	r0, [r6, #0]
 800856a:	4621      	mov	r1, r4
 800856c:	4628      	mov	r0, r5
 800856e:	f000 fe29 	bl	80091c4 <_sbrk_r>
 8008572:	1c43      	adds	r3, r0, #1
 8008574:	d00a      	beq.n	800858c <sbrk_aligned+0x34>
 8008576:	1cc4      	adds	r4, r0, #3
 8008578:	f024 0403 	bic.w	r4, r4, #3
 800857c:	42a0      	cmp	r0, r4
 800857e:	d007      	beq.n	8008590 <sbrk_aligned+0x38>
 8008580:	1a21      	subs	r1, r4, r0
 8008582:	4628      	mov	r0, r5
 8008584:	f000 fe1e 	bl	80091c4 <_sbrk_r>
 8008588:	3001      	adds	r0, #1
 800858a:	d101      	bne.n	8008590 <sbrk_aligned+0x38>
 800858c:	f04f 34ff 	mov.w	r4, #4294967295
 8008590:	4620      	mov	r0, r4
 8008592:	bd70      	pop	{r4, r5, r6, pc}
 8008594:	20001454 	.word	0x20001454

08008598 <_malloc_r>:
 8008598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800859c:	1ccd      	adds	r5, r1, #3
 800859e:	f025 0503 	bic.w	r5, r5, #3
 80085a2:	3508      	adds	r5, #8
 80085a4:	2d0c      	cmp	r5, #12
 80085a6:	bf38      	it	cc
 80085a8:	250c      	movcc	r5, #12
 80085aa:	2d00      	cmp	r5, #0
 80085ac:	4607      	mov	r7, r0
 80085ae:	db01      	blt.n	80085b4 <_malloc_r+0x1c>
 80085b0:	42a9      	cmp	r1, r5
 80085b2:	d905      	bls.n	80085c0 <_malloc_r+0x28>
 80085b4:	230c      	movs	r3, #12
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	2600      	movs	r6, #0
 80085ba:	4630      	mov	r0, r6
 80085bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008694 <_malloc_r+0xfc>
 80085c4:	f000 f868 	bl	8008698 <__malloc_lock>
 80085c8:	f8d8 3000 	ldr.w	r3, [r8]
 80085cc:	461c      	mov	r4, r3
 80085ce:	bb5c      	cbnz	r4, 8008628 <_malloc_r+0x90>
 80085d0:	4629      	mov	r1, r5
 80085d2:	4638      	mov	r0, r7
 80085d4:	f7ff ffc0 	bl	8008558 <sbrk_aligned>
 80085d8:	1c43      	adds	r3, r0, #1
 80085da:	4604      	mov	r4, r0
 80085dc:	d155      	bne.n	800868a <_malloc_r+0xf2>
 80085de:	f8d8 4000 	ldr.w	r4, [r8]
 80085e2:	4626      	mov	r6, r4
 80085e4:	2e00      	cmp	r6, #0
 80085e6:	d145      	bne.n	8008674 <_malloc_r+0xdc>
 80085e8:	2c00      	cmp	r4, #0
 80085ea:	d048      	beq.n	800867e <_malloc_r+0xe6>
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	4631      	mov	r1, r6
 80085f0:	4638      	mov	r0, r7
 80085f2:	eb04 0903 	add.w	r9, r4, r3
 80085f6:	f000 fde5 	bl	80091c4 <_sbrk_r>
 80085fa:	4581      	cmp	r9, r0
 80085fc:	d13f      	bne.n	800867e <_malloc_r+0xe6>
 80085fe:	6821      	ldr	r1, [r4, #0]
 8008600:	1a6d      	subs	r5, r5, r1
 8008602:	4629      	mov	r1, r5
 8008604:	4638      	mov	r0, r7
 8008606:	f7ff ffa7 	bl	8008558 <sbrk_aligned>
 800860a:	3001      	adds	r0, #1
 800860c:	d037      	beq.n	800867e <_malloc_r+0xe6>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	442b      	add	r3, r5
 8008612:	6023      	str	r3, [r4, #0]
 8008614:	f8d8 3000 	ldr.w	r3, [r8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d038      	beq.n	800868e <_malloc_r+0xf6>
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	42a2      	cmp	r2, r4
 8008620:	d12b      	bne.n	800867a <_malloc_r+0xe2>
 8008622:	2200      	movs	r2, #0
 8008624:	605a      	str	r2, [r3, #4]
 8008626:	e00f      	b.n	8008648 <_malloc_r+0xb0>
 8008628:	6822      	ldr	r2, [r4, #0]
 800862a:	1b52      	subs	r2, r2, r5
 800862c:	d41f      	bmi.n	800866e <_malloc_r+0xd6>
 800862e:	2a0b      	cmp	r2, #11
 8008630:	d917      	bls.n	8008662 <_malloc_r+0xca>
 8008632:	1961      	adds	r1, r4, r5
 8008634:	42a3      	cmp	r3, r4
 8008636:	6025      	str	r5, [r4, #0]
 8008638:	bf18      	it	ne
 800863a:	6059      	strne	r1, [r3, #4]
 800863c:	6863      	ldr	r3, [r4, #4]
 800863e:	bf08      	it	eq
 8008640:	f8c8 1000 	streq.w	r1, [r8]
 8008644:	5162      	str	r2, [r4, r5]
 8008646:	604b      	str	r3, [r1, #4]
 8008648:	4638      	mov	r0, r7
 800864a:	f104 060b 	add.w	r6, r4, #11
 800864e:	f000 f829 	bl	80086a4 <__malloc_unlock>
 8008652:	f026 0607 	bic.w	r6, r6, #7
 8008656:	1d23      	adds	r3, r4, #4
 8008658:	1af2      	subs	r2, r6, r3
 800865a:	d0ae      	beq.n	80085ba <_malloc_r+0x22>
 800865c:	1b9b      	subs	r3, r3, r6
 800865e:	50a3      	str	r3, [r4, r2]
 8008660:	e7ab      	b.n	80085ba <_malloc_r+0x22>
 8008662:	42a3      	cmp	r3, r4
 8008664:	6862      	ldr	r2, [r4, #4]
 8008666:	d1dd      	bne.n	8008624 <_malloc_r+0x8c>
 8008668:	f8c8 2000 	str.w	r2, [r8]
 800866c:	e7ec      	b.n	8008648 <_malloc_r+0xb0>
 800866e:	4623      	mov	r3, r4
 8008670:	6864      	ldr	r4, [r4, #4]
 8008672:	e7ac      	b.n	80085ce <_malloc_r+0x36>
 8008674:	4634      	mov	r4, r6
 8008676:	6876      	ldr	r6, [r6, #4]
 8008678:	e7b4      	b.n	80085e4 <_malloc_r+0x4c>
 800867a:	4613      	mov	r3, r2
 800867c:	e7cc      	b.n	8008618 <_malloc_r+0x80>
 800867e:	230c      	movs	r3, #12
 8008680:	603b      	str	r3, [r7, #0]
 8008682:	4638      	mov	r0, r7
 8008684:	f000 f80e 	bl	80086a4 <__malloc_unlock>
 8008688:	e797      	b.n	80085ba <_malloc_r+0x22>
 800868a:	6025      	str	r5, [r4, #0]
 800868c:	e7dc      	b.n	8008648 <_malloc_r+0xb0>
 800868e:	605b      	str	r3, [r3, #4]
 8008690:	deff      	udf	#255	; 0xff
 8008692:	bf00      	nop
 8008694:	20001450 	.word	0x20001450

08008698 <__malloc_lock>:
 8008698:	4801      	ldr	r0, [pc, #4]	; (80086a0 <__malloc_lock+0x8>)
 800869a:	f7ff bedb 	b.w	8008454 <__retarget_lock_acquire_recursive>
 800869e:	bf00      	nop
 80086a0:	2000144c 	.word	0x2000144c

080086a4 <__malloc_unlock>:
 80086a4:	4801      	ldr	r0, [pc, #4]	; (80086ac <__malloc_unlock+0x8>)
 80086a6:	f7ff bed6 	b.w	8008456 <__retarget_lock_release_recursive>
 80086aa:	bf00      	nop
 80086ac:	2000144c 	.word	0x2000144c

080086b0 <__ssputs_r>:
 80086b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086b4:	688e      	ldr	r6, [r1, #8]
 80086b6:	461f      	mov	r7, r3
 80086b8:	42be      	cmp	r6, r7
 80086ba:	680b      	ldr	r3, [r1, #0]
 80086bc:	4682      	mov	sl, r0
 80086be:	460c      	mov	r4, r1
 80086c0:	4690      	mov	r8, r2
 80086c2:	d82c      	bhi.n	800871e <__ssputs_r+0x6e>
 80086c4:	898a      	ldrh	r2, [r1, #12]
 80086c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086ca:	d026      	beq.n	800871a <__ssputs_r+0x6a>
 80086cc:	6965      	ldr	r5, [r4, #20]
 80086ce:	6909      	ldr	r1, [r1, #16]
 80086d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086d4:	eba3 0901 	sub.w	r9, r3, r1
 80086d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086dc:	1c7b      	adds	r3, r7, #1
 80086de:	444b      	add	r3, r9
 80086e0:	106d      	asrs	r5, r5, #1
 80086e2:	429d      	cmp	r5, r3
 80086e4:	bf38      	it	cc
 80086e6:	461d      	movcc	r5, r3
 80086e8:	0553      	lsls	r3, r2, #21
 80086ea:	d527      	bpl.n	800873c <__ssputs_r+0x8c>
 80086ec:	4629      	mov	r1, r5
 80086ee:	f7ff ff53 	bl	8008598 <_malloc_r>
 80086f2:	4606      	mov	r6, r0
 80086f4:	b360      	cbz	r0, 8008750 <__ssputs_r+0xa0>
 80086f6:	6921      	ldr	r1, [r4, #16]
 80086f8:	464a      	mov	r2, r9
 80086fa:	f7ff fead 	bl	8008458 <memcpy>
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008708:	81a3      	strh	r3, [r4, #12]
 800870a:	6126      	str	r6, [r4, #16]
 800870c:	6165      	str	r5, [r4, #20]
 800870e:	444e      	add	r6, r9
 8008710:	eba5 0509 	sub.w	r5, r5, r9
 8008714:	6026      	str	r6, [r4, #0]
 8008716:	60a5      	str	r5, [r4, #8]
 8008718:	463e      	mov	r6, r7
 800871a:	42be      	cmp	r6, r7
 800871c:	d900      	bls.n	8008720 <__ssputs_r+0x70>
 800871e:	463e      	mov	r6, r7
 8008720:	6820      	ldr	r0, [r4, #0]
 8008722:	4632      	mov	r2, r6
 8008724:	4641      	mov	r1, r8
 8008726:	f000 fd11 	bl	800914c <memmove>
 800872a:	68a3      	ldr	r3, [r4, #8]
 800872c:	1b9b      	subs	r3, r3, r6
 800872e:	60a3      	str	r3, [r4, #8]
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	4433      	add	r3, r6
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	2000      	movs	r0, #0
 8008738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873c:	462a      	mov	r2, r5
 800873e:	f000 fd58 	bl	80091f2 <_realloc_r>
 8008742:	4606      	mov	r6, r0
 8008744:	2800      	cmp	r0, #0
 8008746:	d1e0      	bne.n	800870a <__ssputs_r+0x5a>
 8008748:	6921      	ldr	r1, [r4, #16]
 800874a:	4650      	mov	r0, sl
 800874c:	f7ff feb0 	bl	80084b0 <_free_r>
 8008750:	230c      	movs	r3, #12
 8008752:	f8ca 3000 	str.w	r3, [sl]
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	f04f 30ff 	mov.w	r0, #4294967295
 8008762:	e7e9      	b.n	8008738 <__ssputs_r+0x88>

08008764 <_svfiprintf_r>:
 8008764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008768:	4698      	mov	r8, r3
 800876a:	898b      	ldrh	r3, [r1, #12]
 800876c:	061b      	lsls	r3, r3, #24
 800876e:	b09d      	sub	sp, #116	; 0x74
 8008770:	4607      	mov	r7, r0
 8008772:	460d      	mov	r5, r1
 8008774:	4614      	mov	r4, r2
 8008776:	d50e      	bpl.n	8008796 <_svfiprintf_r+0x32>
 8008778:	690b      	ldr	r3, [r1, #16]
 800877a:	b963      	cbnz	r3, 8008796 <_svfiprintf_r+0x32>
 800877c:	2140      	movs	r1, #64	; 0x40
 800877e:	f7ff ff0b 	bl	8008598 <_malloc_r>
 8008782:	6028      	str	r0, [r5, #0]
 8008784:	6128      	str	r0, [r5, #16]
 8008786:	b920      	cbnz	r0, 8008792 <_svfiprintf_r+0x2e>
 8008788:	230c      	movs	r3, #12
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	f04f 30ff 	mov.w	r0, #4294967295
 8008790:	e0d0      	b.n	8008934 <_svfiprintf_r+0x1d0>
 8008792:	2340      	movs	r3, #64	; 0x40
 8008794:	616b      	str	r3, [r5, #20]
 8008796:	2300      	movs	r3, #0
 8008798:	9309      	str	r3, [sp, #36]	; 0x24
 800879a:	2320      	movs	r3, #32
 800879c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80087a4:	2330      	movs	r3, #48	; 0x30
 80087a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800894c <_svfiprintf_r+0x1e8>
 80087aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087ae:	f04f 0901 	mov.w	r9, #1
 80087b2:	4623      	mov	r3, r4
 80087b4:	469a      	mov	sl, r3
 80087b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087ba:	b10a      	cbz	r2, 80087c0 <_svfiprintf_r+0x5c>
 80087bc:	2a25      	cmp	r2, #37	; 0x25
 80087be:	d1f9      	bne.n	80087b4 <_svfiprintf_r+0x50>
 80087c0:	ebba 0b04 	subs.w	fp, sl, r4
 80087c4:	d00b      	beq.n	80087de <_svfiprintf_r+0x7a>
 80087c6:	465b      	mov	r3, fp
 80087c8:	4622      	mov	r2, r4
 80087ca:	4629      	mov	r1, r5
 80087cc:	4638      	mov	r0, r7
 80087ce:	f7ff ff6f 	bl	80086b0 <__ssputs_r>
 80087d2:	3001      	adds	r0, #1
 80087d4:	f000 80a9 	beq.w	800892a <_svfiprintf_r+0x1c6>
 80087d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087da:	445a      	add	r2, fp
 80087dc:	9209      	str	r2, [sp, #36]	; 0x24
 80087de:	f89a 3000 	ldrb.w	r3, [sl]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 80a1 	beq.w	800892a <_svfiprintf_r+0x1c6>
 80087e8:	2300      	movs	r3, #0
 80087ea:	f04f 32ff 	mov.w	r2, #4294967295
 80087ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087f2:	f10a 0a01 	add.w	sl, sl, #1
 80087f6:	9304      	str	r3, [sp, #16]
 80087f8:	9307      	str	r3, [sp, #28]
 80087fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087fe:	931a      	str	r3, [sp, #104]	; 0x68
 8008800:	4654      	mov	r4, sl
 8008802:	2205      	movs	r2, #5
 8008804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008808:	4850      	ldr	r0, [pc, #320]	; (800894c <_svfiprintf_r+0x1e8>)
 800880a:	f7f7 fce9 	bl	80001e0 <memchr>
 800880e:	9a04      	ldr	r2, [sp, #16]
 8008810:	b9d8      	cbnz	r0, 800884a <_svfiprintf_r+0xe6>
 8008812:	06d0      	lsls	r0, r2, #27
 8008814:	bf44      	itt	mi
 8008816:	2320      	movmi	r3, #32
 8008818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800881c:	0711      	lsls	r1, r2, #28
 800881e:	bf44      	itt	mi
 8008820:	232b      	movmi	r3, #43	; 0x2b
 8008822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008826:	f89a 3000 	ldrb.w	r3, [sl]
 800882a:	2b2a      	cmp	r3, #42	; 0x2a
 800882c:	d015      	beq.n	800885a <_svfiprintf_r+0xf6>
 800882e:	9a07      	ldr	r2, [sp, #28]
 8008830:	4654      	mov	r4, sl
 8008832:	2000      	movs	r0, #0
 8008834:	f04f 0c0a 	mov.w	ip, #10
 8008838:	4621      	mov	r1, r4
 800883a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800883e:	3b30      	subs	r3, #48	; 0x30
 8008840:	2b09      	cmp	r3, #9
 8008842:	d94d      	bls.n	80088e0 <_svfiprintf_r+0x17c>
 8008844:	b1b0      	cbz	r0, 8008874 <_svfiprintf_r+0x110>
 8008846:	9207      	str	r2, [sp, #28]
 8008848:	e014      	b.n	8008874 <_svfiprintf_r+0x110>
 800884a:	eba0 0308 	sub.w	r3, r0, r8
 800884e:	fa09 f303 	lsl.w	r3, r9, r3
 8008852:	4313      	orrs	r3, r2
 8008854:	9304      	str	r3, [sp, #16]
 8008856:	46a2      	mov	sl, r4
 8008858:	e7d2      	b.n	8008800 <_svfiprintf_r+0x9c>
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	1d19      	adds	r1, r3, #4
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	9103      	str	r1, [sp, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	bfbb      	ittet	lt
 8008866:	425b      	neglt	r3, r3
 8008868:	f042 0202 	orrlt.w	r2, r2, #2
 800886c:	9307      	strge	r3, [sp, #28]
 800886e:	9307      	strlt	r3, [sp, #28]
 8008870:	bfb8      	it	lt
 8008872:	9204      	strlt	r2, [sp, #16]
 8008874:	7823      	ldrb	r3, [r4, #0]
 8008876:	2b2e      	cmp	r3, #46	; 0x2e
 8008878:	d10c      	bne.n	8008894 <_svfiprintf_r+0x130>
 800887a:	7863      	ldrb	r3, [r4, #1]
 800887c:	2b2a      	cmp	r3, #42	; 0x2a
 800887e:	d134      	bne.n	80088ea <_svfiprintf_r+0x186>
 8008880:	9b03      	ldr	r3, [sp, #12]
 8008882:	1d1a      	adds	r2, r3, #4
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	9203      	str	r2, [sp, #12]
 8008888:	2b00      	cmp	r3, #0
 800888a:	bfb8      	it	lt
 800888c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008890:	3402      	adds	r4, #2
 8008892:	9305      	str	r3, [sp, #20]
 8008894:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800895c <_svfiprintf_r+0x1f8>
 8008898:	7821      	ldrb	r1, [r4, #0]
 800889a:	2203      	movs	r2, #3
 800889c:	4650      	mov	r0, sl
 800889e:	f7f7 fc9f 	bl	80001e0 <memchr>
 80088a2:	b138      	cbz	r0, 80088b4 <_svfiprintf_r+0x150>
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	eba0 000a 	sub.w	r0, r0, sl
 80088aa:	2240      	movs	r2, #64	; 0x40
 80088ac:	4082      	lsls	r2, r0
 80088ae:	4313      	orrs	r3, r2
 80088b0:	3401      	adds	r4, #1
 80088b2:	9304      	str	r3, [sp, #16]
 80088b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b8:	4825      	ldr	r0, [pc, #148]	; (8008950 <_svfiprintf_r+0x1ec>)
 80088ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088be:	2206      	movs	r2, #6
 80088c0:	f7f7 fc8e 	bl	80001e0 <memchr>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d038      	beq.n	800893a <_svfiprintf_r+0x1d6>
 80088c8:	4b22      	ldr	r3, [pc, #136]	; (8008954 <_svfiprintf_r+0x1f0>)
 80088ca:	bb1b      	cbnz	r3, 8008914 <_svfiprintf_r+0x1b0>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	3307      	adds	r3, #7
 80088d0:	f023 0307 	bic.w	r3, r3, #7
 80088d4:	3308      	adds	r3, #8
 80088d6:	9303      	str	r3, [sp, #12]
 80088d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088da:	4433      	add	r3, r6
 80088dc:	9309      	str	r3, [sp, #36]	; 0x24
 80088de:	e768      	b.n	80087b2 <_svfiprintf_r+0x4e>
 80088e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80088e4:	460c      	mov	r4, r1
 80088e6:	2001      	movs	r0, #1
 80088e8:	e7a6      	b.n	8008838 <_svfiprintf_r+0xd4>
 80088ea:	2300      	movs	r3, #0
 80088ec:	3401      	adds	r4, #1
 80088ee:	9305      	str	r3, [sp, #20]
 80088f0:	4619      	mov	r1, r3
 80088f2:	f04f 0c0a 	mov.w	ip, #10
 80088f6:	4620      	mov	r0, r4
 80088f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088fc:	3a30      	subs	r2, #48	; 0x30
 80088fe:	2a09      	cmp	r2, #9
 8008900:	d903      	bls.n	800890a <_svfiprintf_r+0x1a6>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0c6      	beq.n	8008894 <_svfiprintf_r+0x130>
 8008906:	9105      	str	r1, [sp, #20]
 8008908:	e7c4      	b.n	8008894 <_svfiprintf_r+0x130>
 800890a:	fb0c 2101 	mla	r1, ip, r1, r2
 800890e:	4604      	mov	r4, r0
 8008910:	2301      	movs	r3, #1
 8008912:	e7f0      	b.n	80088f6 <_svfiprintf_r+0x192>
 8008914:	ab03      	add	r3, sp, #12
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	462a      	mov	r2, r5
 800891a:	4b0f      	ldr	r3, [pc, #60]	; (8008958 <_svfiprintf_r+0x1f4>)
 800891c:	a904      	add	r1, sp, #16
 800891e:	4638      	mov	r0, r7
 8008920:	f3af 8000 	nop.w
 8008924:	1c42      	adds	r2, r0, #1
 8008926:	4606      	mov	r6, r0
 8008928:	d1d6      	bne.n	80088d8 <_svfiprintf_r+0x174>
 800892a:	89ab      	ldrh	r3, [r5, #12]
 800892c:	065b      	lsls	r3, r3, #25
 800892e:	f53f af2d 	bmi.w	800878c <_svfiprintf_r+0x28>
 8008932:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008934:	b01d      	add	sp, #116	; 0x74
 8008936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893a:	ab03      	add	r3, sp, #12
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	462a      	mov	r2, r5
 8008940:	4b05      	ldr	r3, [pc, #20]	; (8008958 <_svfiprintf_r+0x1f4>)
 8008942:	a904      	add	r1, sp, #16
 8008944:	4638      	mov	r0, r7
 8008946:	f000 f9bd 	bl	8008cc4 <_printf_i>
 800894a:	e7eb      	b.n	8008924 <_svfiprintf_r+0x1c0>
 800894c:	08009fb1 	.word	0x08009fb1
 8008950:	08009fbb 	.word	0x08009fbb
 8008954:	00000000 	.word	0x00000000
 8008958:	080086b1 	.word	0x080086b1
 800895c:	08009fb7 	.word	0x08009fb7

08008960 <__sfputc_r>:
 8008960:	6893      	ldr	r3, [r2, #8]
 8008962:	3b01      	subs	r3, #1
 8008964:	2b00      	cmp	r3, #0
 8008966:	b410      	push	{r4}
 8008968:	6093      	str	r3, [r2, #8]
 800896a:	da08      	bge.n	800897e <__sfputc_r+0x1e>
 800896c:	6994      	ldr	r4, [r2, #24]
 800896e:	42a3      	cmp	r3, r4
 8008970:	db01      	blt.n	8008976 <__sfputc_r+0x16>
 8008972:	290a      	cmp	r1, #10
 8008974:	d103      	bne.n	800897e <__sfputc_r+0x1e>
 8008976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800897a:	f7ff bba8 	b.w	80080ce <__swbuf_r>
 800897e:	6813      	ldr	r3, [r2, #0]
 8008980:	1c58      	adds	r0, r3, #1
 8008982:	6010      	str	r0, [r2, #0]
 8008984:	7019      	strb	r1, [r3, #0]
 8008986:	4608      	mov	r0, r1
 8008988:	f85d 4b04 	ldr.w	r4, [sp], #4
 800898c:	4770      	bx	lr

0800898e <__sfputs_r>:
 800898e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008990:	4606      	mov	r6, r0
 8008992:	460f      	mov	r7, r1
 8008994:	4614      	mov	r4, r2
 8008996:	18d5      	adds	r5, r2, r3
 8008998:	42ac      	cmp	r4, r5
 800899a:	d101      	bne.n	80089a0 <__sfputs_r+0x12>
 800899c:	2000      	movs	r0, #0
 800899e:	e007      	b.n	80089b0 <__sfputs_r+0x22>
 80089a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a4:	463a      	mov	r2, r7
 80089a6:	4630      	mov	r0, r6
 80089a8:	f7ff ffda 	bl	8008960 <__sfputc_r>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d1f3      	bne.n	8008998 <__sfputs_r+0xa>
 80089b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089b4 <_vfiprintf_r>:
 80089b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b8:	460d      	mov	r5, r1
 80089ba:	b09d      	sub	sp, #116	; 0x74
 80089bc:	4614      	mov	r4, r2
 80089be:	4698      	mov	r8, r3
 80089c0:	4606      	mov	r6, r0
 80089c2:	b118      	cbz	r0, 80089cc <_vfiprintf_r+0x18>
 80089c4:	6a03      	ldr	r3, [r0, #32]
 80089c6:	b90b      	cbnz	r3, 80089cc <_vfiprintf_r+0x18>
 80089c8:	f7ff fa7a 	bl	8007ec0 <__sinit>
 80089cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089ce:	07d9      	lsls	r1, r3, #31
 80089d0:	d405      	bmi.n	80089de <_vfiprintf_r+0x2a>
 80089d2:	89ab      	ldrh	r3, [r5, #12]
 80089d4:	059a      	lsls	r2, r3, #22
 80089d6:	d402      	bmi.n	80089de <_vfiprintf_r+0x2a>
 80089d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089da:	f7ff fd3b 	bl	8008454 <__retarget_lock_acquire_recursive>
 80089de:	89ab      	ldrh	r3, [r5, #12]
 80089e0:	071b      	lsls	r3, r3, #28
 80089e2:	d501      	bpl.n	80089e8 <_vfiprintf_r+0x34>
 80089e4:	692b      	ldr	r3, [r5, #16]
 80089e6:	b99b      	cbnz	r3, 8008a10 <_vfiprintf_r+0x5c>
 80089e8:	4629      	mov	r1, r5
 80089ea:	4630      	mov	r0, r6
 80089ec:	f7ff fbac 	bl	8008148 <__swsetup_r>
 80089f0:	b170      	cbz	r0, 8008a10 <_vfiprintf_r+0x5c>
 80089f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089f4:	07dc      	lsls	r4, r3, #31
 80089f6:	d504      	bpl.n	8008a02 <_vfiprintf_r+0x4e>
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295
 80089fc:	b01d      	add	sp, #116	; 0x74
 80089fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a02:	89ab      	ldrh	r3, [r5, #12]
 8008a04:	0598      	lsls	r0, r3, #22
 8008a06:	d4f7      	bmi.n	80089f8 <_vfiprintf_r+0x44>
 8008a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a0a:	f7ff fd24 	bl	8008456 <__retarget_lock_release_recursive>
 8008a0e:	e7f3      	b.n	80089f8 <_vfiprintf_r+0x44>
 8008a10:	2300      	movs	r3, #0
 8008a12:	9309      	str	r3, [sp, #36]	; 0x24
 8008a14:	2320      	movs	r3, #32
 8008a16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a1e:	2330      	movs	r3, #48	; 0x30
 8008a20:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008bd4 <_vfiprintf_r+0x220>
 8008a24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a28:	f04f 0901 	mov.w	r9, #1
 8008a2c:	4623      	mov	r3, r4
 8008a2e:	469a      	mov	sl, r3
 8008a30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a34:	b10a      	cbz	r2, 8008a3a <_vfiprintf_r+0x86>
 8008a36:	2a25      	cmp	r2, #37	; 0x25
 8008a38:	d1f9      	bne.n	8008a2e <_vfiprintf_r+0x7a>
 8008a3a:	ebba 0b04 	subs.w	fp, sl, r4
 8008a3e:	d00b      	beq.n	8008a58 <_vfiprintf_r+0xa4>
 8008a40:	465b      	mov	r3, fp
 8008a42:	4622      	mov	r2, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	4630      	mov	r0, r6
 8008a48:	f7ff ffa1 	bl	800898e <__sfputs_r>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	f000 80a9 	beq.w	8008ba4 <_vfiprintf_r+0x1f0>
 8008a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a54:	445a      	add	r2, fp
 8008a56:	9209      	str	r2, [sp, #36]	; 0x24
 8008a58:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 80a1 	beq.w	8008ba4 <_vfiprintf_r+0x1f0>
 8008a62:	2300      	movs	r3, #0
 8008a64:	f04f 32ff 	mov.w	r2, #4294967295
 8008a68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a6c:	f10a 0a01 	add.w	sl, sl, #1
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	9307      	str	r3, [sp, #28]
 8008a74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a78:	931a      	str	r3, [sp, #104]	; 0x68
 8008a7a:	4654      	mov	r4, sl
 8008a7c:	2205      	movs	r2, #5
 8008a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a82:	4854      	ldr	r0, [pc, #336]	; (8008bd4 <_vfiprintf_r+0x220>)
 8008a84:	f7f7 fbac 	bl	80001e0 <memchr>
 8008a88:	9a04      	ldr	r2, [sp, #16]
 8008a8a:	b9d8      	cbnz	r0, 8008ac4 <_vfiprintf_r+0x110>
 8008a8c:	06d1      	lsls	r1, r2, #27
 8008a8e:	bf44      	itt	mi
 8008a90:	2320      	movmi	r3, #32
 8008a92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a96:	0713      	lsls	r3, r2, #28
 8008a98:	bf44      	itt	mi
 8008a9a:	232b      	movmi	r3, #43	; 0x2b
 8008a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aa0:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8008aa6:	d015      	beq.n	8008ad4 <_vfiprintf_r+0x120>
 8008aa8:	9a07      	ldr	r2, [sp, #28]
 8008aaa:	4654      	mov	r4, sl
 8008aac:	2000      	movs	r0, #0
 8008aae:	f04f 0c0a 	mov.w	ip, #10
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab8:	3b30      	subs	r3, #48	; 0x30
 8008aba:	2b09      	cmp	r3, #9
 8008abc:	d94d      	bls.n	8008b5a <_vfiprintf_r+0x1a6>
 8008abe:	b1b0      	cbz	r0, 8008aee <_vfiprintf_r+0x13a>
 8008ac0:	9207      	str	r2, [sp, #28]
 8008ac2:	e014      	b.n	8008aee <_vfiprintf_r+0x13a>
 8008ac4:	eba0 0308 	sub.w	r3, r0, r8
 8008ac8:	fa09 f303 	lsl.w	r3, r9, r3
 8008acc:	4313      	orrs	r3, r2
 8008ace:	9304      	str	r3, [sp, #16]
 8008ad0:	46a2      	mov	sl, r4
 8008ad2:	e7d2      	b.n	8008a7a <_vfiprintf_r+0xc6>
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	1d19      	adds	r1, r3, #4
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	9103      	str	r1, [sp, #12]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	bfbb      	ittet	lt
 8008ae0:	425b      	neglt	r3, r3
 8008ae2:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae6:	9307      	strge	r3, [sp, #28]
 8008ae8:	9307      	strlt	r3, [sp, #28]
 8008aea:	bfb8      	it	lt
 8008aec:	9204      	strlt	r2, [sp, #16]
 8008aee:	7823      	ldrb	r3, [r4, #0]
 8008af0:	2b2e      	cmp	r3, #46	; 0x2e
 8008af2:	d10c      	bne.n	8008b0e <_vfiprintf_r+0x15a>
 8008af4:	7863      	ldrb	r3, [r4, #1]
 8008af6:	2b2a      	cmp	r3, #42	; 0x2a
 8008af8:	d134      	bne.n	8008b64 <_vfiprintf_r+0x1b0>
 8008afa:	9b03      	ldr	r3, [sp, #12]
 8008afc:	1d1a      	adds	r2, r3, #4
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	9203      	str	r2, [sp, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	bfb8      	it	lt
 8008b06:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b0a:	3402      	adds	r4, #2
 8008b0c:	9305      	str	r3, [sp, #20]
 8008b0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008be4 <_vfiprintf_r+0x230>
 8008b12:	7821      	ldrb	r1, [r4, #0]
 8008b14:	2203      	movs	r2, #3
 8008b16:	4650      	mov	r0, sl
 8008b18:	f7f7 fb62 	bl	80001e0 <memchr>
 8008b1c:	b138      	cbz	r0, 8008b2e <_vfiprintf_r+0x17a>
 8008b1e:	9b04      	ldr	r3, [sp, #16]
 8008b20:	eba0 000a 	sub.w	r0, r0, sl
 8008b24:	2240      	movs	r2, #64	; 0x40
 8008b26:	4082      	lsls	r2, r0
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	3401      	adds	r4, #1
 8008b2c:	9304      	str	r3, [sp, #16]
 8008b2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b32:	4829      	ldr	r0, [pc, #164]	; (8008bd8 <_vfiprintf_r+0x224>)
 8008b34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b38:	2206      	movs	r2, #6
 8008b3a:	f7f7 fb51 	bl	80001e0 <memchr>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d03f      	beq.n	8008bc2 <_vfiprintf_r+0x20e>
 8008b42:	4b26      	ldr	r3, [pc, #152]	; (8008bdc <_vfiprintf_r+0x228>)
 8008b44:	bb1b      	cbnz	r3, 8008b8e <_vfiprintf_r+0x1da>
 8008b46:	9b03      	ldr	r3, [sp, #12]
 8008b48:	3307      	adds	r3, #7
 8008b4a:	f023 0307 	bic.w	r3, r3, #7
 8008b4e:	3308      	adds	r3, #8
 8008b50:	9303      	str	r3, [sp, #12]
 8008b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b54:	443b      	add	r3, r7
 8008b56:	9309      	str	r3, [sp, #36]	; 0x24
 8008b58:	e768      	b.n	8008a2c <_vfiprintf_r+0x78>
 8008b5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b5e:	460c      	mov	r4, r1
 8008b60:	2001      	movs	r0, #1
 8008b62:	e7a6      	b.n	8008ab2 <_vfiprintf_r+0xfe>
 8008b64:	2300      	movs	r3, #0
 8008b66:	3401      	adds	r4, #1
 8008b68:	9305      	str	r3, [sp, #20]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	f04f 0c0a 	mov.w	ip, #10
 8008b70:	4620      	mov	r0, r4
 8008b72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b76:	3a30      	subs	r2, #48	; 0x30
 8008b78:	2a09      	cmp	r2, #9
 8008b7a:	d903      	bls.n	8008b84 <_vfiprintf_r+0x1d0>
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d0c6      	beq.n	8008b0e <_vfiprintf_r+0x15a>
 8008b80:	9105      	str	r1, [sp, #20]
 8008b82:	e7c4      	b.n	8008b0e <_vfiprintf_r+0x15a>
 8008b84:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b88:	4604      	mov	r4, r0
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e7f0      	b.n	8008b70 <_vfiprintf_r+0x1bc>
 8008b8e:	ab03      	add	r3, sp, #12
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	462a      	mov	r2, r5
 8008b94:	4b12      	ldr	r3, [pc, #72]	; (8008be0 <_vfiprintf_r+0x22c>)
 8008b96:	a904      	add	r1, sp, #16
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f3af 8000 	nop.w
 8008b9e:	4607      	mov	r7, r0
 8008ba0:	1c78      	adds	r0, r7, #1
 8008ba2:	d1d6      	bne.n	8008b52 <_vfiprintf_r+0x19e>
 8008ba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ba6:	07d9      	lsls	r1, r3, #31
 8008ba8:	d405      	bmi.n	8008bb6 <_vfiprintf_r+0x202>
 8008baa:	89ab      	ldrh	r3, [r5, #12]
 8008bac:	059a      	lsls	r2, r3, #22
 8008bae:	d402      	bmi.n	8008bb6 <_vfiprintf_r+0x202>
 8008bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bb2:	f7ff fc50 	bl	8008456 <__retarget_lock_release_recursive>
 8008bb6:	89ab      	ldrh	r3, [r5, #12]
 8008bb8:	065b      	lsls	r3, r3, #25
 8008bba:	f53f af1d 	bmi.w	80089f8 <_vfiprintf_r+0x44>
 8008bbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bc0:	e71c      	b.n	80089fc <_vfiprintf_r+0x48>
 8008bc2:	ab03      	add	r3, sp, #12
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	462a      	mov	r2, r5
 8008bc8:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <_vfiprintf_r+0x22c>)
 8008bca:	a904      	add	r1, sp, #16
 8008bcc:	4630      	mov	r0, r6
 8008bce:	f000 f879 	bl	8008cc4 <_printf_i>
 8008bd2:	e7e4      	b.n	8008b9e <_vfiprintf_r+0x1ea>
 8008bd4:	08009fb1 	.word	0x08009fb1
 8008bd8:	08009fbb 	.word	0x08009fbb
 8008bdc:	00000000 	.word	0x00000000
 8008be0:	0800898f 	.word	0x0800898f
 8008be4:	08009fb7 	.word	0x08009fb7

08008be8 <_printf_common>:
 8008be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bec:	4616      	mov	r6, r2
 8008bee:	4699      	mov	r9, r3
 8008bf0:	688a      	ldr	r2, [r1, #8]
 8008bf2:	690b      	ldr	r3, [r1, #16]
 8008bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	bfb8      	it	lt
 8008bfc:	4613      	movlt	r3, r2
 8008bfe:	6033      	str	r3, [r6, #0]
 8008c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c04:	4607      	mov	r7, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	b10a      	cbz	r2, 8008c0e <_printf_common+0x26>
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	6033      	str	r3, [r6, #0]
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	0699      	lsls	r1, r3, #26
 8008c12:	bf42      	ittt	mi
 8008c14:	6833      	ldrmi	r3, [r6, #0]
 8008c16:	3302      	addmi	r3, #2
 8008c18:	6033      	strmi	r3, [r6, #0]
 8008c1a:	6825      	ldr	r5, [r4, #0]
 8008c1c:	f015 0506 	ands.w	r5, r5, #6
 8008c20:	d106      	bne.n	8008c30 <_printf_common+0x48>
 8008c22:	f104 0a19 	add.w	sl, r4, #25
 8008c26:	68e3      	ldr	r3, [r4, #12]
 8008c28:	6832      	ldr	r2, [r6, #0]
 8008c2a:	1a9b      	subs	r3, r3, r2
 8008c2c:	42ab      	cmp	r3, r5
 8008c2e:	dc26      	bgt.n	8008c7e <_printf_common+0x96>
 8008c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c34:	1e13      	subs	r3, r2, #0
 8008c36:	6822      	ldr	r2, [r4, #0]
 8008c38:	bf18      	it	ne
 8008c3a:	2301      	movne	r3, #1
 8008c3c:	0692      	lsls	r2, r2, #26
 8008c3e:	d42b      	bmi.n	8008c98 <_printf_common+0xb0>
 8008c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c44:	4649      	mov	r1, r9
 8008c46:	4638      	mov	r0, r7
 8008c48:	47c0      	blx	r8
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d01e      	beq.n	8008c8c <_printf_common+0xa4>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	6922      	ldr	r2, [r4, #16]
 8008c52:	f003 0306 	and.w	r3, r3, #6
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	bf02      	ittt	eq
 8008c5a:	68e5      	ldreq	r5, [r4, #12]
 8008c5c:	6833      	ldreq	r3, [r6, #0]
 8008c5e:	1aed      	subeq	r5, r5, r3
 8008c60:	68a3      	ldr	r3, [r4, #8]
 8008c62:	bf0c      	ite	eq
 8008c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c68:	2500      	movne	r5, #0
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	bfc4      	itt	gt
 8008c6e:	1a9b      	subgt	r3, r3, r2
 8008c70:	18ed      	addgt	r5, r5, r3
 8008c72:	2600      	movs	r6, #0
 8008c74:	341a      	adds	r4, #26
 8008c76:	42b5      	cmp	r5, r6
 8008c78:	d11a      	bne.n	8008cb0 <_printf_common+0xc8>
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	e008      	b.n	8008c90 <_printf_common+0xa8>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	4652      	mov	r2, sl
 8008c82:	4649      	mov	r1, r9
 8008c84:	4638      	mov	r0, r7
 8008c86:	47c0      	blx	r8
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d103      	bne.n	8008c94 <_printf_common+0xac>
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c94:	3501      	adds	r5, #1
 8008c96:	e7c6      	b.n	8008c26 <_printf_common+0x3e>
 8008c98:	18e1      	adds	r1, r4, r3
 8008c9a:	1c5a      	adds	r2, r3, #1
 8008c9c:	2030      	movs	r0, #48	; 0x30
 8008c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ca2:	4422      	add	r2, r4
 8008ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cac:	3302      	adds	r3, #2
 8008cae:	e7c7      	b.n	8008c40 <_printf_common+0x58>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	4622      	mov	r2, r4
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	47c0      	blx	r8
 8008cba:	3001      	adds	r0, #1
 8008cbc:	d0e6      	beq.n	8008c8c <_printf_common+0xa4>
 8008cbe:	3601      	adds	r6, #1
 8008cc0:	e7d9      	b.n	8008c76 <_printf_common+0x8e>
	...

08008cc4 <_printf_i>:
 8008cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	7e0f      	ldrb	r7, [r1, #24]
 8008cca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ccc:	2f78      	cmp	r7, #120	; 0x78
 8008cce:	4691      	mov	r9, r2
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	469a      	mov	sl, r3
 8008cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cda:	d807      	bhi.n	8008cec <_printf_i+0x28>
 8008cdc:	2f62      	cmp	r7, #98	; 0x62
 8008cde:	d80a      	bhi.n	8008cf6 <_printf_i+0x32>
 8008ce0:	2f00      	cmp	r7, #0
 8008ce2:	f000 80d4 	beq.w	8008e8e <_printf_i+0x1ca>
 8008ce6:	2f58      	cmp	r7, #88	; 0x58
 8008ce8:	f000 80c0 	beq.w	8008e6c <_printf_i+0x1a8>
 8008cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cf4:	e03a      	b.n	8008d6c <_printf_i+0xa8>
 8008cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cfa:	2b15      	cmp	r3, #21
 8008cfc:	d8f6      	bhi.n	8008cec <_printf_i+0x28>
 8008cfe:	a101      	add	r1, pc, #4	; (adr r1, 8008d04 <_printf_i+0x40>)
 8008d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d04:	08008d5d 	.word	0x08008d5d
 8008d08:	08008d71 	.word	0x08008d71
 8008d0c:	08008ced 	.word	0x08008ced
 8008d10:	08008ced 	.word	0x08008ced
 8008d14:	08008ced 	.word	0x08008ced
 8008d18:	08008ced 	.word	0x08008ced
 8008d1c:	08008d71 	.word	0x08008d71
 8008d20:	08008ced 	.word	0x08008ced
 8008d24:	08008ced 	.word	0x08008ced
 8008d28:	08008ced 	.word	0x08008ced
 8008d2c:	08008ced 	.word	0x08008ced
 8008d30:	08008e75 	.word	0x08008e75
 8008d34:	08008d9d 	.word	0x08008d9d
 8008d38:	08008e2f 	.word	0x08008e2f
 8008d3c:	08008ced 	.word	0x08008ced
 8008d40:	08008ced 	.word	0x08008ced
 8008d44:	08008e97 	.word	0x08008e97
 8008d48:	08008ced 	.word	0x08008ced
 8008d4c:	08008d9d 	.word	0x08008d9d
 8008d50:	08008ced 	.word	0x08008ced
 8008d54:	08008ced 	.word	0x08008ced
 8008d58:	08008e37 	.word	0x08008e37
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	1d1a      	adds	r2, r3, #4
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	602a      	str	r2, [r5, #0]
 8008d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e09f      	b.n	8008eb0 <_printf_i+0x1ec>
 8008d70:	6820      	ldr	r0, [r4, #0]
 8008d72:	682b      	ldr	r3, [r5, #0]
 8008d74:	0607      	lsls	r7, r0, #24
 8008d76:	f103 0104 	add.w	r1, r3, #4
 8008d7a:	6029      	str	r1, [r5, #0]
 8008d7c:	d501      	bpl.n	8008d82 <_printf_i+0xbe>
 8008d7e:	681e      	ldr	r6, [r3, #0]
 8008d80:	e003      	b.n	8008d8a <_printf_i+0xc6>
 8008d82:	0646      	lsls	r6, r0, #25
 8008d84:	d5fb      	bpl.n	8008d7e <_printf_i+0xba>
 8008d86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d8a:	2e00      	cmp	r6, #0
 8008d8c:	da03      	bge.n	8008d96 <_printf_i+0xd2>
 8008d8e:	232d      	movs	r3, #45	; 0x2d
 8008d90:	4276      	negs	r6, r6
 8008d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d96:	485a      	ldr	r0, [pc, #360]	; (8008f00 <_printf_i+0x23c>)
 8008d98:	230a      	movs	r3, #10
 8008d9a:	e012      	b.n	8008dc2 <_printf_i+0xfe>
 8008d9c:	682b      	ldr	r3, [r5, #0]
 8008d9e:	6820      	ldr	r0, [r4, #0]
 8008da0:	1d19      	adds	r1, r3, #4
 8008da2:	6029      	str	r1, [r5, #0]
 8008da4:	0605      	lsls	r5, r0, #24
 8008da6:	d501      	bpl.n	8008dac <_printf_i+0xe8>
 8008da8:	681e      	ldr	r6, [r3, #0]
 8008daa:	e002      	b.n	8008db2 <_printf_i+0xee>
 8008dac:	0641      	lsls	r1, r0, #25
 8008dae:	d5fb      	bpl.n	8008da8 <_printf_i+0xe4>
 8008db0:	881e      	ldrh	r6, [r3, #0]
 8008db2:	4853      	ldr	r0, [pc, #332]	; (8008f00 <_printf_i+0x23c>)
 8008db4:	2f6f      	cmp	r7, #111	; 0x6f
 8008db6:	bf0c      	ite	eq
 8008db8:	2308      	moveq	r3, #8
 8008dba:	230a      	movne	r3, #10
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dc2:	6865      	ldr	r5, [r4, #4]
 8008dc4:	60a5      	str	r5, [r4, #8]
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	bfa2      	ittt	ge
 8008dca:	6821      	ldrge	r1, [r4, #0]
 8008dcc:	f021 0104 	bicge.w	r1, r1, #4
 8008dd0:	6021      	strge	r1, [r4, #0]
 8008dd2:	b90e      	cbnz	r6, 8008dd8 <_printf_i+0x114>
 8008dd4:	2d00      	cmp	r5, #0
 8008dd6:	d04b      	beq.n	8008e70 <_printf_i+0x1ac>
 8008dd8:	4615      	mov	r5, r2
 8008dda:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dde:	fb03 6711 	mls	r7, r3, r1, r6
 8008de2:	5dc7      	ldrb	r7, [r0, r7]
 8008de4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008de8:	4637      	mov	r7, r6
 8008dea:	42bb      	cmp	r3, r7
 8008dec:	460e      	mov	r6, r1
 8008dee:	d9f4      	bls.n	8008dda <_printf_i+0x116>
 8008df0:	2b08      	cmp	r3, #8
 8008df2:	d10b      	bne.n	8008e0c <_printf_i+0x148>
 8008df4:	6823      	ldr	r3, [r4, #0]
 8008df6:	07de      	lsls	r6, r3, #31
 8008df8:	d508      	bpl.n	8008e0c <_printf_i+0x148>
 8008dfa:	6923      	ldr	r3, [r4, #16]
 8008dfc:	6861      	ldr	r1, [r4, #4]
 8008dfe:	4299      	cmp	r1, r3
 8008e00:	bfde      	ittt	le
 8008e02:	2330      	movle	r3, #48	; 0x30
 8008e04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e0c:	1b52      	subs	r2, r2, r5
 8008e0e:	6122      	str	r2, [r4, #16]
 8008e10:	f8cd a000 	str.w	sl, [sp]
 8008e14:	464b      	mov	r3, r9
 8008e16:	aa03      	add	r2, sp, #12
 8008e18:	4621      	mov	r1, r4
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	f7ff fee4 	bl	8008be8 <_printf_common>
 8008e20:	3001      	adds	r0, #1
 8008e22:	d14a      	bne.n	8008eba <_printf_i+0x1f6>
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	b004      	add	sp, #16
 8008e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	f043 0320 	orr.w	r3, r3, #32
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	4833      	ldr	r0, [pc, #204]	; (8008f04 <_printf_i+0x240>)
 8008e38:	2778      	movs	r7, #120	; 0x78
 8008e3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	6829      	ldr	r1, [r5, #0]
 8008e42:	061f      	lsls	r7, r3, #24
 8008e44:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e48:	d402      	bmi.n	8008e50 <_printf_i+0x18c>
 8008e4a:	065f      	lsls	r7, r3, #25
 8008e4c:	bf48      	it	mi
 8008e4e:	b2b6      	uxthmi	r6, r6
 8008e50:	07df      	lsls	r7, r3, #31
 8008e52:	bf48      	it	mi
 8008e54:	f043 0320 	orrmi.w	r3, r3, #32
 8008e58:	6029      	str	r1, [r5, #0]
 8008e5a:	bf48      	it	mi
 8008e5c:	6023      	strmi	r3, [r4, #0]
 8008e5e:	b91e      	cbnz	r6, 8008e68 <_printf_i+0x1a4>
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	f023 0320 	bic.w	r3, r3, #32
 8008e66:	6023      	str	r3, [r4, #0]
 8008e68:	2310      	movs	r3, #16
 8008e6a:	e7a7      	b.n	8008dbc <_printf_i+0xf8>
 8008e6c:	4824      	ldr	r0, [pc, #144]	; (8008f00 <_printf_i+0x23c>)
 8008e6e:	e7e4      	b.n	8008e3a <_printf_i+0x176>
 8008e70:	4615      	mov	r5, r2
 8008e72:	e7bd      	b.n	8008df0 <_printf_i+0x12c>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	6826      	ldr	r6, [r4, #0]
 8008e78:	6961      	ldr	r1, [r4, #20]
 8008e7a:	1d18      	adds	r0, r3, #4
 8008e7c:	6028      	str	r0, [r5, #0]
 8008e7e:	0635      	lsls	r5, r6, #24
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	d501      	bpl.n	8008e88 <_printf_i+0x1c4>
 8008e84:	6019      	str	r1, [r3, #0]
 8008e86:	e002      	b.n	8008e8e <_printf_i+0x1ca>
 8008e88:	0670      	lsls	r0, r6, #25
 8008e8a:	d5fb      	bpl.n	8008e84 <_printf_i+0x1c0>
 8008e8c:	8019      	strh	r1, [r3, #0]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	6123      	str	r3, [r4, #16]
 8008e92:	4615      	mov	r5, r2
 8008e94:	e7bc      	b.n	8008e10 <_printf_i+0x14c>
 8008e96:	682b      	ldr	r3, [r5, #0]
 8008e98:	1d1a      	adds	r2, r3, #4
 8008e9a:	602a      	str	r2, [r5, #0]
 8008e9c:	681d      	ldr	r5, [r3, #0]
 8008e9e:	6862      	ldr	r2, [r4, #4]
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	f7f7 f99c 	bl	80001e0 <memchr>
 8008ea8:	b108      	cbz	r0, 8008eae <_printf_i+0x1ea>
 8008eaa:	1b40      	subs	r0, r0, r5
 8008eac:	6060      	str	r0, [r4, #4]
 8008eae:	6863      	ldr	r3, [r4, #4]
 8008eb0:	6123      	str	r3, [r4, #16]
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb8:	e7aa      	b.n	8008e10 <_printf_i+0x14c>
 8008eba:	6923      	ldr	r3, [r4, #16]
 8008ebc:	462a      	mov	r2, r5
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	47d0      	blx	sl
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d0ad      	beq.n	8008e24 <_printf_i+0x160>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	079b      	lsls	r3, r3, #30
 8008ecc:	d413      	bmi.n	8008ef6 <_printf_i+0x232>
 8008ece:	68e0      	ldr	r0, [r4, #12]
 8008ed0:	9b03      	ldr	r3, [sp, #12]
 8008ed2:	4298      	cmp	r0, r3
 8008ed4:	bfb8      	it	lt
 8008ed6:	4618      	movlt	r0, r3
 8008ed8:	e7a6      	b.n	8008e28 <_printf_i+0x164>
 8008eda:	2301      	movs	r3, #1
 8008edc:	4632      	mov	r2, r6
 8008ede:	4649      	mov	r1, r9
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	47d0      	blx	sl
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	d09d      	beq.n	8008e24 <_printf_i+0x160>
 8008ee8:	3501      	adds	r5, #1
 8008eea:	68e3      	ldr	r3, [r4, #12]
 8008eec:	9903      	ldr	r1, [sp, #12]
 8008eee:	1a5b      	subs	r3, r3, r1
 8008ef0:	42ab      	cmp	r3, r5
 8008ef2:	dcf2      	bgt.n	8008eda <_printf_i+0x216>
 8008ef4:	e7eb      	b.n	8008ece <_printf_i+0x20a>
 8008ef6:	2500      	movs	r5, #0
 8008ef8:	f104 0619 	add.w	r6, r4, #25
 8008efc:	e7f5      	b.n	8008eea <_printf_i+0x226>
 8008efe:	bf00      	nop
 8008f00:	08009fc2 	.word	0x08009fc2
 8008f04:	08009fd3 	.word	0x08009fd3

08008f08 <__sflush_r>:
 8008f08:	898a      	ldrh	r2, [r1, #12]
 8008f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f0e:	4605      	mov	r5, r0
 8008f10:	0710      	lsls	r0, r2, #28
 8008f12:	460c      	mov	r4, r1
 8008f14:	d458      	bmi.n	8008fc8 <__sflush_r+0xc0>
 8008f16:	684b      	ldr	r3, [r1, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	dc05      	bgt.n	8008f28 <__sflush_r+0x20>
 8008f1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	dc02      	bgt.n	8008f28 <__sflush_r+0x20>
 8008f22:	2000      	movs	r0, #0
 8008f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f2a:	2e00      	cmp	r6, #0
 8008f2c:	d0f9      	beq.n	8008f22 <__sflush_r+0x1a>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f34:	682f      	ldr	r7, [r5, #0]
 8008f36:	6a21      	ldr	r1, [r4, #32]
 8008f38:	602b      	str	r3, [r5, #0]
 8008f3a:	d032      	beq.n	8008fa2 <__sflush_r+0x9a>
 8008f3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	075a      	lsls	r2, r3, #29
 8008f42:	d505      	bpl.n	8008f50 <__sflush_r+0x48>
 8008f44:	6863      	ldr	r3, [r4, #4]
 8008f46:	1ac0      	subs	r0, r0, r3
 8008f48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f4a:	b10b      	cbz	r3, 8008f50 <__sflush_r+0x48>
 8008f4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f4e:	1ac0      	subs	r0, r0, r3
 8008f50:	2300      	movs	r3, #0
 8008f52:	4602      	mov	r2, r0
 8008f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f56:	6a21      	ldr	r1, [r4, #32]
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b0      	blx	r6
 8008f5c:	1c43      	adds	r3, r0, #1
 8008f5e:	89a3      	ldrh	r3, [r4, #12]
 8008f60:	d106      	bne.n	8008f70 <__sflush_r+0x68>
 8008f62:	6829      	ldr	r1, [r5, #0]
 8008f64:	291d      	cmp	r1, #29
 8008f66:	d82b      	bhi.n	8008fc0 <__sflush_r+0xb8>
 8008f68:	4a29      	ldr	r2, [pc, #164]	; (8009010 <__sflush_r+0x108>)
 8008f6a:	410a      	asrs	r2, r1
 8008f6c:	07d6      	lsls	r6, r2, #31
 8008f6e:	d427      	bmi.n	8008fc0 <__sflush_r+0xb8>
 8008f70:	2200      	movs	r2, #0
 8008f72:	6062      	str	r2, [r4, #4]
 8008f74:	04d9      	lsls	r1, r3, #19
 8008f76:	6922      	ldr	r2, [r4, #16]
 8008f78:	6022      	str	r2, [r4, #0]
 8008f7a:	d504      	bpl.n	8008f86 <__sflush_r+0x7e>
 8008f7c:	1c42      	adds	r2, r0, #1
 8008f7e:	d101      	bne.n	8008f84 <__sflush_r+0x7c>
 8008f80:	682b      	ldr	r3, [r5, #0]
 8008f82:	b903      	cbnz	r3, 8008f86 <__sflush_r+0x7e>
 8008f84:	6560      	str	r0, [r4, #84]	; 0x54
 8008f86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f88:	602f      	str	r7, [r5, #0]
 8008f8a:	2900      	cmp	r1, #0
 8008f8c:	d0c9      	beq.n	8008f22 <__sflush_r+0x1a>
 8008f8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f92:	4299      	cmp	r1, r3
 8008f94:	d002      	beq.n	8008f9c <__sflush_r+0x94>
 8008f96:	4628      	mov	r0, r5
 8008f98:	f7ff fa8a 	bl	80084b0 <_free_r>
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	6360      	str	r0, [r4, #52]	; 0x34
 8008fa0:	e7c0      	b.n	8008f24 <__sflush_r+0x1c>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b0      	blx	r6
 8008fa8:	1c41      	adds	r1, r0, #1
 8008faa:	d1c8      	bne.n	8008f3e <__sflush_r+0x36>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0c5      	beq.n	8008f3e <__sflush_r+0x36>
 8008fb2:	2b1d      	cmp	r3, #29
 8008fb4:	d001      	beq.n	8008fba <__sflush_r+0xb2>
 8008fb6:	2b16      	cmp	r3, #22
 8008fb8:	d101      	bne.n	8008fbe <__sflush_r+0xb6>
 8008fba:	602f      	str	r7, [r5, #0]
 8008fbc:	e7b1      	b.n	8008f22 <__sflush_r+0x1a>
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc4:	81a3      	strh	r3, [r4, #12]
 8008fc6:	e7ad      	b.n	8008f24 <__sflush_r+0x1c>
 8008fc8:	690f      	ldr	r7, [r1, #16]
 8008fca:	2f00      	cmp	r7, #0
 8008fcc:	d0a9      	beq.n	8008f22 <__sflush_r+0x1a>
 8008fce:	0793      	lsls	r3, r2, #30
 8008fd0:	680e      	ldr	r6, [r1, #0]
 8008fd2:	bf08      	it	eq
 8008fd4:	694b      	ldreq	r3, [r1, #20]
 8008fd6:	600f      	str	r7, [r1, #0]
 8008fd8:	bf18      	it	ne
 8008fda:	2300      	movne	r3, #0
 8008fdc:	eba6 0807 	sub.w	r8, r6, r7
 8008fe0:	608b      	str	r3, [r1, #8]
 8008fe2:	f1b8 0f00 	cmp.w	r8, #0
 8008fe6:	dd9c      	ble.n	8008f22 <__sflush_r+0x1a>
 8008fe8:	6a21      	ldr	r1, [r4, #32]
 8008fea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fec:	4643      	mov	r3, r8
 8008fee:	463a      	mov	r2, r7
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b0      	blx	r6
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	dc06      	bgt.n	8009006 <__sflush_r+0xfe>
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ffe:	81a3      	strh	r3, [r4, #12]
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	e78e      	b.n	8008f24 <__sflush_r+0x1c>
 8009006:	4407      	add	r7, r0
 8009008:	eba8 0800 	sub.w	r8, r8, r0
 800900c:	e7e9      	b.n	8008fe2 <__sflush_r+0xda>
 800900e:	bf00      	nop
 8009010:	dfbffffe 	.word	0xdfbffffe

08009014 <_fflush_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	690b      	ldr	r3, [r1, #16]
 8009018:	4605      	mov	r5, r0
 800901a:	460c      	mov	r4, r1
 800901c:	b913      	cbnz	r3, 8009024 <_fflush_r+0x10>
 800901e:	2500      	movs	r5, #0
 8009020:	4628      	mov	r0, r5
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	b118      	cbz	r0, 800902e <_fflush_r+0x1a>
 8009026:	6a03      	ldr	r3, [r0, #32]
 8009028:	b90b      	cbnz	r3, 800902e <_fflush_r+0x1a>
 800902a:	f7fe ff49 	bl	8007ec0 <__sinit>
 800902e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0f3      	beq.n	800901e <_fflush_r+0xa>
 8009036:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009038:	07d0      	lsls	r0, r2, #31
 800903a:	d404      	bmi.n	8009046 <_fflush_r+0x32>
 800903c:	0599      	lsls	r1, r3, #22
 800903e:	d402      	bmi.n	8009046 <_fflush_r+0x32>
 8009040:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009042:	f7ff fa07 	bl	8008454 <__retarget_lock_acquire_recursive>
 8009046:	4628      	mov	r0, r5
 8009048:	4621      	mov	r1, r4
 800904a:	f7ff ff5d 	bl	8008f08 <__sflush_r>
 800904e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009050:	07da      	lsls	r2, r3, #31
 8009052:	4605      	mov	r5, r0
 8009054:	d4e4      	bmi.n	8009020 <_fflush_r+0xc>
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	059b      	lsls	r3, r3, #22
 800905a:	d4e1      	bmi.n	8009020 <_fflush_r+0xc>
 800905c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800905e:	f7ff f9fa 	bl	8008456 <__retarget_lock_release_recursive>
 8009062:	e7dd      	b.n	8009020 <_fflush_r+0xc>

08009064 <fiprintf>:
 8009064:	b40e      	push	{r1, r2, r3}
 8009066:	b503      	push	{r0, r1, lr}
 8009068:	4601      	mov	r1, r0
 800906a:	ab03      	add	r3, sp, #12
 800906c:	4805      	ldr	r0, [pc, #20]	; (8009084 <fiprintf+0x20>)
 800906e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009072:	6800      	ldr	r0, [r0, #0]
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	f7ff fc9d 	bl	80089b4 <_vfiprintf_r>
 800907a:	b002      	add	sp, #8
 800907c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009080:	b003      	add	sp, #12
 8009082:	4770      	bx	lr
 8009084:	20000084 	.word	0x20000084

08009088 <__swhatbuf_r>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	460c      	mov	r4, r1
 800908c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009090:	2900      	cmp	r1, #0
 8009092:	b096      	sub	sp, #88	; 0x58
 8009094:	4615      	mov	r5, r2
 8009096:	461e      	mov	r6, r3
 8009098:	da0d      	bge.n	80090b6 <__swhatbuf_r+0x2e>
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80090a0:	f04f 0100 	mov.w	r1, #0
 80090a4:	bf0c      	ite	eq
 80090a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80090aa:	2340      	movne	r3, #64	; 0x40
 80090ac:	2000      	movs	r0, #0
 80090ae:	6031      	str	r1, [r6, #0]
 80090b0:	602b      	str	r3, [r5, #0]
 80090b2:	b016      	add	sp, #88	; 0x58
 80090b4:	bd70      	pop	{r4, r5, r6, pc}
 80090b6:	466a      	mov	r2, sp
 80090b8:	f000 f862 	bl	8009180 <_fstat_r>
 80090bc:	2800      	cmp	r0, #0
 80090be:	dbec      	blt.n	800909a <__swhatbuf_r+0x12>
 80090c0:	9901      	ldr	r1, [sp, #4]
 80090c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80090c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80090ca:	4259      	negs	r1, r3
 80090cc:	4159      	adcs	r1, r3
 80090ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090d2:	e7eb      	b.n	80090ac <__swhatbuf_r+0x24>

080090d4 <__smakebuf_r>:
 80090d4:	898b      	ldrh	r3, [r1, #12]
 80090d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090d8:	079d      	lsls	r5, r3, #30
 80090da:	4606      	mov	r6, r0
 80090dc:	460c      	mov	r4, r1
 80090de:	d507      	bpl.n	80090f0 <__smakebuf_r+0x1c>
 80090e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	6123      	str	r3, [r4, #16]
 80090e8:	2301      	movs	r3, #1
 80090ea:	6163      	str	r3, [r4, #20]
 80090ec:	b002      	add	sp, #8
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	ab01      	add	r3, sp, #4
 80090f2:	466a      	mov	r2, sp
 80090f4:	f7ff ffc8 	bl	8009088 <__swhatbuf_r>
 80090f8:	9900      	ldr	r1, [sp, #0]
 80090fa:	4605      	mov	r5, r0
 80090fc:	4630      	mov	r0, r6
 80090fe:	f7ff fa4b 	bl	8008598 <_malloc_r>
 8009102:	b948      	cbnz	r0, 8009118 <__smakebuf_r+0x44>
 8009104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009108:	059a      	lsls	r2, r3, #22
 800910a:	d4ef      	bmi.n	80090ec <__smakebuf_r+0x18>
 800910c:	f023 0303 	bic.w	r3, r3, #3
 8009110:	f043 0302 	orr.w	r3, r3, #2
 8009114:	81a3      	strh	r3, [r4, #12]
 8009116:	e7e3      	b.n	80090e0 <__smakebuf_r+0xc>
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	6020      	str	r0, [r4, #0]
 800911c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009120:	81a3      	strh	r3, [r4, #12]
 8009122:	9b00      	ldr	r3, [sp, #0]
 8009124:	6163      	str	r3, [r4, #20]
 8009126:	9b01      	ldr	r3, [sp, #4]
 8009128:	6120      	str	r0, [r4, #16]
 800912a:	b15b      	cbz	r3, 8009144 <__smakebuf_r+0x70>
 800912c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009130:	4630      	mov	r0, r6
 8009132:	f000 f837 	bl	80091a4 <_isatty_r>
 8009136:	b128      	cbz	r0, 8009144 <__smakebuf_r+0x70>
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	f023 0303 	bic.w	r3, r3, #3
 800913e:	f043 0301 	orr.w	r3, r3, #1
 8009142:	81a3      	strh	r3, [r4, #12]
 8009144:	89a3      	ldrh	r3, [r4, #12]
 8009146:	431d      	orrs	r5, r3
 8009148:	81a5      	strh	r5, [r4, #12]
 800914a:	e7cf      	b.n	80090ec <__smakebuf_r+0x18>

0800914c <memmove>:
 800914c:	4288      	cmp	r0, r1
 800914e:	b510      	push	{r4, lr}
 8009150:	eb01 0402 	add.w	r4, r1, r2
 8009154:	d902      	bls.n	800915c <memmove+0x10>
 8009156:	4284      	cmp	r4, r0
 8009158:	4623      	mov	r3, r4
 800915a:	d807      	bhi.n	800916c <memmove+0x20>
 800915c:	1e43      	subs	r3, r0, #1
 800915e:	42a1      	cmp	r1, r4
 8009160:	d008      	beq.n	8009174 <memmove+0x28>
 8009162:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800916a:	e7f8      	b.n	800915e <memmove+0x12>
 800916c:	4402      	add	r2, r0
 800916e:	4601      	mov	r1, r0
 8009170:	428a      	cmp	r2, r1
 8009172:	d100      	bne.n	8009176 <memmove+0x2a>
 8009174:	bd10      	pop	{r4, pc}
 8009176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800917a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800917e:	e7f7      	b.n	8009170 <memmove+0x24>

08009180 <_fstat_r>:
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	4d07      	ldr	r5, [pc, #28]	; (80091a0 <_fstat_r+0x20>)
 8009184:	2300      	movs	r3, #0
 8009186:	4604      	mov	r4, r0
 8009188:	4608      	mov	r0, r1
 800918a:	4611      	mov	r1, r2
 800918c:	602b      	str	r3, [r5, #0]
 800918e:	f7f7 ff57 	bl	8001040 <_fstat>
 8009192:	1c43      	adds	r3, r0, #1
 8009194:	d102      	bne.n	800919c <_fstat_r+0x1c>
 8009196:	682b      	ldr	r3, [r5, #0]
 8009198:	b103      	cbz	r3, 800919c <_fstat_r+0x1c>
 800919a:	6023      	str	r3, [r4, #0]
 800919c:	bd38      	pop	{r3, r4, r5, pc}
 800919e:	bf00      	nop
 80091a0:	20001448 	.word	0x20001448

080091a4 <_isatty_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	4d06      	ldr	r5, [pc, #24]	; (80091c0 <_isatty_r+0x1c>)
 80091a8:	2300      	movs	r3, #0
 80091aa:	4604      	mov	r4, r0
 80091ac:	4608      	mov	r0, r1
 80091ae:	602b      	str	r3, [r5, #0]
 80091b0:	f7f7 ff56 	bl	8001060 <_isatty>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d102      	bne.n	80091be <_isatty_r+0x1a>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	b103      	cbz	r3, 80091be <_isatty_r+0x1a>
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	20001448 	.word	0x20001448

080091c4 <_sbrk_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4d06      	ldr	r5, [pc, #24]	; (80091e0 <_sbrk_r+0x1c>)
 80091c8:	2300      	movs	r3, #0
 80091ca:	4604      	mov	r4, r0
 80091cc:	4608      	mov	r0, r1
 80091ce:	602b      	str	r3, [r5, #0]
 80091d0:	f7f7 ff5e 	bl	8001090 <_sbrk>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	d102      	bne.n	80091de <_sbrk_r+0x1a>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	b103      	cbz	r3, 80091de <_sbrk_r+0x1a>
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	bd38      	pop	{r3, r4, r5, pc}
 80091e0:	20001448 	.word	0x20001448

080091e4 <abort>:
 80091e4:	b508      	push	{r3, lr}
 80091e6:	2006      	movs	r0, #6
 80091e8:	f000 f85a 	bl	80092a0 <raise>
 80091ec:	2001      	movs	r0, #1
 80091ee:	f7f7 fed8 	bl	8000fa2 <_exit>

080091f2 <_realloc_r>:
 80091f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091f6:	4680      	mov	r8, r0
 80091f8:	4614      	mov	r4, r2
 80091fa:	460e      	mov	r6, r1
 80091fc:	b921      	cbnz	r1, 8009208 <_realloc_r+0x16>
 80091fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009202:	4611      	mov	r1, r2
 8009204:	f7ff b9c8 	b.w	8008598 <_malloc_r>
 8009208:	b92a      	cbnz	r2, 8009216 <_realloc_r+0x24>
 800920a:	f7ff f951 	bl	80084b0 <_free_r>
 800920e:	4625      	mov	r5, r4
 8009210:	4628      	mov	r0, r5
 8009212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009216:	f000 f85f 	bl	80092d8 <_malloc_usable_size_r>
 800921a:	4284      	cmp	r4, r0
 800921c:	4607      	mov	r7, r0
 800921e:	d802      	bhi.n	8009226 <_realloc_r+0x34>
 8009220:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009224:	d812      	bhi.n	800924c <_realloc_r+0x5a>
 8009226:	4621      	mov	r1, r4
 8009228:	4640      	mov	r0, r8
 800922a:	f7ff f9b5 	bl	8008598 <_malloc_r>
 800922e:	4605      	mov	r5, r0
 8009230:	2800      	cmp	r0, #0
 8009232:	d0ed      	beq.n	8009210 <_realloc_r+0x1e>
 8009234:	42bc      	cmp	r4, r7
 8009236:	4622      	mov	r2, r4
 8009238:	4631      	mov	r1, r6
 800923a:	bf28      	it	cs
 800923c:	463a      	movcs	r2, r7
 800923e:	f7ff f90b 	bl	8008458 <memcpy>
 8009242:	4631      	mov	r1, r6
 8009244:	4640      	mov	r0, r8
 8009246:	f7ff f933 	bl	80084b0 <_free_r>
 800924a:	e7e1      	b.n	8009210 <_realloc_r+0x1e>
 800924c:	4635      	mov	r5, r6
 800924e:	e7df      	b.n	8009210 <_realloc_r+0x1e>

08009250 <_raise_r>:
 8009250:	291f      	cmp	r1, #31
 8009252:	b538      	push	{r3, r4, r5, lr}
 8009254:	4604      	mov	r4, r0
 8009256:	460d      	mov	r5, r1
 8009258:	d904      	bls.n	8009264 <_raise_r+0x14>
 800925a:	2316      	movs	r3, #22
 800925c:	6003      	str	r3, [r0, #0]
 800925e:	f04f 30ff 	mov.w	r0, #4294967295
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009266:	b112      	cbz	r2, 800926e <_raise_r+0x1e>
 8009268:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800926c:	b94b      	cbnz	r3, 8009282 <_raise_r+0x32>
 800926e:	4620      	mov	r0, r4
 8009270:	f000 f830 	bl	80092d4 <_getpid_r>
 8009274:	462a      	mov	r2, r5
 8009276:	4601      	mov	r1, r0
 8009278:	4620      	mov	r0, r4
 800927a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800927e:	f000 b817 	b.w	80092b0 <_kill_r>
 8009282:	2b01      	cmp	r3, #1
 8009284:	d00a      	beq.n	800929c <_raise_r+0x4c>
 8009286:	1c59      	adds	r1, r3, #1
 8009288:	d103      	bne.n	8009292 <_raise_r+0x42>
 800928a:	2316      	movs	r3, #22
 800928c:	6003      	str	r3, [r0, #0]
 800928e:	2001      	movs	r0, #1
 8009290:	e7e7      	b.n	8009262 <_raise_r+0x12>
 8009292:	2400      	movs	r4, #0
 8009294:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009298:	4628      	mov	r0, r5
 800929a:	4798      	blx	r3
 800929c:	2000      	movs	r0, #0
 800929e:	e7e0      	b.n	8009262 <_raise_r+0x12>

080092a0 <raise>:
 80092a0:	4b02      	ldr	r3, [pc, #8]	; (80092ac <raise+0xc>)
 80092a2:	4601      	mov	r1, r0
 80092a4:	6818      	ldr	r0, [r3, #0]
 80092a6:	f7ff bfd3 	b.w	8009250 <_raise_r>
 80092aa:	bf00      	nop
 80092ac:	20000084 	.word	0x20000084

080092b0 <_kill_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d07      	ldr	r5, [pc, #28]	; (80092d0 <_kill_r+0x20>)
 80092b4:	2300      	movs	r3, #0
 80092b6:	4604      	mov	r4, r0
 80092b8:	4608      	mov	r0, r1
 80092ba:	4611      	mov	r1, r2
 80092bc:	602b      	str	r3, [r5, #0]
 80092be:	f7f7 fe60 	bl	8000f82 <_kill>
 80092c2:	1c43      	adds	r3, r0, #1
 80092c4:	d102      	bne.n	80092cc <_kill_r+0x1c>
 80092c6:	682b      	ldr	r3, [r5, #0]
 80092c8:	b103      	cbz	r3, 80092cc <_kill_r+0x1c>
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	bd38      	pop	{r3, r4, r5, pc}
 80092ce:	bf00      	nop
 80092d0:	20001448 	.word	0x20001448

080092d4 <_getpid_r>:
 80092d4:	f7f7 be4d 	b.w	8000f72 <_getpid>

080092d8 <_malloc_usable_size_r>:
 80092d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092dc:	1f18      	subs	r0, r3, #4
 80092de:	2b00      	cmp	r3, #0
 80092e0:	bfbc      	itt	lt
 80092e2:	580b      	ldrlt	r3, [r1, r0]
 80092e4:	18c0      	addlt	r0, r0, r3
 80092e6:	4770      	bx	lr

080092e8 <_init>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	bf00      	nop
 80092ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ee:	bc08      	pop	{r3}
 80092f0:	469e      	mov	lr, r3
 80092f2:	4770      	bx	lr

080092f4 <_fini>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	bf00      	nop
 80092f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fa:	bc08      	pop	{r3}
 80092fc:	469e      	mov	lr, r3
 80092fe:	4770      	bx	lr
